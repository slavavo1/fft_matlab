// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_new\Subsystem2.v
// Created: 2025-06-03 14:06:56
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem2
// Source Path: fft_new/Subsystem2
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem2
          (clk,
           reset,
           enb,
           enb_const_rate,
           DATA_B_re,
           DATA_B_im,
           rst,
           ENA,
           Out3_re,
           Out3_im,
           Out4_re,
           Out4_im,
           valid1);


  input   clk;
  input   reset;
  input   enb;
  input   enb_const_rate;
  input   signed [7:0] DATA_B_re;  // int8
  input   signed [7:0] DATA_B_im;  // int8
  input   rst;
  input   ENA;
  output  signed [15:0] Out3_re;  // int16
  output  signed [15:0] Out3_im;  // int16
  output  signed [15:0] Out4_re;  // int16
  output  signed [15:0] Out4_im;  // int16
  output  valid1;


  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire [7:0] count_reset;  // uint8
  reg [7:0] HDL_Counter2_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] count_1;  // uint8
  wire [7:0] count_2;  // uint8
  wire Compare_To_Constant_out1;
  wire switch_compare_1;
  wire signed [15:0] Constant8_out1;  // int16
  wire signed [15:0] Constant9_out1;  // int16
  wire signed [15:0] Data_Type_Conversion2_out1_re;  // int16
  wire signed [15:0] Data_Type_Conversion2_out1_im;  // int16
  wire signed [15:0] Switch2_out1_re;  // int16
  wire signed [15:0] Switch2_out1_im;  // int16
  reg signed [15:0] Delay_bypass_delay_re;  // sfix16
  reg signed [15:0] Delay_bypass_delay_im;  // sfix16
  reg signed [15:0] Delay_reg_re [0:127];  // sfix16 [128]
  reg signed [15:0] Delay_reg_im [0:127];  // sfix16 [128]
  wire signed [15:0] Delay_bypass_delay_next_re;  // sfix16
  wire signed [15:0] Delay_bypass_delay_next_im;  // sfix16
  wire signed [15:0] Delay_reg_next_re [0:127];  // sfix16 [128]
  wire signed [15:0] Delay_reg_next_im [0:127];  // sfix16 [128]
  wire signed [15:0] Delay_out1_re;  // int16
  wire signed [15:0] Delay_out1_im;  // int16
  wire switch_compare_1_1;
  wire signed [15:0] Switch1_out1_re;  // int16
  wire signed [15:0] Switch1_out1_im;  // int16
  wire [6:0] Bit_Slice_out1;  // ufix7
  wire [7:0] Constant11_out1 [0:5];  // uint8 [6]
  wire [6:0] Delay4_out1 [0:5];  // ufix7 [6]
  wire [6:0] For_Each_Subsystem1_out1 [0:5];  // ufix7 [6]
  wire [6:0] For_Each_Subsystem1_out1_5;  // ufix7
  wire [6:0] For_Each_Subsystem1_out1_4;  // ufix7
  wire [6:0] For_Each_Subsystem1_out1_3;  // ufix7
  wire [6:0] For_Each_Subsystem1_out1_2;  // ufix7
  wire [6:0] For_Each_Subsystem1_out1_1;  // ufix7
  wire [6:0] For_Each_Subsystem1_out1_0;  // ufix7
  wire [6:0] For_Each_Subsystem1_out1_6 [0:5];  // ufix7 [6]
  reg [6:0] Delay4_bypass_delay [0:5];  // ufix7 [6]
  reg [6:0] Delay4_reg [0:5];  // ufix7 [6]
  wire [6:0] Delay4_bypass_delay_next [0:5];  // ufix7 [6]
  wire [6:0] Delay4_reg_next [0:5];  // ufix7 [6]
  wire [6:0] Vector_Concatenate2_out1 [0:5];  // ufix7 [6]
  reg [6:0] Delay3_bypass_delay [0:5];  // ufix7 [6]
  reg [6:0] Delay3_reg [0:5];  // ufix7 [6]
  wire [6:0] Delay3_bypass_delay_next [0:5];  // ufix7 [6]
  wire [6:0] Delay3_reg_next [0:5];  // ufix7 [6]
  wire [6:0] Delay3_out1 [0:5];  // ufix7 [6]
  wire [7:0] Constant4_out1 [0:5];  // uint8 [6]
  wire [7:0] Constant5_out1 [0:5];  // uint8 [6]
  wire signed [15:0] REGA_im [0:5];  // int16 [6]
  wire signed [15:0] REGA_im_1 [0:5];  // int16 [6]
  wire signed [15:0] REGA_re [0:5];  // int16 [6]
  wire signed [15:0] Subsystem_out2_im_0;  // int16
  wire signed [15:0] Subsystem_out2_im_1;  // int16
  wire signed [15:0] Subsystem_out2_im_2;  // int16
  wire signed [15:0] Subsystem_out2_im_3;  // int16
  wire signed [15:0] Subsystem_out2_im_4;  // int16
  wire signed [15:0] Subsystem_out2_im_5;  // int16
  wire signed [15:0] Subsystem_out2_im [0:5];  // int16 [6]
  wire signed [15:0] Subsystem_out2_re_0;  // int16
  wire signed [15:0] Subsystem_out2_re_1;  // int16
  wire signed [15:0] Subsystem_out2_re_2;  // int16
  wire signed [15:0] Subsystem_out2_re_3;  // int16
  wire signed [15:0] Subsystem_out2_re_4;  // int16
  wire signed [15:0] Subsystem_out2_re_5;  // int16
  wire signed [15:0] Subsystem_out2_re [0:5];  // int16 [6]
  reg signed [15:0] Delay1_bypass_delay_re [0:5];  // sfix16 [6]
  reg signed [15:0] Delay1_bypass_delay_im [0:5];  // sfix16 [6]
  reg signed [15:0] Delay1_reg_re [0:5];  // sfix16 [6]
  reg signed [15:0] Delay1_reg_im [0:5];  // sfix16 [6]
  wire signed [15:0] Delay1_bypass_delay_next_re [0:5];  // sfix16 [6]
  wire signed [15:0] Delay1_bypass_delay_next_im [0:5];  // sfix16 [6]
  wire signed [15:0] Delay1_reg_next_re [0:5];  // sfix16 [6]
  wire signed [15:0] Delay1_reg_next_im [0:5];  // sfix16 [6]
  wire signed [15:0] Delay1_out1_re [0:5];  // int16 [6]
  wire signed [15:0] Delay1_out1_im [0:5];  // int16 [6]
  wire signed [15:0] Subsystem_out1_im_0;  // int16
  wire signed [15:0] Subsystem_out1_im_1;  // int16
  wire signed [15:0] Subsystem_out1_im_2;  // int16
  wire signed [15:0] Subsystem_out1_im_3;  // int16
  wire signed [15:0] Subsystem_out1_im_4;  // int16
  wire signed [15:0] Subsystem_out1_im_5;  // int16
  wire signed [15:0] Subsystem_out1_im [0:5];  // int16 [6]
  wire signed [15:0] For_Each_Subsystem_out2_im [0:5];  // int16 [6]
  wire signed [15:0] For_Each_Subsystem_out2_re [0:5];  // int16 [6]
  wire signed [15:0] Delay2_out1_im [0:5];  // int16 [6]
  wire signed [15:0] Delay2_out1_re [0:5];  // int16 [6]
  wire signed [15:0] Subsystem_out1_re_0;  // int16
  wire signed [15:0] Subsystem_out1_re_1;  // int16
  wire signed [15:0] Subsystem_out1_re_2;  // int16
  wire signed [15:0] Subsystem_out1_re_3;  // int16
  wire signed [15:0] Subsystem_out1_re_4;  // int16
  wire signed [15:0] Subsystem_out1_re_5;  // int16
  wire signed [15:0] Subsystem_out1_re [0:5];  // int16 [6]
  wire signed [15:0] REGA_re_1 [0:5];  // int16 [6]
  reg signed [15:0] Delay2_bypass_delay_re [0:5];  // sfix16 [6]
  reg signed [15:0] Delay2_bypass_delay_im [0:5];  // sfix16 [6]
  reg signed [15:0] Delay2_reg_re [0:5];  // sfix16 [6]
  reg signed [15:0] Delay2_reg_im [0:5];  // sfix16 [6]
  wire signed [15:0] Delay2_bypass_delay_next_re [0:5];  // sfix16 [6]
  wire signed [15:0] Delay2_bypass_delay_next_im [0:5];  // sfix16 [6]
  wire signed [15:0] Delay2_reg_next_re [0:5];  // sfix16 [6]
  wire signed [15:0] Delay2_reg_next_im [0:5];  // sfix16 [6]
  wire signed [15:0] Subsystem1_out1_re;  // int16
  wire signed [15:0] Subsystem1_out1_im;  // int16
  wire signed [15:0] Subsystem1_out2_re;  // int16
  wire signed [15:0] Subsystem1_out2_im;  // int16
  wire [7:0] Constant7_out1;  // uint8
  wire Relational_Operator_relop1;
  wire [7:0] Constant6_out1;  // uint8
  wire Relational_Operator1_relop1;
  wire [7:0] Constant12_out1;  // uint8
  wire Relational_Operator2_relop1;
  wire Constant10_out1;
  reg  Delay5_bypass;  // ufix1
  reg  Delay5_reg;  // ufix1
  wire Delay5_bypass_next;  // ufix1
  wire Delay5_delay_out;  // ufix1
  wire valid;
  wire valid_1;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 255
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign count_reset = 8'b00000000;



  assign count = HDL_Counter2_out1 + count_step;



  assign need_to_wrap = HDL_Counter2_out1 == 8'b11111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (ENA == 1'b0 ? HDL_Counter2_out1 :
              count_value);



  assign count_2 = (rst == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter2_process
      if (reset == 1'b1) begin
        HDL_Counter2_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter2_out1 <= count_2;
        end
      end
    end



  Compare_To_Constant u_Compare_To_Constant (.u(HDL_Counter2_out1),  // uint8
                                             .y(Compare_To_Constant_out1)
                                             );

  assign switch_compare_1 = Compare_To_Constant_out1 > 1'b0;



  assign Constant8_out1 = 16'sb0000000000000000;



  assign Constant9_out1 = 16'sb0000000000000000;



  assign Data_Type_Conversion2_out1_re = {{8{DATA_B_re[7]}}, DATA_B_re};
  assign Data_Type_Conversion2_out1_im = {{8{DATA_B_im[7]}}, DATA_B_im};



  assign Switch2_out1_re = (switch_compare_1 == 1'b0 ? Constant8_out1 :
              Data_Type_Conversion2_out1_re);
  assign Switch2_out1_im = (switch_compare_1 == 1'b0 ? Constant9_out1 :
              Data_Type_Conversion2_out1_im);



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_bypass_delay_re <= 16'sb0000000000000000;
        Delay_bypass_delay_im <= 16'sb0000000000000000;
        Delay_reg_re[0] <= 16'sb0000000000000000;
        Delay_reg_im[0] <= 16'sb0000000000000000;
        Delay_reg_re[1] <= 16'sb0000000000000000;
        Delay_reg_im[1] <= 16'sb0000000000000000;
        Delay_reg_re[2] <= 16'sb0000000000000000;
        Delay_reg_im[2] <= 16'sb0000000000000000;
        Delay_reg_re[3] <= 16'sb0000000000000000;
        Delay_reg_im[3] <= 16'sb0000000000000000;
        Delay_reg_re[4] <= 16'sb0000000000000000;
        Delay_reg_im[4] <= 16'sb0000000000000000;
        Delay_reg_re[5] <= 16'sb0000000000000000;
        Delay_reg_im[5] <= 16'sb0000000000000000;
        Delay_reg_re[6] <= 16'sb0000000000000000;
        Delay_reg_im[6] <= 16'sb0000000000000000;
        Delay_reg_re[7] <= 16'sb0000000000000000;
        Delay_reg_im[7] <= 16'sb0000000000000000;
        Delay_reg_re[8] <= 16'sb0000000000000000;
        Delay_reg_im[8] <= 16'sb0000000000000000;
        Delay_reg_re[9] <= 16'sb0000000000000000;
        Delay_reg_im[9] <= 16'sb0000000000000000;
        Delay_reg_re[10] <= 16'sb0000000000000000;
        Delay_reg_im[10] <= 16'sb0000000000000000;
        Delay_reg_re[11] <= 16'sb0000000000000000;
        Delay_reg_im[11] <= 16'sb0000000000000000;
        Delay_reg_re[12] <= 16'sb0000000000000000;
        Delay_reg_im[12] <= 16'sb0000000000000000;
        Delay_reg_re[13] <= 16'sb0000000000000000;
        Delay_reg_im[13] <= 16'sb0000000000000000;
        Delay_reg_re[14] <= 16'sb0000000000000000;
        Delay_reg_im[14] <= 16'sb0000000000000000;
        Delay_reg_re[15] <= 16'sb0000000000000000;
        Delay_reg_im[15] <= 16'sb0000000000000000;
        Delay_reg_re[16] <= 16'sb0000000000000000;
        Delay_reg_im[16] <= 16'sb0000000000000000;
        Delay_reg_re[17] <= 16'sb0000000000000000;
        Delay_reg_im[17] <= 16'sb0000000000000000;
        Delay_reg_re[18] <= 16'sb0000000000000000;
        Delay_reg_im[18] <= 16'sb0000000000000000;
        Delay_reg_re[19] <= 16'sb0000000000000000;
        Delay_reg_im[19] <= 16'sb0000000000000000;
        Delay_reg_re[20] <= 16'sb0000000000000000;
        Delay_reg_im[20] <= 16'sb0000000000000000;
        Delay_reg_re[21] <= 16'sb0000000000000000;
        Delay_reg_im[21] <= 16'sb0000000000000000;
        Delay_reg_re[22] <= 16'sb0000000000000000;
        Delay_reg_im[22] <= 16'sb0000000000000000;
        Delay_reg_re[23] <= 16'sb0000000000000000;
        Delay_reg_im[23] <= 16'sb0000000000000000;
        Delay_reg_re[24] <= 16'sb0000000000000000;
        Delay_reg_im[24] <= 16'sb0000000000000000;
        Delay_reg_re[25] <= 16'sb0000000000000000;
        Delay_reg_im[25] <= 16'sb0000000000000000;
        Delay_reg_re[26] <= 16'sb0000000000000000;
        Delay_reg_im[26] <= 16'sb0000000000000000;
        Delay_reg_re[27] <= 16'sb0000000000000000;
        Delay_reg_im[27] <= 16'sb0000000000000000;
        Delay_reg_re[28] <= 16'sb0000000000000000;
        Delay_reg_im[28] <= 16'sb0000000000000000;
        Delay_reg_re[29] <= 16'sb0000000000000000;
        Delay_reg_im[29] <= 16'sb0000000000000000;
        Delay_reg_re[30] <= 16'sb0000000000000000;
        Delay_reg_im[30] <= 16'sb0000000000000000;
        Delay_reg_re[31] <= 16'sb0000000000000000;
        Delay_reg_im[31] <= 16'sb0000000000000000;
        Delay_reg_re[32] <= 16'sb0000000000000000;
        Delay_reg_im[32] <= 16'sb0000000000000000;
        Delay_reg_re[33] <= 16'sb0000000000000000;
        Delay_reg_im[33] <= 16'sb0000000000000000;
        Delay_reg_re[34] <= 16'sb0000000000000000;
        Delay_reg_im[34] <= 16'sb0000000000000000;
        Delay_reg_re[35] <= 16'sb0000000000000000;
        Delay_reg_im[35] <= 16'sb0000000000000000;
        Delay_reg_re[36] <= 16'sb0000000000000000;
        Delay_reg_im[36] <= 16'sb0000000000000000;
        Delay_reg_re[37] <= 16'sb0000000000000000;
        Delay_reg_im[37] <= 16'sb0000000000000000;
        Delay_reg_re[38] <= 16'sb0000000000000000;
        Delay_reg_im[38] <= 16'sb0000000000000000;
        Delay_reg_re[39] <= 16'sb0000000000000000;
        Delay_reg_im[39] <= 16'sb0000000000000000;
        Delay_reg_re[40] <= 16'sb0000000000000000;
        Delay_reg_im[40] <= 16'sb0000000000000000;
        Delay_reg_re[41] <= 16'sb0000000000000000;
        Delay_reg_im[41] <= 16'sb0000000000000000;
        Delay_reg_re[42] <= 16'sb0000000000000000;
        Delay_reg_im[42] <= 16'sb0000000000000000;
        Delay_reg_re[43] <= 16'sb0000000000000000;
        Delay_reg_im[43] <= 16'sb0000000000000000;
        Delay_reg_re[44] <= 16'sb0000000000000000;
        Delay_reg_im[44] <= 16'sb0000000000000000;
        Delay_reg_re[45] <= 16'sb0000000000000000;
        Delay_reg_im[45] <= 16'sb0000000000000000;
        Delay_reg_re[46] <= 16'sb0000000000000000;
        Delay_reg_im[46] <= 16'sb0000000000000000;
        Delay_reg_re[47] <= 16'sb0000000000000000;
        Delay_reg_im[47] <= 16'sb0000000000000000;
        Delay_reg_re[48] <= 16'sb0000000000000000;
        Delay_reg_im[48] <= 16'sb0000000000000000;
        Delay_reg_re[49] <= 16'sb0000000000000000;
        Delay_reg_im[49] <= 16'sb0000000000000000;
        Delay_reg_re[50] <= 16'sb0000000000000000;
        Delay_reg_im[50] <= 16'sb0000000000000000;
        Delay_reg_re[51] <= 16'sb0000000000000000;
        Delay_reg_im[51] <= 16'sb0000000000000000;
        Delay_reg_re[52] <= 16'sb0000000000000000;
        Delay_reg_im[52] <= 16'sb0000000000000000;
        Delay_reg_re[53] <= 16'sb0000000000000000;
        Delay_reg_im[53] <= 16'sb0000000000000000;
        Delay_reg_re[54] <= 16'sb0000000000000000;
        Delay_reg_im[54] <= 16'sb0000000000000000;
        Delay_reg_re[55] <= 16'sb0000000000000000;
        Delay_reg_im[55] <= 16'sb0000000000000000;
        Delay_reg_re[56] <= 16'sb0000000000000000;
        Delay_reg_im[56] <= 16'sb0000000000000000;
        Delay_reg_re[57] <= 16'sb0000000000000000;
        Delay_reg_im[57] <= 16'sb0000000000000000;
        Delay_reg_re[58] <= 16'sb0000000000000000;
        Delay_reg_im[58] <= 16'sb0000000000000000;
        Delay_reg_re[59] <= 16'sb0000000000000000;
        Delay_reg_im[59] <= 16'sb0000000000000000;
        Delay_reg_re[60] <= 16'sb0000000000000000;
        Delay_reg_im[60] <= 16'sb0000000000000000;
        Delay_reg_re[61] <= 16'sb0000000000000000;
        Delay_reg_im[61] <= 16'sb0000000000000000;
        Delay_reg_re[62] <= 16'sb0000000000000000;
        Delay_reg_im[62] <= 16'sb0000000000000000;
        Delay_reg_re[63] <= 16'sb0000000000000000;
        Delay_reg_im[63] <= 16'sb0000000000000000;
        Delay_reg_re[64] <= 16'sb0000000000000000;
        Delay_reg_im[64] <= 16'sb0000000000000000;
        Delay_reg_re[65] <= 16'sb0000000000000000;
        Delay_reg_im[65] <= 16'sb0000000000000000;
        Delay_reg_re[66] <= 16'sb0000000000000000;
        Delay_reg_im[66] <= 16'sb0000000000000000;
        Delay_reg_re[67] <= 16'sb0000000000000000;
        Delay_reg_im[67] <= 16'sb0000000000000000;
        Delay_reg_re[68] <= 16'sb0000000000000000;
        Delay_reg_im[68] <= 16'sb0000000000000000;
        Delay_reg_re[69] <= 16'sb0000000000000000;
        Delay_reg_im[69] <= 16'sb0000000000000000;
        Delay_reg_re[70] <= 16'sb0000000000000000;
        Delay_reg_im[70] <= 16'sb0000000000000000;
        Delay_reg_re[71] <= 16'sb0000000000000000;
        Delay_reg_im[71] <= 16'sb0000000000000000;
        Delay_reg_re[72] <= 16'sb0000000000000000;
        Delay_reg_im[72] <= 16'sb0000000000000000;
        Delay_reg_re[73] <= 16'sb0000000000000000;
        Delay_reg_im[73] <= 16'sb0000000000000000;
        Delay_reg_re[74] <= 16'sb0000000000000000;
        Delay_reg_im[74] <= 16'sb0000000000000000;
        Delay_reg_re[75] <= 16'sb0000000000000000;
        Delay_reg_im[75] <= 16'sb0000000000000000;
        Delay_reg_re[76] <= 16'sb0000000000000000;
        Delay_reg_im[76] <= 16'sb0000000000000000;
        Delay_reg_re[77] <= 16'sb0000000000000000;
        Delay_reg_im[77] <= 16'sb0000000000000000;
        Delay_reg_re[78] <= 16'sb0000000000000000;
        Delay_reg_im[78] <= 16'sb0000000000000000;
        Delay_reg_re[79] <= 16'sb0000000000000000;
        Delay_reg_im[79] <= 16'sb0000000000000000;
        Delay_reg_re[80] <= 16'sb0000000000000000;
        Delay_reg_im[80] <= 16'sb0000000000000000;
        Delay_reg_re[81] <= 16'sb0000000000000000;
        Delay_reg_im[81] <= 16'sb0000000000000000;
        Delay_reg_re[82] <= 16'sb0000000000000000;
        Delay_reg_im[82] <= 16'sb0000000000000000;
        Delay_reg_re[83] <= 16'sb0000000000000000;
        Delay_reg_im[83] <= 16'sb0000000000000000;
        Delay_reg_re[84] <= 16'sb0000000000000000;
        Delay_reg_im[84] <= 16'sb0000000000000000;
        Delay_reg_re[85] <= 16'sb0000000000000000;
        Delay_reg_im[85] <= 16'sb0000000000000000;
        Delay_reg_re[86] <= 16'sb0000000000000000;
        Delay_reg_im[86] <= 16'sb0000000000000000;
        Delay_reg_re[87] <= 16'sb0000000000000000;
        Delay_reg_im[87] <= 16'sb0000000000000000;
        Delay_reg_re[88] <= 16'sb0000000000000000;
        Delay_reg_im[88] <= 16'sb0000000000000000;
        Delay_reg_re[89] <= 16'sb0000000000000000;
        Delay_reg_im[89] <= 16'sb0000000000000000;
        Delay_reg_re[90] <= 16'sb0000000000000000;
        Delay_reg_im[90] <= 16'sb0000000000000000;
        Delay_reg_re[91] <= 16'sb0000000000000000;
        Delay_reg_im[91] <= 16'sb0000000000000000;
        Delay_reg_re[92] <= 16'sb0000000000000000;
        Delay_reg_im[92] <= 16'sb0000000000000000;
        Delay_reg_re[93] <= 16'sb0000000000000000;
        Delay_reg_im[93] <= 16'sb0000000000000000;
        Delay_reg_re[94] <= 16'sb0000000000000000;
        Delay_reg_im[94] <= 16'sb0000000000000000;
        Delay_reg_re[95] <= 16'sb0000000000000000;
        Delay_reg_im[95] <= 16'sb0000000000000000;
        Delay_reg_re[96] <= 16'sb0000000000000000;
        Delay_reg_im[96] <= 16'sb0000000000000000;
        Delay_reg_re[97] <= 16'sb0000000000000000;
        Delay_reg_im[97] <= 16'sb0000000000000000;
        Delay_reg_re[98] <= 16'sb0000000000000000;
        Delay_reg_im[98] <= 16'sb0000000000000000;
        Delay_reg_re[99] <= 16'sb0000000000000000;
        Delay_reg_im[99] <= 16'sb0000000000000000;
        Delay_reg_re[100] <= 16'sb0000000000000000;
        Delay_reg_im[100] <= 16'sb0000000000000000;
        Delay_reg_re[101] <= 16'sb0000000000000000;
        Delay_reg_im[101] <= 16'sb0000000000000000;
        Delay_reg_re[102] <= 16'sb0000000000000000;
        Delay_reg_im[102] <= 16'sb0000000000000000;
        Delay_reg_re[103] <= 16'sb0000000000000000;
        Delay_reg_im[103] <= 16'sb0000000000000000;
        Delay_reg_re[104] <= 16'sb0000000000000000;
        Delay_reg_im[104] <= 16'sb0000000000000000;
        Delay_reg_re[105] <= 16'sb0000000000000000;
        Delay_reg_im[105] <= 16'sb0000000000000000;
        Delay_reg_re[106] <= 16'sb0000000000000000;
        Delay_reg_im[106] <= 16'sb0000000000000000;
        Delay_reg_re[107] <= 16'sb0000000000000000;
        Delay_reg_im[107] <= 16'sb0000000000000000;
        Delay_reg_re[108] <= 16'sb0000000000000000;
        Delay_reg_im[108] <= 16'sb0000000000000000;
        Delay_reg_re[109] <= 16'sb0000000000000000;
        Delay_reg_im[109] <= 16'sb0000000000000000;
        Delay_reg_re[110] <= 16'sb0000000000000000;
        Delay_reg_im[110] <= 16'sb0000000000000000;
        Delay_reg_re[111] <= 16'sb0000000000000000;
        Delay_reg_im[111] <= 16'sb0000000000000000;
        Delay_reg_re[112] <= 16'sb0000000000000000;
        Delay_reg_im[112] <= 16'sb0000000000000000;
        Delay_reg_re[113] <= 16'sb0000000000000000;
        Delay_reg_im[113] <= 16'sb0000000000000000;
        Delay_reg_re[114] <= 16'sb0000000000000000;
        Delay_reg_im[114] <= 16'sb0000000000000000;
        Delay_reg_re[115] <= 16'sb0000000000000000;
        Delay_reg_im[115] <= 16'sb0000000000000000;
        Delay_reg_re[116] <= 16'sb0000000000000000;
        Delay_reg_im[116] <= 16'sb0000000000000000;
        Delay_reg_re[117] <= 16'sb0000000000000000;
        Delay_reg_im[117] <= 16'sb0000000000000000;
        Delay_reg_re[118] <= 16'sb0000000000000000;
        Delay_reg_im[118] <= 16'sb0000000000000000;
        Delay_reg_re[119] <= 16'sb0000000000000000;
        Delay_reg_im[119] <= 16'sb0000000000000000;
        Delay_reg_re[120] <= 16'sb0000000000000000;
        Delay_reg_im[120] <= 16'sb0000000000000000;
        Delay_reg_re[121] <= 16'sb0000000000000000;
        Delay_reg_im[121] <= 16'sb0000000000000000;
        Delay_reg_re[122] <= 16'sb0000000000000000;
        Delay_reg_im[122] <= 16'sb0000000000000000;
        Delay_reg_re[123] <= 16'sb0000000000000000;
        Delay_reg_im[123] <= 16'sb0000000000000000;
        Delay_reg_re[124] <= 16'sb0000000000000000;
        Delay_reg_im[124] <= 16'sb0000000000000000;
        Delay_reg_re[125] <= 16'sb0000000000000000;
        Delay_reg_im[125] <= 16'sb0000000000000000;
        Delay_reg_re[126] <= 16'sb0000000000000000;
        Delay_reg_im[126] <= 16'sb0000000000000000;
        Delay_reg_re[127] <= 16'sb0000000000000000;
        Delay_reg_im[127] <= 16'sb0000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay_bypass_delay_re <= Delay_bypass_delay_next_re;
          Delay_bypass_delay_im <= Delay_bypass_delay_next_im;
          Delay_reg_re[0] <= Delay_reg_next_re[0];
          Delay_reg_im[0] <= Delay_reg_next_im[0];
          Delay_reg_re[1] <= Delay_reg_next_re[1];
          Delay_reg_im[1] <= Delay_reg_next_im[1];
          Delay_reg_re[2] <= Delay_reg_next_re[2];
          Delay_reg_im[2] <= Delay_reg_next_im[2];
          Delay_reg_re[3] <= Delay_reg_next_re[3];
          Delay_reg_im[3] <= Delay_reg_next_im[3];
          Delay_reg_re[4] <= Delay_reg_next_re[4];
          Delay_reg_im[4] <= Delay_reg_next_im[4];
          Delay_reg_re[5] <= Delay_reg_next_re[5];
          Delay_reg_im[5] <= Delay_reg_next_im[5];
          Delay_reg_re[6] <= Delay_reg_next_re[6];
          Delay_reg_im[6] <= Delay_reg_next_im[6];
          Delay_reg_re[7] <= Delay_reg_next_re[7];
          Delay_reg_im[7] <= Delay_reg_next_im[7];
          Delay_reg_re[8] <= Delay_reg_next_re[8];
          Delay_reg_im[8] <= Delay_reg_next_im[8];
          Delay_reg_re[9] <= Delay_reg_next_re[9];
          Delay_reg_im[9] <= Delay_reg_next_im[9];
          Delay_reg_re[10] <= Delay_reg_next_re[10];
          Delay_reg_im[10] <= Delay_reg_next_im[10];
          Delay_reg_re[11] <= Delay_reg_next_re[11];
          Delay_reg_im[11] <= Delay_reg_next_im[11];
          Delay_reg_re[12] <= Delay_reg_next_re[12];
          Delay_reg_im[12] <= Delay_reg_next_im[12];
          Delay_reg_re[13] <= Delay_reg_next_re[13];
          Delay_reg_im[13] <= Delay_reg_next_im[13];
          Delay_reg_re[14] <= Delay_reg_next_re[14];
          Delay_reg_im[14] <= Delay_reg_next_im[14];
          Delay_reg_re[15] <= Delay_reg_next_re[15];
          Delay_reg_im[15] <= Delay_reg_next_im[15];
          Delay_reg_re[16] <= Delay_reg_next_re[16];
          Delay_reg_im[16] <= Delay_reg_next_im[16];
          Delay_reg_re[17] <= Delay_reg_next_re[17];
          Delay_reg_im[17] <= Delay_reg_next_im[17];
          Delay_reg_re[18] <= Delay_reg_next_re[18];
          Delay_reg_im[18] <= Delay_reg_next_im[18];
          Delay_reg_re[19] <= Delay_reg_next_re[19];
          Delay_reg_im[19] <= Delay_reg_next_im[19];
          Delay_reg_re[20] <= Delay_reg_next_re[20];
          Delay_reg_im[20] <= Delay_reg_next_im[20];
          Delay_reg_re[21] <= Delay_reg_next_re[21];
          Delay_reg_im[21] <= Delay_reg_next_im[21];
          Delay_reg_re[22] <= Delay_reg_next_re[22];
          Delay_reg_im[22] <= Delay_reg_next_im[22];
          Delay_reg_re[23] <= Delay_reg_next_re[23];
          Delay_reg_im[23] <= Delay_reg_next_im[23];
          Delay_reg_re[24] <= Delay_reg_next_re[24];
          Delay_reg_im[24] <= Delay_reg_next_im[24];
          Delay_reg_re[25] <= Delay_reg_next_re[25];
          Delay_reg_im[25] <= Delay_reg_next_im[25];
          Delay_reg_re[26] <= Delay_reg_next_re[26];
          Delay_reg_im[26] <= Delay_reg_next_im[26];
          Delay_reg_re[27] <= Delay_reg_next_re[27];
          Delay_reg_im[27] <= Delay_reg_next_im[27];
          Delay_reg_re[28] <= Delay_reg_next_re[28];
          Delay_reg_im[28] <= Delay_reg_next_im[28];
          Delay_reg_re[29] <= Delay_reg_next_re[29];
          Delay_reg_im[29] <= Delay_reg_next_im[29];
          Delay_reg_re[30] <= Delay_reg_next_re[30];
          Delay_reg_im[30] <= Delay_reg_next_im[30];
          Delay_reg_re[31] <= Delay_reg_next_re[31];
          Delay_reg_im[31] <= Delay_reg_next_im[31];
          Delay_reg_re[32] <= Delay_reg_next_re[32];
          Delay_reg_im[32] <= Delay_reg_next_im[32];
          Delay_reg_re[33] <= Delay_reg_next_re[33];
          Delay_reg_im[33] <= Delay_reg_next_im[33];
          Delay_reg_re[34] <= Delay_reg_next_re[34];
          Delay_reg_im[34] <= Delay_reg_next_im[34];
          Delay_reg_re[35] <= Delay_reg_next_re[35];
          Delay_reg_im[35] <= Delay_reg_next_im[35];
          Delay_reg_re[36] <= Delay_reg_next_re[36];
          Delay_reg_im[36] <= Delay_reg_next_im[36];
          Delay_reg_re[37] <= Delay_reg_next_re[37];
          Delay_reg_im[37] <= Delay_reg_next_im[37];
          Delay_reg_re[38] <= Delay_reg_next_re[38];
          Delay_reg_im[38] <= Delay_reg_next_im[38];
          Delay_reg_re[39] <= Delay_reg_next_re[39];
          Delay_reg_im[39] <= Delay_reg_next_im[39];
          Delay_reg_re[40] <= Delay_reg_next_re[40];
          Delay_reg_im[40] <= Delay_reg_next_im[40];
          Delay_reg_re[41] <= Delay_reg_next_re[41];
          Delay_reg_im[41] <= Delay_reg_next_im[41];
          Delay_reg_re[42] <= Delay_reg_next_re[42];
          Delay_reg_im[42] <= Delay_reg_next_im[42];
          Delay_reg_re[43] <= Delay_reg_next_re[43];
          Delay_reg_im[43] <= Delay_reg_next_im[43];
          Delay_reg_re[44] <= Delay_reg_next_re[44];
          Delay_reg_im[44] <= Delay_reg_next_im[44];
          Delay_reg_re[45] <= Delay_reg_next_re[45];
          Delay_reg_im[45] <= Delay_reg_next_im[45];
          Delay_reg_re[46] <= Delay_reg_next_re[46];
          Delay_reg_im[46] <= Delay_reg_next_im[46];
          Delay_reg_re[47] <= Delay_reg_next_re[47];
          Delay_reg_im[47] <= Delay_reg_next_im[47];
          Delay_reg_re[48] <= Delay_reg_next_re[48];
          Delay_reg_im[48] <= Delay_reg_next_im[48];
          Delay_reg_re[49] <= Delay_reg_next_re[49];
          Delay_reg_im[49] <= Delay_reg_next_im[49];
          Delay_reg_re[50] <= Delay_reg_next_re[50];
          Delay_reg_im[50] <= Delay_reg_next_im[50];
          Delay_reg_re[51] <= Delay_reg_next_re[51];
          Delay_reg_im[51] <= Delay_reg_next_im[51];
          Delay_reg_re[52] <= Delay_reg_next_re[52];
          Delay_reg_im[52] <= Delay_reg_next_im[52];
          Delay_reg_re[53] <= Delay_reg_next_re[53];
          Delay_reg_im[53] <= Delay_reg_next_im[53];
          Delay_reg_re[54] <= Delay_reg_next_re[54];
          Delay_reg_im[54] <= Delay_reg_next_im[54];
          Delay_reg_re[55] <= Delay_reg_next_re[55];
          Delay_reg_im[55] <= Delay_reg_next_im[55];
          Delay_reg_re[56] <= Delay_reg_next_re[56];
          Delay_reg_im[56] <= Delay_reg_next_im[56];
          Delay_reg_re[57] <= Delay_reg_next_re[57];
          Delay_reg_im[57] <= Delay_reg_next_im[57];
          Delay_reg_re[58] <= Delay_reg_next_re[58];
          Delay_reg_im[58] <= Delay_reg_next_im[58];
          Delay_reg_re[59] <= Delay_reg_next_re[59];
          Delay_reg_im[59] <= Delay_reg_next_im[59];
          Delay_reg_re[60] <= Delay_reg_next_re[60];
          Delay_reg_im[60] <= Delay_reg_next_im[60];
          Delay_reg_re[61] <= Delay_reg_next_re[61];
          Delay_reg_im[61] <= Delay_reg_next_im[61];
          Delay_reg_re[62] <= Delay_reg_next_re[62];
          Delay_reg_im[62] <= Delay_reg_next_im[62];
          Delay_reg_re[63] <= Delay_reg_next_re[63];
          Delay_reg_im[63] <= Delay_reg_next_im[63];
          Delay_reg_re[64] <= Delay_reg_next_re[64];
          Delay_reg_im[64] <= Delay_reg_next_im[64];
          Delay_reg_re[65] <= Delay_reg_next_re[65];
          Delay_reg_im[65] <= Delay_reg_next_im[65];
          Delay_reg_re[66] <= Delay_reg_next_re[66];
          Delay_reg_im[66] <= Delay_reg_next_im[66];
          Delay_reg_re[67] <= Delay_reg_next_re[67];
          Delay_reg_im[67] <= Delay_reg_next_im[67];
          Delay_reg_re[68] <= Delay_reg_next_re[68];
          Delay_reg_im[68] <= Delay_reg_next_im[68];
          Delay_reg_re[69] <= Delay_reg_next_re[69];
          Delay_reg_im[69] <= Delay_reg_next_im[69];
          Delay_reg_re[70] <= Delay_reg_next_re[70];
          Delay_reg_im[70] <= Delay_reg_next_im[70];
          Delay_reg_re[71] <= Delay_reg_next_re[71];
          Delay_reg_im[71] <= Delay_reg_next_im[71];
          Delay_reg_re[72] <= Delay_reg_next_re[72];
          Delay_reg_im[72] <= Delay_reg_next_im[72];
          Delay_reg_re[73] <= Delay_reg_next_re[73];
          Delay_reg_im[73] <= Delay_reg_next_im[73];
          Delay_reg_re[74] <= Delay_reg_next_re[74];
          Delay_reg_im[74] <= Delay_reg_next_im[74];
          Delay_reg_re[75] <= Delay_reg_next_re[75];
          Delay_reg_im[75] <= Delay_reg_next_im[75];
          Delay_reg_re[76] <= Delay_reg_next_re[76];
          Delay_reg_im[76] <= Delay_reg_next_im[76];
          Delay_reg_re[77] <= Delay_reg_next_re[77];
          Delay_reg_im[77] <= Delay_reg_next_im[77];
          Delay_reg_re[78] <= Delay_reg_next_re[78];
          Delay_reg_im[78] <= Delay_reg_next_im[78];
          Delay_reg_re[79] <= Delay_reg_next_re[79];
          Delay_reg_im[79] <= Delay_reg_next_im[79];
          Delay_reg_re[80] <= Delay_reg_next_re[80];
          Delay_reg_im[80] <= Delay_reg_next_im[80];
          Delay_reg_re[81] <= Delay_reg_next_re[81];
          Delay_reg_im[81] <= Delay_reg_next_im[81];
          Delay_reg_re[82] <= Delay_reg_next_re[82];
          Delay_reg_im[82] <= Delay_reg_next_im[82];
          Delay_reg_re[83] <= Delay_reg_next_re[83];
          Delay_reg_im[83] <= Delay_reg_next_im[83];
          Delay_reg_re[84] <= Delay_reg_next_re[84];
          Delay_reg_im[84] <= Delay_reg_next_im[84];
          Delay_reg_re[85] <= Delay_reg_next_re[85];
          Delay_reg_im[85] <= Delay_reg_next_im[85];
          Delay_reg_re[86] <= Delay_reg_next_re[86];
          Delay_reg_im[86] <= Delay_reg_next_im[86];
          Delay_reg_re[87] <= Delay_reg_next_re[87];
          Delay_reg_im[87] <= Delay_reg_next_im[87];
          Delay_reg_re[88] <= Delay_reg_next_re[88];
          Delay_reg_im[88] <= Delay_reg_next_im[88];
          Delay_reg_re[89] <= Delay_reg_next_re[89];
          Delay_reg_im[89] <= Delay_reg_next_im[89];
          Delay_reg_re[90] <= Delay_reg_next_re[90];
          Delay_reg_im[90] <= Delay_reg_next_im[90];
          Delay_reg_re[91] <= Delay_reg_next_re[91];
          Delay_reg_im[91] <= Delay_reg_next_im[91];
          Delay_reg_re[92] <= Delay_reg_next_re[92];
          Delay_reg_im[92] <= Delay_reg_next_im[92];
          Delay_reg_re[93] <= Delay_reg_next_re[93];
          Delay_reg_im[93] <= Delay_reg_next_im[93];
          Delay_reg_re[94] <= Delay_reg_next_re[94];
          Delay_reg_im[94] <= Delay_reg_next_im[94];
          Delay_reg_re[95] <= Delay_reg_next_re[95];
          Delay_reg_im[95] <= Delay_reg_next_im[95];
          Delay_reg_re[96] <= Delay_reg_next_re[96];
          Delay_reg_im[96] <= Delay_reg_next_im[96];
          Delay_reg_re[97] <= Delay_reg_next_re[97];
          Delay_reg_im[97] <= Delay_reg_next_im[97];
          Delay_reg_re[98] <= Delay_reg_next_re[98];
          Delay_reg_im[98] <= Delay_reg_next_im[98];
          Delay_reg_re[99] <= Delay_reg_next_re[99];
          Delay_reg_im[99] <= Delay_reg_next_im[99];
          Delay_reg_re[100] <= Delay_reg_next_re[100];
          Delay_reg_im[100] <= Delay_reg_next_im[100];
          Delay_reg_re[101] <= Delay_reg_next_re[101];
          Delay_reg_im[101] <= Delay_reg_next_im[101];
          Delay_reg_re[102] <= Delay_reg_next_re[102];
          Delay_reg_im[102] <= Delay_reg_next_im[102];
          Delay_reg_re[103] <= Delay_reg_next_re[103];
          Delay_reg_im[103] <= Delay_reg_next_im[103];
          Delay_reg_re[104] <= Delay_reg_next_re[104];
          Delay_reg_im[104] <= Delay_reg_next_im[104];
          Delay_reg_re[105] <= Delay_reg_next_re[105];
          Delay_reg_im[105] <= Delay_reg_next_im[105];
          Delay_reg_re[106] <= Delay_reg_next_re[106];
          Delay_reg_im[106] <= Delay_reg_next_im[106];
          Delay_reg_re[107] <= Delay_reg_next_re[107];
          Delay_reg_im[107] <= Delay_reg_next_im[107];
          Delay_reg_re[108] <= Delay_reg_next_re[108];
          Delay_reg_im[108] <= Delay_reg_next_im[108];
          Delay_reg_re[109] <= Delay_reg_next_re[109];
          Delay_reg_im[109] <= Delay_reg_next_im[109];
          Delay_reg_re[110] <= Delay_reg_next_re[110];
          Delay_reg_im[110] <= Delay_reg_next_im[110];
          Delay_reg_re[111] <= Delay_reg_next_re[111];
          Delay_reg_im[111] <= Delay_reg_next_im[111];
          Delay_reg_re[112] <= Delay_reg_next_re[112];
          Delay_reg_im[112] <= Delay_reg_next_im[112];
          Delay_reg_re[113] <= Delay_reg_next_re[113];
          Delay_reg_im[113] <= Delay_reg_next_im[113];
          Delay_reg_re[114] <= Delay_reg_next_re[114];
          Delay_reg_im[114] <= Delay_reg_next_im[114];
          Delay_reg_re[115] <= Delay_reg_next_re[115];
          Delay_reg_im[115] <= Delay_reg_next_im[115];
          Delay_reg_re[116] <= Delay_reg_next_re[116];
          Delay_reg_im[116] <= Delay_reg_next_im[116];
          Delay_reg_re[117] <= Delay_reg_next_re[117];
          Delay_reg_im[117] <= Delay_reg_next_im[117];
          Delay_reg_re[118] <= Delay_reg_next_re[118];
          Delay_reg_im[118] <= Delay_reg_next_im[118];
          Delay_reg_re[119] <= Delay_reg_next_re[119];
          Delay_reg_im[119] <= Delay_reg_next_im[119];
          Delay_reg_re[120] <= Delay_reg_next_re[120];
          Delay_reg_im[120] <= Delay_reg_next_im[120];
          Delay_reg_re[121] <= Delay_reg_next_re[121];
          Delay_reg_im[121] <= Delay_reg_next_im[121];
          Delay_reg_re[122] <= Delay_reg_next_re[122];
          Delay_reg_im[122] <= Delay_reg_next_im[122];
          Delay_reg_re[123] <= Delay_reg_next_re[123];
          Delay_reg_im[123] <= Delay_reg_next_im[123];
          Delay_reg_re[124] <= Delay_reg_next_re[124];
          Delay_reg_im[124] <= Delay_reg_next_im[124];
          Delay_reg_re[125] <= Delay_reg_next_re[125];
          Delay_reg_im[125] <= Delay_reg_next_im[125];
          Delay_reg_re[126] <= Delay_reg_next_re[126];
          Delay_reg_im[126] <= Delay_reg_next_im[126];
          Delay_reg_re[127] <= Delay_reg_next_re[127];
          Delay_reg_im[127] <= Delay_reg_next_im[127];
        end
      end
    end

  assign Delay_out1_re = (ENA == 1'b1 ? Delay_reg_re[127] :
              Delay_bypass_delay_re);
  assign Delay_out1_im = (ENA == 1'b1 ? Delay_reg_im[127] :
              Delay_bypass_delay_im);
  assign Delay_bypass_delay_next_re = Delay_reg_re[127];
  assign Delay_bypass_delay_next_im = Delay_reg_im[127];
  assign Delay_reg_next_re[0] = Switch2_out1_re;
  assign Delay_reg_next_im[0] = Switch2_out1_im;
  assign Delay_reg_next_re[1] = Delay_reg_re[0];
  assign Delay_reg_next_im[1] = Delay_reg_im[0];
  assign Delay_reg_next_re[2] = Delay_reg_re[1];
  assign Delay_reg_next_im[2] = Delay_reg_im[1];
  assign Delay_reg_next_re[3] = Delay_reg_re[2];
  assign Delay_reg_next_im[3] = Delay_reg_im[2];
  assign Delay_reg_next_re[4] = Delay_reg_re[3];
  assign Delay_reg_next_im[4] = Delay_reg_im[3];
  assign Delay_reg_next_re[5] = Delay_reg_re[4];
  assign Delay_reg_next_im[5] = Delay_reg_im[4];
  assign Delay_reg_next_re[6] = Delay_reg_re[5];
  assign Delay_reg_next_im[6] = Delay_reg_im[5];
  assign Delay_reg_next_re[7] = Delay_reg_re[6];
  assign Delay_reg_next_im[7] = Delay_reg_im[6];
  assign Delay_reg_next_re[8] = Delay_reg_re[7];
  assign Delay_reg_next_im[8] = Delay_reg_im[7];
  assign Delay_reg_next_re[9] = Delay_reg_re[8];
  assign Delay_reg_next_im[9] = Delay_reg_im[8];
  assign Delay_reg_next_re[10] = Delay_reg_re[9];
  assign Delay_reg_next_im[10] = Delay_reg_im[9];
  assign Delay_reg_next_re[11] = Delay_reg_re[10];
  assign Delay_reg_next_im[11] = Delay_reg_im[10];
  assign Delay_reg_next_re[12] = Delay_reg_re[11];
  assign Delay_reg_next_im[12] = Delay_reg_im[11];
  assign Delay_reg_next_re[13] = Delay_reg_re[12];
  assign Delay_reg_next_im[13] = Delay_reg_im[12];
  assign Delay_reg_next_re[14] = Delay_reg_re[13];
  assign Delay_reg_next_im[14] = Delay_reg_im[13];
  assign Delay_reg_next_re[15] = Delay_reg_re[14];
  assign Delay_reg_next_im[15] = Delay_reg_im[14];
  assign Delay_reg_next_re[16] = Delay_reg_re[15];
  assign Delay_reg_next_im[16] = Delay_reg_im[15];
  assign Delay_reg_next_re[17] = Delay_reg_re[16];
  assign Delay_reg_next_im[17] = Delay_reg_im[16];
  assign Delay_reg_next_re[18] = Delay_reg_re[17];
  assign Delay_reg_next_im[18] = Delay_reg_im[17];
  assign Delay_reg_next_re[19] = Delay_reg_re[18];
  assign Delay_reg_next_im[19] = Delay_reg_im[18];
  assign Delay_reg_next_re[20] = Delay_reg_re[19];
  assign Delay_reg_next_im[20] = Delay_reg_im[19];
  assign Delay_reg_next_re[21] = Delay_reg_re[20];
  assign Delay_reg_next_im[21] = Delay_reg_im[20];
  assign Delay_reg_next_re[22] = Delay_reg_re[21];
  assign Delay_reg_next_im[22] = Delay_reg_im[21];
  assign Delay_reg_next_re[23] = Delay_reg_re[22];
  assign Delay_reg_next_im[23] = Delay_reg_im[22];
  assign Delay_reg_next_re[24] = Delay_reg_re[23];
  assign Delay_reg_next_im[24] = Delay_reg_im[23];
  assign Delay_reg_next_re[25] = Delay_reg_re[24];
  assign Delay_reg_next_im[25] = Delay_reg_im[24];
  assign Delay_reg_next_re[26] = Delay_reg_re[25];
  assign Delay_reg_next_im[26] = Delay_reg_im[25];
  assign Delay_reg_next_re[27] = Delay_reg_re[26];
  assign Delay_reg_next_im[27] = Delay_reg_im[26];
  assign Delay_reg_next_re[28] = Delay_reg_re[27];
  assign Delay_reg_next_im[28] = Delay_reg_im[27];
  assign Delay_reg_next_re[29] = Delay_reg_re[28];
  assign Delay_reg_next_im[29] = Delay_reg_im[28];
  assign Delay_reg_next_re[30] = Delay_reg_re[29];
  assign Delay_reg_next_im[30] = Delay_reg_im[29];
  assign Delay_reg_next_re[31] = Delay_reg_re[30];
  assign Delay_reg_next_im[31] = Delay_reg_im[30];
  assign Delay_reg_next_re[32] = Delay_reg_re[31];
  assign Delay_reg_next_im[32] = Delay_reg_im[31];
  assign Delay_reg_next_re[33] = Delay_reg_re[32];
  assign Delay_reg_next_im[33] = Delay_reg_im[32];
  assign Delay_reg_next_re[34] = Delay_reg_re[33];
  assign Delay_reg_next_im[34] = Delay_reg_im[33];
  assign Delay_reg_next_re[35] = Delay_reg_re[34];
  assign Delay_reg_next_im[35] = Delay_reg_im[34];
  assign Delay_reg_next_re[36] = Delay_reg_re[35];
  assign Delay_reg_next_im[36] = Delay_reg_im[35];
  assign Delay_reg_next_re[37] = Delay_reg_re[36];
  assign Delay_reg_next_im[37] = Delay_reg_im[36];
  assign Delay_reg_next_re[38] = Delay_reg_re[37];
  assign Delay_reg_next_im[38] = Delay_reg_im[37];
  assign Delay_reg_next_re[39] = Delay_reg_re[38];
  assign Delay_reg_next_im[39] = Delay_reg_im[38];
  assign Delay_reg_next_re[40] = Delay_reg_re[39];
  assign Delay_reg_next_im[40] = Delay_reg_im[39];
  assign Delay_reg_next_re[41] = Delay_reg_re[40];
  assign Delay_reg_next_im[41] = Delay_reg_im[40];
  assign Delay_reg_next_re[42] = Delay_reg_re[41];
  assign Delay_reg_next_im[42] = Delay_reg_im[41];
  assign Delay_reg_next_re[43] = Delay_reg_re[42];
  assign Delay_reg_next_im[43] = Delay_reg_im[42];
  assign Delay_reg_next_re[44] = Delay_reg_re[43];
  assign Delay_reg_next_im[44] = Delay_reg_im[43];
  assign Delay_reg_next_re[45] = Delay_reg_re[44];
  assign Delay_reg_next_im[45] = Delay_reg_im[44];
  assign Delay_reg_next_re[46] = Delay_reg_re[45];
  assign Delay_reg_next_im[46] = Delay_reg_im[45];
  assign Delay_reg_next_re[47] = Delay_reg_re[46];
  assign Delay_reg_next_im[47] = Delay_reg_im[46];
  assign Delay_reg_next_re[48] = Delay_reg_re[47];
  assign Delay_reg_next_im[48] = Delay_reg_im[47];
  assign Delay_reg_next_re[49] = Delay_reg_re[48];
  assign Delay_reg_next_im[49] = Delay_reg_im[48];
  assign Delay_reg_next_re[50] = Delay_reg_re[49];
  assign Delay_reg_next_im[50] = Delay_reg_im[49];
  assign Delay_reg_next_re[51] = Delay_reg_re[50];
  assign Delay_reg_next_im[51] = Delay_reg_im[50];
  assign Delay_reg_next_re[52] = Delay_reg_re[51];
  assign Delay_reg_next_im[52] = Delay_reg_im[51];
  assign Delay_reg_next_re[53] = Delay_reg_re[52];
  assign Delay_reg_next_im[53] = Delay_reg_im[52];
  assign Delay_reg_next_re[54] = Delay_reg_re[53];
  assign Delay_reg_next_im[54] = Delay_reg_im[53];
  assign Delay_reg_next_re[55] = Delay_reg_re[54];
  assign Delay_reg_next_im[55] = Delay_reg_im[54];
  assign Delay_reg_next_re[56] = Delay_reg_re[55];
  assign Delay_reg_next_im[56] = Delay_reg_im[55];
  assign Delay_reg_next_re[57] = Delay_reg_re[56];
  assign Delay_reg_next_im[57] = Delay_reg_im[56];
  assign Delay_reg_next_re[58] = Delay_reg_re[57];
  assign Delay_reg_next_im[58] = Delay_reg_im[57];
  assign Delay_reg_next_re[59] = Delay_reg_re[58];
  assign Delay_reg_next_im[59] = Delay_reg_im[58];
  assign Delay_reg_next_re[60] = Delay_reg_re[59];
  assign Delay_reg_next_im[60] = Delay_reg_im[59];
  assign Delay_reg_next_re[61] = Delay_reg_re[60];
  assign Delay_reg_next_im[61] = Delay_reg_im[60];
  assign Delay_reg_next_re[62] = Delay_reg_re[61];
  assign Delay_reg_next_im[62] = Delay_reg_im[61];
  assign Delay_reg_next_re[63] = Delay_reg_re[62];
  assign Delay_reg_next_im[63] = Delay_reg_im[62];
  assign Delay_reg_next_re[64] = Delay_reg_re[63];
  assign Delay_reg_next_im[64] = Delay_reg_im[63];
  assign Delay_reg_next_re[65] = Delay_reg_re[64];
  assign Delay_reg_next_im[65] = Delay_reg_im[64];
  assign Delay_reg_next_re[66] = Delay_reg_re[65];
  assign Delay_reg_next_im[66] = Delay_reg_im[65];
  assign Delay_reg_next_re[67] = Delay_reg_re[66];
  assign Delay_reg_next_im[67] = Delay_reg_im[66];
  assign Delay_reg_next_re[68] = Delay_reg_re[67];
  assign Delay_reg_next_im[68] = Delay_reg_im[67];
  assign Delay_reg_next_re[69] = Delay_reg_re[68];
  assign Delay_reg_next_im[69] = Delay_reg_im[68];
  assign Delay_reg_next_re[70] = Delay_reg_re[69];
  assign Delay_reg_next_im[70] = Delay_reg_im[69];
  assign Delay_reg_next_re[71] = Delay_reg_re[70];
  assign Delay_reg_next_im[71] = Delay_reg_im[70];
  assign Delay_reg_next_re[72] = Delay_reg_re[71];
  assign Delay_reg_next_im[72] = Delay_reg_im[71];
  assign Delay_reg_next_re[73] = Delay_reg_re[72];
  assign Delay_reg_next_im[73] = Delay_reg_im[72];
  assign Delay_reg_next_re[74] = Delay_reg_re[73];
  assign Delay_reg_next_im[74] = Delay_reg_im[73];
  assign Delay_reg_next_re[75] = Delay_reg_re[74];
  assign Delay_reg_next_im[75] = Delay_reg_im[74];
  assign Delay_reg_next_re[76] = Delay_reg_re[75];
  assign Delay_reg_next_im[76] = Delay_reg_im[75];
  assign Delay_reg_next_re[77] = Delay_reg_re[76];
  assign Delay_reg_next_im[77] = Delay_reg_im[76];
  assign Delay_reg_next_re[78] = Delay_reg_re[77];
  assign Delay_reg_next_im[78] = Delay_reg_im[77];
  assign Delay_reg_next_re[79] = Delay_reg_re[78];
  assign Delay_reg_next_im[79] = Delay_reg_im[78];
  assign Delay_reg_next_re[80] = Delay_reg_re[79];
  assign Delay_reg_next_im[80] = Delay_reg_im[79];
  assign Delay_reg_next_re[81] = Delay_reg_re[80];
  assign Delay_reg_next_im[81] = Delay_reg_im[80];
  assign Delay_reg_next_re[82] = Delay_reg_re[81];
  assign Delay_reg_next_im[82] = Delay_reg_im[81];
  assign Delay_reg_next_re[83] = Delay_reg_re[82];
  assign Delay_reg_next_im[83] = Delay_reg_im[82];
  assign Delay_reg_next_re[84] = Delay_reg_re[83];
  assign Delay_reg_next_im[84] = Delay_reg_im[83];
  assign Delay_reg_next_re[85] = Delay_reg_re[84];
  assign Delay_reg_next_im[85] = Delay_reg_im[84];
  assign Delay_reg_next_re[86] = Delay_reg_re[85];
  assign Delay_reg_next_im[86] = Delay_reg_im[85];
  assign Delay_reg_next_re[87] = Delay_reg_re[86];
  assign Delay_reg_next_im[87] = Delay_reg_im[86];
  assign Delay_reg_next_re[88] = Delay_reg_re[87];
  assign Delay_reg_next_im[88] = Delay_reg_im[87];
  assign Delay_reg_next_re[89] = Delay_reg_re[88];
  assign Delay_reg_next_im[89] = Delay_reg_im[88];
  assign Delay_reg_next_re[90] = Delay_reg_re[89];
  assign Delay_reg_next_im[90] = Delay_reg_im[89];
  assign Delay_reg_next_re[91] = Delay_reg_re[90];
  assign Delay_reg_next_im[91] = Delay_reg_im[90];
  assign Delay_reg_next_re[92] = Delay_reg_re[91];
  assign Delay_reg_next_im[92] = Delay_reg_im[91];
  assign Delay_reg_next_re[93] = Delay_reg_re[92];
  assign Delay_reg_next_im[93] = Delay_reg_im[92];
  assign Delay_reg_next_re[94] = Delay_reg_re[93];
  assign Delay_reg_next_im[94] = Delay_reg_im[93];
  assign Delay_reg_next_re[95] = Delay_reg_re[94];
  assign Delay_reg_next_im[95] = Delay_reg_im[94];
  assign Delay_reg_next_re[96] = Delay_reg_re[95];
  assign Delay_reg_next_im[96] = Delay_reg_im[95];
  assign Delay_reg_next_re[97] = Delay_reg_re[96];
  assign Delay_reg_next_im[97] = Delay_reg_im[96];
  assign Delay_reg_next_re[98] = Delay_reg_re[97];
  assign Delay_reg_next_im[98] = Delay_reg_im[97];
  assign Delay_reg_next_re[99] = Delay_reg_re[98];
  assign Delay_reg_next_im[99] = Delay_reg_im[98];
  assign Delay_reg_next_re[100] = Delay_reg_re[99];
  assign Delay_reg_next_im[100] = Delay_reg_im[99];
  assign Delay_reg_next_re[101] = Delay_reg_re[100];
  assign Delay_reg_next_im[101] = Delay_reg_im[100];
  assign Delay_reg_next_re[102] = Delay_reg_re[101];
  assign Delay_reg_next_im[102] = Delay_reg_im[101];
  assign Delay_reg_next_re[103] = Delay_reg_re[102];
  assign Delay_reg_next_im[103] = Delay_reg_im[102];
  assign Delay_reg_next_re[104] = Delay_reg_re[103];
  assign Delay_reg_next_im[104] = Delay_reg_im[103];
  assign Delay_reg_next_re[105] = Delay_reg_re[104];
  assign Delay_reg_next_im[105] = Delay_reg_im[104];
  assign Delay_reg_next_re[106] = Delay_reg_re[105];
  assign Delay_reg_next_im[106] = Delay_reg_im[105];
  assign Delay_reg_next_re[107] = Delay_reg_re[106];
  assign Delay_reg_next_im[107] = Delay_reg_im[106];
  assign Delay_reg_next_re[108] = Delay_reg_re[107];
  assign Delay_reg_next_im[108] = Delay_reg_im[107];
  assign Delay_reg_next_re[109] = Delay_reg_re[108];
  assign Delay_reg_next_im[109] = Delay_reg_im[108];
  assign Delay_reg_next_re[110] = Delay_reg_re[109];
  assign Delay_reg_next_im[110] = Delay_reg_im[109];
  assign Delay_reg_next_re[111] = Delay_reg_re[110];
  assign Delay_reg_next_im[111] = Delay_reg_im[110];
  assign Delay_reg_next_re[112] = Delay_reg_re[111];
  assign Delay_reg_next_im[112] = Delay_reg_im[111];
  assign Delay_reg_next_re[113] = Delay_reg_re[112];
  assign Delay_reg_next_im[113] = Delay_reg_im[112];
  assign Delay_reg_next_re[114] = Delay_reg_re[113];
  assign Delay_reg_next_im[114] = Delay_reg_im[113];
  assign Delay_reg_next_re[115] = Delay_reg_re[114];
  assign Delay_reg_next_im[115] = Delay_reg_im[114];
  assign Delay_reg_next_re[116] = Delay_reg_re[115];
  assign Delay_reg_next_im[116] = Delay_reg_im[115];
  assign Delay_reg_next_re[117] = Delay_reg_re[116];
  assign Delay_reg_next_im[117] = Delay_reg_im[116];
  assign Delay_reg_next_re[118] = Delay_reg_re[117];
  assign Delay_reg_next_im[118] = Delay_reg_im[117];
  assign Delay_reg_next_re[119] = Delay_reg_re[118];
  assign Delay_reg_next_im[119] = Delay_reg_im[118];
  assign Delay_reg_next_re[120] = Delay_reg_re[119];
  assign Delay_reg_next_im[120] = Delay_reg_im[119];
  assign Delay_reg_next_re[121] = Delay_reg_re[120];
  assign Delay_reg_next_im[121] = Delay_reg_im[120];
  assign Delay_reg_next_re[122] = Delay_reg_re[121];
  assign Delay_reg_next_im[122] = Delay_reg_im[121];
  assign Delay_reg_next_re[123] = Delay_reg_re[122];
  assign Delay_reg_next_im[123] = Delay_reg_im[122];
  assign Delay_reg_next_re[124] = Delay_reg_re[123];
  assign Delay_reg_next_im[124] = Delay_reg_im[123];
  assign Delay_reg_next_re[125] = Delay_reg_re[124];
  assign Delay_reg_next_im[125] = Delay_reg_im[124];
  assign Delay_reg_next_re[126] = Delay_reg_re[125];
  assign Delay_reg_next_im[126] = Delay_reg_im[125];
  assign Delay_reg_next_re[127] = Delay_reg_re[126];
  assign Delay_reg_next_im[127] = Delay_reg_im[126];



  assign switch_compare_1_1 = Compare_To_Constant_out1 > 1'b0;



  assign Switch1_out1_re = (switch_compare_1_1 == 1'b0 ? Data_Type_Conversion2_out1_re :
              Constant8_out1);
  assign Switch1_out1_im = (switch_compare_1_1 == 1'b0 ? Data_Type_Conversion2_out1_im :
              Constant9_out1);



  assign Bit_Slice_out1 = HDL_Counter2_out1[6:0];



  assign Constant11_out1[0] = 8'b01111111;
  assign Constant11_out1[1] = 8'b00111111;
  assign Constant11_out1[2] = 8'b00011111;
  assign Constant11_out1[3] = 8'b00001111;
  assign Constant11_out1[4] = 8'b00000111;
  assign Constant11_out1[5] = 8'b00000011;



  assign For_Each_Subsystem1_out1_5 = For_Each_Subsystem1_out1[5];

  assign For_Each_Subsystem1_out1_4 = For_Each_Subsystem1_out1[4];

  assign For_Each_Subsystem1_out1_3 = For_Each_Subsystem1_out1[3];

  assign For_Each_Subsystem1_out1_2 = For_Each_Subsystem1_out1[2];

  assign For_Each_Subsystem1_out1_1 = For_Each_Subsystem1_out1[1];

  assign For_Each_Subsystem1_out1_6[0] = For_Each_Subsystem1_out1_0;
  assign For_Each_Subsystem1_out1_6[1] = For_Each_Subsystem1_out1_1;
  assign For_Each_Subsystem1_out1_6[2] = For_Each_Subsystem1_out1_2;
  assign For_Each_Subsystem1_out1_6[3] = For_Each_Subsystem1_out1_3;
  assign For_Each_Subsystem1_out1_6[4] = For_Each_Subsystem1_out1_4;
  assign For_Each_Subsystem1_out1_6[5] = For_Each_Subsystem1_out1_5;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_bypass_delay[0] <= 7'b0000000;
        Delay4_bypass_delay[1] <= 7'b0000000;
        Delay4_bypass_delay[2] <= 7'b0000000;
        Delay4_bypass_delay[3] <= 7'b0000000;
        Delay4_bypass_delay[4] <= 7'b0000000;
        Delay4_bypass_delay[5] <= 7'b0000000;
        Delay4_reg[0] <= 7'b0000000;
        Delay4_reg[1] <= 7'b0000000;
        Delay4_reg[2] <= 7'b0000000;
        Delay4_reg[3] <= 7'b0000000;
        Delay4_reg[4] <= 7'b0000000;
        Delay4_reg[5] <= 7'b0000000;
      end
      else begin
        if (enb && ENA) begin
          Delay4_bypass_delay[0] <= Delay4_bypass_delay_next[0];
          Delay4_bypass_delay[1] <= Delay4_bypass_delay_next[1];
          Delay4_bypass_delay[2] <= Delay4_bypass_delay_next[2];
          Delay4_bypass_delay[3] <= Delay4_bypass_delay_next[3];
          Delay4_bypass_delay[4] <= Delay4_bypass_delay_next[4];
          Delay4_bypass_delay[5] <= Delay4_bypass_delay_next[5];
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
          Delay4_reg[2] <= Delay4_reg_next[2];
          Delay4_reg[3] <= Delay4_reg_next[3];
          Delay4_reg[4] <= Delay4_reg_next[4];
          Delay4_reg[5] <= Delay4_reg_next[5];
        end
      end
    end

  assign Delay4_out1[0] = (ENA == 1'b1 ? Delay4_reg[0] :
              Delay4_bypass_delay[0]);
  assign Delay4_out1[1] = (ENA == 1'b1 ? Delay4_reg[1] :
              Delay4_bypass_delay[1]);
  assign Delay4_out1[2] = (ENA == 1'b1 ? Delay4_reg[2] :
              Delay4_bypass_delay[2]);
  assign Delay4_out1[3] = (ENA == 1'b1 ? Delay4_reg[3] :
              Delay4_bypass_delay[3]);
  assign Delay4_out1[4] = (ENA == 1'b1 ? Delay4_reg[4] :
              Delay4_bypass_delay[4]);
  assign Delay4_out1[5] = (ENA == 1'b1 ? Delay4_reg[5] :
              Delay4_bypass_delay[5]);
  assign Delay4_bypass_delay_next[0] = Delay4_reg[0];
  assign Delay4_bypass_delay_next[1] = Delay4_reg[1];
  assign Delay4_bypass_delay_next[2] = Delay4_reg[2];
  assign Delay4_bypass_delay_next[3] = Delay4_reg[3];
  assign Delay4_bypass_delay_next[4] = Delay4_reg[4];
  assign Delay4_bypass_delay_next[5] = Delay4_reg[5];
  assign Delay4_reg_next[0] = For_Each_Subsystem1_out1_6[0];
  assign Delay4_reg_next[1] = For_Each_Subsystem1_out1_6[1];
  assign Delay4_reg_next[2] = For_Each_Subsystem1_out1_6[2];
  assign Delay4_reg_next[3] = For_Each_Subsystem1_out1_6[3];
  assign Delay4_reg_next[4] = For_Each_Subsystem1_out1_6[4];
  assign Delay4_reg_next[5] = For_Each_Subsystem1_out1_6[5];



  assign Vector_Concatenate2_out1[0] = Bit_Slice_out1;
  assign Vector_Concatenate2_out1[1] = Delay4_out1[0];
  assign Vector_Concatenate2_out1[2] = Delay4_out1[1];
  assign Vector_Concatenate2_out1[3] = Delay4_out1[2];
  assign Vector_Concatenate2_out1[4] = Delay4_out1[3];
  assign Vector_Concatenate2_out1[5] = Delay4_out1[4];

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_bypass_delay[0] <= 7'b0000000;
        Delay3_bypass_delay[1] <= 7'b0000000;
        Delay3_bypass_delay[2] <= 7'b0000000;
        Delay3_bypass_delay[3] <= 7'b0000000;
        Delay3_bypass_delay[4] <= 7'b0000000;
        Delay3_bypass_delay[5] <= 7'b0000000;
        Delay3_reg[0] <= 7'b0000000;
        Delay3_reg[1] <= 7'b0000000;
        Delay3_reg[2] <= 7'b0000000;
        Delay3_reg[3] <= 7'b0000000;
        Delay3_reg[4] <= 7'b0000000;
        Delay3_reg[5] <= 7'b0000000;
      end
      else begin
        if (enb && ENA) begin
          Delay3_bypass_delay[0] <= Delay3_bypass_delay_next[0];
          Delay3_bypass_delay[1] <= Delay3_bypass_delay_next[1];
          Delay3_bypass_delay[2] <= Delay3_bypass_delay_next[2];
          Delay3_bypass_delay[3] <= Delay3_bypass_delay_next[3];
          Delay3_bypass_delay[4] <= Delay3_bypass_delay_next[4];
          Delay3_bypass_delay[5] <= Delay3_bypass_delay_next[5];
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
          Delay3_reg[2] <= Delay3_reg_next[2];
          Delay3_reg[3] <= Delay3_reg_next[3];
          Delay3_reg[4] <= Delay3_reg_next[4];
          Delay3_reg[5] <= Delay3_reg_next[5];
        end
      end
    end

  assign Delay3_out1[0] = (ENA == 1'b1 ? Delay3_reg[0] :
              Delay3_bypass_delay[0]);
  assign Delay3_out1[1] = (ENA == 1'b1 ? Delay3_reg[1] :
              Delay3_bypass_delay[1]);
  assign Delay3_out1[2] = (ENA == 1'b1 ? Delay3_reg[2] :
              Delay3_bypass_delay[2]);
  assign Delay3_out1[3] = (ENA == 1'b1 ? Delay3_reg[3] :
              Delay3_bypass_delay[3]);
  assign Delay3_out1[4] = (ENA == 1'b1 ? Delay3_reg[4] :
              Delay3_bypass_delay[4]);
  assign Delay3_out1[5] = (ENA == 1'b1 ? Delay3_reg[5] :
              Delay3_bypass_delay[5]);
  assign Delay3_bypass_delay_next[0] = Delay3_reg[0];
  assign Delay3_bypass_delay_next[1] = Delay3_reg[1];
  assign Delay3_bypass_delay_next[2] = Delay3_reg[2];
  assign Delay3_bypass_delay_next[3] = Delay3_reg[3];
  assign Delay3_bypass_delay_next[4] = Delay3_reg[4];
  assign Delay3_bypass_delay_next[5] = Delay3_reg[5];
  assign Delay3_reg_next[0] = Vector_Concatenate2_out1[0];
  assign Delay3_reg_next[1] = Vector_Concatenate2_out1[1];
  assign Delay3_reg_next[2] = Vector_Concatenate2_out1[2];
  assign Delay3_reg_next[3] = Vector_Concatenate2_out1[3];
  assign Delay3_reg_next[4] = Vector_Concatenate2_out1[4];
  assign Delay3_reg_next[5] = Vector_Concatenate2_out1[5];



  generate
    genvar k1;
    for(k1 = 0; k1 < 6; k1 = k1 + 1) begin : GEN_LABEL1
      For_Each_Subsystem1 u_For_Each_Subsystem1 (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .DATA_DELAY(Delay3_out1[k1]),  // ufix7
                                                 .DELAY_CAUNT(Constant11_out1[k1]),  // uint8
                                                 .ENA(ENA),
                                                 .COUNT(For_Each_Subsystem1_out1[k1])  // ufix7
                                                 );
    end
  endgenerate

  assign For_Each_Subsystem1_out1_0 = For_Each_Subsystem1_out1[0];

  assign Constant4_out1[0] = 8'b00111111;
  assign Constant4_out1[1] = 8'b00011111;
  assign Constant4_out1[2] = 8'b00001111;
  assign Constant4_out1[3] = 8'b00000111;
  assign Constant4_out1[4] = 8'b00000011;
  assign Constant4_out1[5] = 8'b00000001;



  assign Constant5_out1[0] = 8'b00000000;
  assign Constant5_out1[1] = 8'b00000001;
  assign Constant5_out1[2] = 8'b00000010;
  assign Constant5_out1[3] = 8'b00000011;
  assign Constant5_out1[4] = 8'b00000100;
  assign Constant5_out1[5] = 8'b00000101;



  assign REGA_im_1[0] = REGA_im[0];
  assign REGA_im_1[1] = REGA_im[1];
  assign REGA_im_1[2] = REGA_im[2];
  assign REGA_im_1[3] = REGA_im[3];
  assign REGA_im_1[4] = REGA_im[4];
  assign REGA_im_1[5] = REGA_im[5];

  assign Subsystem_out2_im[0] = Subsystem_out2_im_0;
  assign Subsystem_out2_im[1] = Subsystem_out2_im_1;
  assign Subsystem_out2_im[2] = Subsystem_out2_im_2;
  assign Subsystem_out2_im[3] = Subsystem_out2_im_3;
  assign Subsystem_out2_im[4] = Subsystem_out2_im_4;
  assign Subsystem_out2_im[5] = Subsystem_out2_im_5;

  assign Subsystem_out2_re[0] = Subsystem_out2_re_0;
  assign Subsystem_out2_re[1] = Subsystem_out2_re_1;
  assign Subsystem_out2_re[2] = Subsystem_out2_re_2;
  assign Subsystem_out2_re[3] = Subsystem_out2_re_3;
  assign Subsystem_out2_re[4] = Subsystem_out2_re_4;
  assign Subsystem_out2_re[5] = Subsystem_out2_re_5;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_bypass_delay_re[0] <= 16'sb0000000000000000;
        Delay1_bypass_delay_im[0] <= 16'sb0000000000000000;
        Delay1_bypass_delay_re[1] <= 16'sb0000000000000000;
        Delay1_bypass_delay_im[1] <= 16'sb0000000000000000;
        Delay1_bypass_delay_re[2] <= 16'sb0000000000000000;
        Delay1_bypass_delay_im[2] <= 16'sb0000000000000000;
        Delay1_bypass_delay_re[3] <= 16'sb0000000000000000;
        Delay1_bypass_delay_im[3] <= 16'sb0000000000000000;
        Delay1_bypass_delay_re[4] <= 16'sb0000000000000000;
        Delay1_bypass_delay_im[4] <= 16'sb0000000000000000;
        Delay1_bypass_delay_re[5] <= 16'sb0000000000000000;
        Delay1_bypass_delay_im[5] <= 16'sb0000000000000000;
        Delay1_reg_re[0] <= 16'sb0000000000000000;
        Delay1_reg_im[0] <= 16'sb0000000000000000;
        Delay1_reg_re[1] <= 16'sb0000000000000000;
        Delay1_reg_im[1] <= 16'sb0000000000000000;
        Delay1_reg_re[2] <= 16'sb0000000000000000;
        Delay1_reg_im[2] <= 16'sb0000000000000000;
        Delay1_reg_re[3] <= 16'sb0000000000000000;
        Delay1_reg_im[3] <= 16'sb0000000000000000;
        Delay1_reg_re[4] <= 16'sb0000000000000000;
        Delay1_reg_im[4] <= 16'sb0000000000000000;
        Delay1_reg_re[5] <= 16'sb0000000000000000;
        Delay1_reg_im[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay1_bypass_delay_re[0] <= Delay1_bypass_delay_next_re[0];
          Delay1_bypass_delay_im[0] <= Delay1_bypass_delay_next_im[0];
          Delay1_bypass_delay_re[1] <= Delay1_bypass_delay_next_re[1];
          Delay1_bypass_delay_im[1] <= Delay1_bypass_delay_next_im[1];
          Delay1_bypass_delay_re[2] <= Delay1_bypass_delay_next_re[2];
          Delay1_bypass_delay_im[2] <= Delay1_bypass_delay_next_im[2];
          Delay1_bypass_delay_re[3] <= Delay1_bypass_delay_next_re[3];
          Delay1_bypass_delay_im[3] <= Delay1_bypass_delay_next_im[3];
          Delay1_bypass_delay_re[4] <= Delay1_bypass_delay_next_re[4];
          Delay1_bypass_delay_im[4] <= Delay1_bypass_delay_next_im[4];
          Delay1_bypass_delay_re[5] <= Delay1_bypass_delay_next_re[5];
          Delay1_bypass_delay_im[5] <= Delay1_bypass_delay_next_im[5];
          Delay1_reg_re[0] <= Delay1_reg_next_re[0];
          Delay1_reg_im[0] <= Delay1_reg_next_im[0];
          Delay1_reg_re[1] <= Delay1_reg_next_re[1];
          Delay1_reg_im[1] <= Delay1_reg_next_im[1];
          Delay1_reg_re[2] <= Delay1_reg_next_re[2];
          Delay1_reg_im[2] <= Delay1_reg_next_im[2];
          Delay1_reg_re[3] <= Delay1_reg_next_re[3];
          Delay1_reg_im[3] <= Delay1_reg_next_im[3];
          Delay1_reg_re[4] <= Delay1_reg_next_re[4];
          Delay1_reg_im[4] <= Delay1_reg_next_im[4];
          Delay1_reg_re[5] <= Delay1_reg_next_re[5];
          Delay1_reg_im[5] <= Delay1_reg_next_im[5];
        end
      end
    end

  assign Delay1_out1_re[0] = (ENA == 1'b1 ? Delay1_reg_re[0] :
              Delay1_bypass_delay_re[0]);
  assign Delay1_out1_re[1] = (ENA == 1'b1 ? Delay1_reg_re[1] :
              Delay1_bypass_delay_re[1]);
  assign Delay1_out1_re[2] = (ENA == 1'b1 ? Delay1_reg_re[2] :
              Delay1_bypass_delay_re[2]);
  assign Delay1_out1_re[3] = (ENA == 1'b1 ? Delay1_reg_re[3] :
              Delay1_bypass_delay_re[3]);
  assign Delay1_out1_re[4] = (ENA == 1'b1 ? Delay1_reg_re[4] :
              Delay1_bypass_delay_re[4]);
  assign Delay1_out1_re[5] = (ENA == 1'b1 ? Delay1_reg_re[5] :
              Delay1_bypass_delay_re[5]);
  assign Delay1_out1_im[0] = (ENA == 1'b1 ? Delay1_reg_im[0] :
              Delay1_bypass_delay_im[0]);
  assign Delay1_out1_im[1] = (ENA == 1'b1 ? Delay1_reg_im[1] :
              Delay1_bypass_delay_im[1]);
  assign Delay1_out1_im[2] = (ENA == 1'b1 ? Delay1_reg_im[2] :
              Delay1_bypass_delay_im[2]);
  assign Delay1_out1_im[3] = (ENA == 1'b1 ? Delay1_reg_im[3] :
              Delay1_bypass_delay_im[3]);
  assign Delay1_out1_im[4] = (ENA == 1'b1 ? Delay1_reg_im[4] :
              Delay1_bypass_delay_im[4]);
  assign Delay1_out1_im[5] = (ENA == 1'b1 ? Delay1_reg_im[5] :
              Delay1_bypass_delay_im[5]);
  assign Delay1_bypass_delay_next_re[0] = Delay1_reg_re[0];
  assign Delay1_bypass_delay_next_im[0] = Delay1_reg_im[0];
  assign Delay1_bypass_delay_next_re[1] = Delay1_reg_re[1];
  assign Delay1_bypass_delay_next_im[1] = Delay1_reg_im[1];
  assign Delay1_bypass_delay_next_re[2] = Delay1_reg_re[2];
  assign Delay1_bypass_delay_next_im[2] = Delay1_reg_im[2];
  assign Delay1_bypass_delay_next_re[3] = Delay1_reg_re[3];
  assign Delay1_bypass_delay_next_im[3] = Delay1_reg_im[3];
  assign Delay1_bypass_delay_next_re[4] = Delay1_reg_re[4];
  assign Delay1_bypass_delay_next_im[4] = Delay1_reg_im[4];
  assign Delay1_bypass_delay_next_re[5] = Delay1_reg_re[5];
  assign Delay1_bypass_delay_next_im[5] = Delay1_reg_im[5];
  assign Delay1_reg_next_re[0] = Subsystem_out2_re[0];
  assign Delay1_reg_next_im[0] = Subsystem_out2_im[0];
  assign Delay1_reg_next_re[1] = Subsystem_out2_re[1];
  assign Delay1_reg_next_im[1] = Subsystem_out2_im[1];
  assign Delay1_reg_next_re[2] = Subsystem_out2_re[2];
  assign Delay1_reg_next_im[2] = Subsystem_out2_im[2];
  assign Delay1_reg_next_re[3] = Subsystem_out2_re[3];
  assign Delay1_reg_next_im[3] = Subsystem_out2_im[3];
  assign Delay1_reg_next_re[4] = Subsystem_out2_re[4];
  assign Delay1_reg_next_im[4] = Subsystem_out2_im[4];
  assign Delay1_reg_next_re[5] = Subsystem_out2_re[5];
  assign Delay1_reg_next_im[5] = Subsystem_out2_im[5];



  assign Subsystem_out1_im[0] = Subsystem_out1_im_0;
  assign Subsystem_out1_im[1] = Subsystem_out1_im_1;
  assign Subsystem_out1_im[2] = Subsystem_out1_im_2;
  assign Subsystem_out1_im[3] = Subsystem_out1_im_3;
  assign Subsystem_out1_im[4] = Subsystem_out1_im_4;
  assign Subsystem_out1_im[5] = Subsystem_out1_im_5;

  Subsystem u_Subsystem (.clk(clk),
                         .reset(reset),
                         .enb(enb),
                         .DATA_A_re_0(Delay_out1_re),  // int16
                         .DATA_A_re_1(Delay2_out1_re[0]),  // int16
                         .DATA_A_re_2(Delay2_out1_re[1]),  // int16
                         .DATA_A_re_3(Delay2_out1_re[2]),  // int16
                         .DATA_A_re_4(Delay2_out1_re[3]),  // int16
                         .DATA_A_re_5(Delay2_out1_re[4]),  // int16
                         .DATA_A_im_0(Delay_out1_im),  // int16
                         .DATA_A_im_1(Delay2_out1_im[0]),  // int16
                         .DATA_A_im_2(Delay2_out1_im[1]),  // int16
                         .DATA_A_im_3(Delay2_out1_im[2]),  // int16
                         .DATA_A_im_4(Delay2_out1_im[3]),  // int16
                         .DATA_A_im_5(Delay2_out1_im[4]),  // int16
                         .DATA_B_re_0(Switch1_out1_re),  // int16
                         .DATA_B_re_1(For_Each_Subsystem_out2_re[0]),  // int16
                         .DATA_B_re_2(For_Each_Subsystem_out2_re[1]),  // int16
                         .DATA_B_re_3(For_Each_Subsystem_out2_re[2]),  // int16
                         .DATA_B_re_4(For_Each_Subsystem_out2_re[3]),  // int16
                         .DATA_B_re_5(For_Each_Subsystem_out2_re[4]),  // int16
                         .DATA_B_im_0(Switch1_out1_im),  // int16
                         .DATA_B_im_1(For_Each_Subsystem_out2_im[0]),  // int16
                         .DATA_B_im_2(For_Each_Subsystem_out2_im[1]),  // int16
                         .DATA_B_im_3(For_Each_Subsystem_out2_im[2]),  // int16
                         .DATA_B_im_4(For_Each_Subsystem_out2_im[3]),  // int16
                         .DATA_B_im_5(For_Each_Subsystem_out2_im[4]),  // int16
                         .COUNT_0(For_Each_Subsystem1_out1_0),  // ufix7
                         .COUNT_1(For_Each_Subsystem1_out1_1),  // ufix7
                         .COUNT_2(For_Each_Subsystem1_out1_2),  // ufix7
                         .COUNT_3(For_Each_Subsystem1_out1_3),  // ufix7
                         .COUNT_4(For_Each_Subsystem1_out1_4),  // ufix7
                         .COUNT_5(For_Each_Subsystem1_out1_5),  // ufix7
                         .ENA(ENA),
                         .OUT_A_re_0(Subsystem_out1_re_0),  // int16
                         .OUT_A_re_1(Subsystem_out1_re_1),  // int16
                         .OUT_A_re_2(Subsystem_out1_re_2),  // int16
                         .OUT_A_re_3(Subsystem_out1_re_3),  // int16
                         .OUT_A_re_4(Subsystem_out1_re_4),  // int16
                         .OUT_A_re_5(Subsystem_out1_re_5),  // int16
                         .OUT_A_im_0(Subsystem_out1_im_0),  // int16
                         .OUT_A_im_1(Subsystem_out1_im_1),  // int16
                         .OUT_A_im_2(Subsystem_out1_im_2),  // int16
                         .OUT_A_im_3(Subsystem_out1_im_3),  // int16
                         .OUT_A_im_4(Subsystem_out1_im_4),  // int16
                         .OUT_A_im_5(Subsystem_out1_im_5),  // int16
                         .OUT_B_re_0(Subsystem_out2_re_0),  // int16
                         .OUT_B_re_1(Subsystem_out2_re_1),  // int16
                         .OUT_B_re_2(Subsystem_out2_re_2),  // int16
                         .OUT_B_re_3(Subsystem_out2_re_3),  // int16
                         .OUT_B_re_4(Subsystem_out2_re_4),  // int16
                         .OUT_B_re_5(Subsystem_out2_re_5),  // int16
                         .OUT_B_im_0(Subsystem_out2_im_0),  // int16
                         .OUT_B_im_1(Subsystem_out2_im_1),  // int16
                         .OUT_B_im_2(Subsystem_out2_im_2),  // int16
                         .OUT_B_im_3(Subsystem_out2_im_3),  // int16
                         .OUT_B_im_4(Subsystem_out2_im_4),  // int16
                         .OUT_B_im_5(Subsystem_out2_im_5)  // int16
                         );

  assign Subsystem_out1_re[0] = Subsystem_out1_re_0;
  assign Subsystem_out1_re[1] = Subsystem_out1_re_1;
  assign Subsystem_out1_re[2] = Subsystem_out1_re_2;
  assign Subsystem_out1_re[3] = Subsystem_out1_re_3;
  assign Subsystem_out1_re[4] = Subsystem_out1_re_4;
  assign Subsystem_out1_re[5] = Subsystem_out1_re_5;

  generate
    genvar k;
    for(k = 0; k < 6; k = k + 1) begin : GEN_LABEL
      For_Each_Subsystem u_For_Each_Subsystem (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .DATA_A_re(Subsystem_out1_re[k]),  // int16
                                               .DATA_A_im(Subsystem_out1_im[k]),  // int16
                                               .DELAY(Constant4_out1[k]),  // uint8
                                               .DATA_B_re(Delay1_out1_re[k]),  // int16
                                               .DATA_B_im(Delay1_out1_im[k]),  // int16
                                               .COUNT(Delay4_out1[k]),  // ufix7
                                               .ENA(ENA),
                                               .N(Constant5_out1[k]),  // uint8
                                               .Out1_re(REGA_re[k]),  // int16
                                               .Out1_im(REGA_im[k]),  // int16
                                               .Out2_re(For_Each_Subsystem_out2_re[k]),  // int16
                                               .Out2_im(For_Each_Subsystem_out2_im[k])  // int16
                                               );
    end
  endgenerate

  assign REGA_re_1[0] = REGA_re[0];
  assign REGA_re_1[1] = REGA_re[1];
  assign REGA_re_1[2] = REGA_re[2];
  assign REGA_re_1[3] = REGA_re[3];
  assign REGA_re_1[4] = REGA_re[4];
  assign REGA_re_1[5] = REGA_re[5];

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_bypass_delay_re[0] <= 16'sb0000000000000000;
        Delay2_bypass_delay_im[0] <= 16'sb0000000000000000;
        Delay2_bypass_delay_re[1] <= 16'sb0000000000000000;
        Delay2_bypass_delay_im[1] <= 16'sb0000000000000000;
        Delay2_bypass_delay_re[2] <= 16'sb0000000000000000;
        Delay2_bypass_delay_im[2] <= 16'sb0000000000000000;
        Delay2_bypass_delay_re[3] <= 16'sb0000000000000000;
        Delay2_bypass_delay_im[3] <= 16'sb0000000000000000;
        Delay2_bypass_delay_re[4] <= 16'sb0000000000000000;
        Delay2_bypass_delay_im[4] <= 16'sb0000000000000000;
        Delay2_bypass_delay_re[5] <= 16'sb0000000000000000;
        Delay2_bypass_delay_im[5] <= 16'sb0000000000000000;
        Delay2_reg_re[0] <= 16'sb0000000000000000;
        Delay2_reg_im[0] <= 16'sb0000000000000000;
        Delay2_reg_re[1] <= 16'sb0000000000000000;
        Delay2_reg_im[1] <= 16'sb0000000000000000;
        Delay2_reg_re[2] <= 16'sb0000000000000000;
        Delay2_reg_im[2] <= 16'sb0000000000000000;
        Delay2_reg_re[3] <= 16'sb0000000000000000;
        Delay2_reg_im[3] <= 16'sb0000000000000000;
        Delay2_reg_re[4] <= 16'sb0000000000000000;
        Delay2_reg_im[4] <= 16'sb0000000000000000;
        Delay2_reg_re[5] <= 16'sb0000000000000000;
        Delay2_reg_im[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay2_bypass_delay_re[0] <= Delay2_bypass_delay_next_re[0];
          Delay2_bypass_delay_im[0] <= Delay2_bypass_delay_next_im[0];
          Delay2_bypass_delay_re[1] <= Delay2_bypass_delay_next_re[1];
          Delay2_bypass_delay_im[1] <= Delay2_bypass_delay_next_im[1];
          Delay2_bypass_delay_re[2] <= Delay2_bypass_delay_next_re[2];
          Delay2_bypass_delay_im[2] <= Delay2_bypass_delay_next_im[2];
          Delay2_bypass_delay_re[3] <= Delay2_bypass_delay_next_re[3];
          Delay2_bypass_delay_im[3] <= Delay2_bypass_delay_next_im[3];
          Delay2_bypass_delay_re[4] <= Delay2_bypass_delay_next_re[4];
          Delay2_bypass_delay_im[4] <= Delay2_bypass_delay_next_im[4];
          Delay2_bypass_delay_re[5] <= Delay2_bypass_delay_next_re[5];
          Delay2_bypass_delay_im[5] <= Delay2_bypass_delay_next_im[5];
          Delay2_reg_re[0] <= Delay2_reg_next_re[0];
          Delay2_reg_im[0] <= Delay2_reg_next_im[0];
          Delay2_reg_re[1] <= Delay2_reg_next_re[1];
          Delay2_reg_im[1] <= Delay2_reg_next_im[1];
          Delay2_reg_re[2] <= Delay2_reg_next_re[2];
          Delay2_reg_im[2] <= Delay2_reg_next_im[2];
          Delay2_reg_re[3] <= Delay2_reg_next_re[3];
          Delay2_reg_im[3] <= Delay2_reg_next_im[3];
          Delay2_reg_re[4] <= Delay2_reg_next_re[4];
          Delay2_reg_im[4] <= Delay2_reg_next_im[4];
          Delay2_reg_re[5] <= Delay2_reg_next_re[5];
          Delay2_reg_im[5] <= Delay2_reg_next_im[5];
        end
      end
    end

  assign Delay2_out1_re[0] = (ENA == 1'b1 ? Delay2_reg_re[0] :
              Delay2_bypass_delay_re[0]);
  assign Delay2_out1_re[1] = (ENA == 1'b1 ? Delay2_reg_re[1] :
              Delay2_bypass_delay_re[1]);
  assign Delay2_out1_re[2] = (ENA == 1'b1 ? Delay2_reg_re[2] :
              Delay2_bypass_delay_re[2]);
  assign Delay2_out1_re[3] = (ENA == 1'b1 ? Delay2_reg_re[3] :
              Delay2_bypass_delay_re[3]);
  assign Delay2_out1_re[4] = (ENA == 1'b1 ? Delay2_reg_re[4] :
              Delay2_bypass_delay_re[4]);
  assign Delay2_out1_re[5] = (ENA == 1'b1 ? Delay2_reg_re[5] :
              Delay2_bypass_delay_re[5]);
  assign Delay2_out1_im[0] = (ENA == 1'b1 ? Delay2_reg_im[0] :
              Delay2_bypass_delay_im[0]);
  assign Delay2_out1_im[1] = (ENA == 1'b1 ? Delay2_reg_im[1] :
              Delay2_bypass_delay_im[1]);
  assign Delay2_out1_im[2] = (ENA == 1'b1 ? Delay2_reg_im[2] :
              Delay2_bypass_delay_im[2]);
  assign Delay2_out1_im[3] = (ENA == 1'b1 ? Delay2_reg_im[3] :
              Delay2_bypass_delay_im[3]);
  assign Delay2_out1_im[4] = (ENA == 1'b1 ? Delay2_reg_im[4] :
              Delay2_bypass_delay_im[4]);
  assign Delay2_out1_im[5] = (ENA == 1'b1 ? Delay2_reg_im[5] :
              Delay2_bypass_delay_im[5]);
  assign Delay2_bypass_delay_next_re[0] = Delay2_reg_re[0];
  assign Delay2_bypass_delay_next_im[0] = Delay2_reg_im[0];
  assign Delay2_bypass_delay_next_re[1] = Delay2_reg_re[1];
  assign Delay2_bypass_delay_next_im[1] = Delay2_reg_im[1];
  assign Delay2_bypass_delay_next_re[2] = Delay2_reg_re[2];
  assign Delay2_bypass_delay_next_im[2] = Delay2_reg_im[2];
  assign Delay2_bypass_delay_next_re[3] = Delay2_reg_re[3];
  assign Delay2_bypass_delay_next_im[3] = Delay2_reg_im[3];
  assign Delay2_bypass_delay_next_re[4] = Delay2_reg_re[4];
  assign Delay2_bypass_delay_next_im[4] = Delay2_reg_im[4];
  assign Delay2_bypass_delay_next_re[5] = Delay2_reg_re[5];
  assign Delay2_bypass_delay_next_im[5] = Delay2_reg_im[5];
  assign Delay2_reg_next_re[0] = REGA_re_1[0];
  assign Delay2_reg_next_im[0] = REGA_im_1[0];
  assign Delay2_reg_next_re[1] = REGA_re_1[1];
  assign Delay2_reg_next_im[1] = REGA_im_1[1];
  assign Delay2_reg_next_re[2] = REGA_re_1[2];
  assign Delay2_reg_next_im[2] = REGA_im_1[2];
  assign Delay2_reg_next_re[3] = REGA_re_1[3];
  assign Delay2_reg_next_im[3] = REGA_im_1[3];
  assign Delay2_reg_next_re[4] = REGA_re_1[4];
  assign Delay2_reg_next_im[4] = REGA_im_1[4];
  assign Delay2_reg_next_re[5] = REGA_re_1[5];
  assign Delay2_reg_next_im[5] = REGA_im_1[5];



  Subsystem1 u_Subsystem1 (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .DATA_A_re(Delay2_out1_re[5]),  // int16
                           .DATA_A_im(Delay2_out1_im[5]),  // int16
                           .DATA_B_re(For_Each_Subsystem_out2_re[5]),  // int16
                           .DATA_B_im(For_Each_Subsystem_out2_im[5]),  // int16
                           .COUNT(Delay4_out1[5]),  // ufix7
                           .ENA(ENA),
                           .Out1_re(Subsystem1_out1_re),  // int16
                           .Out1_im(Subsystem1_out1_im),  // int16
                           .Out2_re(Subsystem1_out2_re),  // int16
                           .Out2_im(Subsystem1_out2_im)  // int16
                           );

  assign Out3_re = Subsystem1_out1_re;

  assign Out3_im = Subsystem1_out1_im;

  assign Out4_re = Subsystem1_out2_re;

  assign Out4_im = Subsystem1_out2_im;

  assign Constant7_out1 = 8'b00000101;



  assign Relational_Operator_relop1 = HDL_Counter2_out1 >= Constant7_out1;



  assign Constant6_out1 = 8'b10000100;



  assign Relational_Operator1_relop1 = HDL_Counter2_out1 <= Constant6_out1;



  assign Constant12_out1 = 8'b11111101;



  assign Relational_Operator2_relop1 = HDL_Counter2_out1 >= Constant12_out1;



  assign Constant10_out1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_bypass <= 1'b0;
        Delay5_reg <= 1'b0;
      end
      else begin
        if (enb_const_rate) begin
          if (Relational_Operator2_relop1) begin
            if (rst == 1'b1) begin
              Delay5_bypass <= 1'b0;
              Delay5_reg <= 1'b0;
            end
            else begin
              Delay5_bypass <= Delay5_bypass_next;
              Delay5_reg <= Constant10_out1;
            end
          end
        end
      end
    end

  assign Delay5_delay_out = (rst == 1'b1 ? 1'b0 :
              Delay5_reg);
  assign valid = (Relational_Operator2_relop1 == 1'b1 ? Delay5_delay_out :
              Delay5_bypass);
  assign Delay5_bypass_next = Delay5_delay_out;



  assign valid_1 = valid & (Relational_Operator_relop1 & Relational_Operator1_relop1);



  assign valid1 = valid_1;

endmodule  // Subsystem2

