// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_new\Subsystem.v
// Created: 2025-06-03 14:06:56
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: fft_new/Subsystem2/Subsystem
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           enb,
           DATA_A_re_0,
           DATA_A_re_1,
           DATA_A_re_2,
           DATA_A_re_3,
           DATA_A_re_4,
           DATA_A_re_5,
           DATA_A_im_0,
           DATA_A_im_1,
           DATA_A_im_2,
           DATA_A_im_3,
           DATA_A_im_4,
           DATA_A_im_5,
           DATA_B_re_0,
           DATA_B_re_1,
           DATA_B_re_2,
           DATA_B_re_3,
           DATA_B_re_4,
           DATA_B_re_5,
           DATA_B_im_0,
           DATA_B_im_1,
           DATA_B_im_2,
           DATA_B_im_3,
           DATA_B_im_4,
           DATA_B_im_5,
           COUNT_0,
           COUNT_1,
           COUNT_2,
           COUNT_3,
           COUNT_4,
           COUNT_5,
           ENA,
           OUT_A_re_0,
           OUT_A_re_1,
           OUT_A_re_2,
           OUT_A_re_3,
           OUT_A_re_4,
           OUT_A_re_5,
           OUT_A_im_0,
           OUT_A_im_1,
           OUT_A_im_2,
           OUT_A_im_3,
           OUT_A_im_4,
           OUT_A_im_5,
           OUT_B_re_0,
           OUT_B_re_1,
           OUT_B_re_2,
           OUT_B_re_3,
           OUT_B_re_4,
           OUT_B_re_5,
           OUT_B_im_0,
           OUT_B_im_1,
           OUT_B_im_2,
           OUT_B_im_3,
           OUT_B_im_4,
           OUT_B_im_5);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] DATA_A_re_0;  // int16
  input   signed [15:0] DATA_A_re_1;  // int16
  input   signed [15:0] DATA_A_re_2;  // int16
  input   signed [15:0] DATA_A_re_3;  // int16
  input   signed [15:0] DATA_A_re_4;  // int16
  input   signed [15:0] DATA_A_re_5;  // int16
  input   signed [15:0] DATA_A_im_0;  // int16
  input   signed [15:0] DATA_A_im_1;  // int16
  input   signed [15:0] DATA_A_im_2;  // int16
  input   signed [15:0] DATA_A_im_3;  // int16
  input   signed [15:0] DATA_A_im_4;  // int16
  input   signed [15:0] DATA_A_im_5;  // int16
  input   signed [15:0] DATA_B_re_0;  // int16
  input   signed [15:0] DATA_B_re_1;  // int16
  input   signed [15:0] DATA_B_re_2;  // int16
  input   signed [15:0] DATA_B_re_3;  // int16
  input   signed [15:0] DATA_B_re_4;  // int16
  input   signed [15:0] DATA_B_re_5;  // int16
  input   signed [15:0] DATA_B_im_0;  // int16
  input   signed [15:0] DATA_B_im_1;  // int16
  input   signed [15:0] DATA_B_im_2;  // int16
  input   signed [15:0] DATA_B_im_3;  // int16
  input   signed [15:0] DATA_B_im_4;  // int16
  input   signed [15:0] DATA_B_im_5;  // int16
  input   [6:0] COUNT_0;  // ufix7
  input   [6:0] COUNT_1;  // ufix7
  input   [6:0] COUNT_2;  // ufix7
  input   [6:0] COUNT_3;  // ufix7
  input   [6:0] COUNT_4;  // ufix7
  input   [6:0] COUNT_5;  // ufix7
  input   ENA;
  output  signed [15:0] OUT_A_re_0;  // int16
  output  signed [15:0] OUT_A_re_1;  // int16
  output  signed [15:0] OUT_A_re_2;  // int16
  output  signed [15:0] OUT_A_re_3;  // int16
  output  signed [15:0] OUT_A_re_4;  // int16
  output  signed [15:0] OUT_A_re_5;  // int16
  output  signed [15:0] OUT_A_im_0;  // int16
  output  signed [15:0] OUT_A_im_1;  // int16
  output  signed [15:0] OUT_A_im_2;  // int16
  output  signed [15:0] OUT_A_im_3;  // int16
  output  signed [15:0] OUT_A_im_4;  // int16
  output  signed [15:0] OUT_A_im_5;  // int16
  output  signed [15:0] OUT_B_re_0;  // int16
  output  signed [15:0] OUT_B_re_1;  // int16
  output  signed [15:0] OUT_B_re_2;  // int16
  output  signed [15:0] OUT_B_re_3;  // int16
  output  signed [15:0] OUT_B_re_4;  // int16
  output  signed [15:0] OUT_B_re_5;  // int16
  output  signed [15:0] OUT_B_im_0;  // int16
  output  signed [15:0] OUT_B_im_1;  // int16
  output  signed [15:0] OUT_B_im_2;  // int16
  output  signed [15:0] OUT_B_im_3;  // int16
  output  signed [15:0] OUT_B_im_4;  // int16
  output  signed [15:0] OUT_B_im_5;  // int16


  wire signed [15:0] DATA_A_re [0:5];  // int16 [6]
  wire signed [15:0] DATA_A_im [0:5];  // int16 [6]
  wire signed [15:0] DATA_B_re [0:5];  // int16 [6]
  wire signed [15:0] DATA_B_im [0:5];  // int16 [6]
  wire signed [16:0] Sum_1;  // sfix17
  wire signed [16:0] Sum_2;  // sfix17
  wire signed [16:0] Sum_3;  // sfix17
  wire signed [16:0] Sum_4;  // sfix17
  wire signed [16:0] Sum_5;  // sfix17
  wire signed [16:0] Sum_6;  // sfix17
  wire signed [16:0] Sum_7;  // sfix17
  wire signed [16:0] Sum_8;  // sfix17
  wire signed [16:0] Sum_9;  // sfix17
  wire signed [16:0] Sum_10;  // sfix17
  wire signed [16:0] Sum_11;  // sfix17
  wire signed [16:0] Sum_12;  // sfix17
  wire signed [16:0] Sum_13;  // sfix17
  wire signed [16:0] Sum_14;  // sfix17
  wire signed [16:0] Sum_15;  // sfix17
  wire signed [16:0] Sum_16;  // sfix17
  wire signed [16:0] Sum_17;  // sfix17
  wire signed [16:0] Sum_18;  // sfix17
  wire signed [16:0] Sum_19;  // sfix17
  wire signed [16:0] Sum_20;  // sfix17
  wire signed [16:0] Sum_21;  // sfix17
  wire signed [16:0] Sum_22;  // sfix17
  wire signed [16:0] Sum_23;  // sfix17
  wire signed [16:0] Sum_24;  // sfix17
  wire signed [16:0] Sum_out1_re [0:5];  // sfix17 [6]
  wire signed [16:0] Sum_out1_im [0:5];  // sfix17 [6]
  reg signed [16:0] Delay3_bypass_delay_re [0:5];  // sfix17 [6]
  reg signed [16:0] Delay3_bypass_delay_im [0:5];  // sfix17 [6]
  reg signed [16:0] Delay3_reg_re [0:5];  // sfix17 [6]
  reg signed [16:0] Delay3_reg_im [0:5];  // sfix17 [6]
  wire signed [16:0] Delay3_bypass_delay_next_re [0:5];  // sfix17 [6]
  wire signed [16:0] Delay3_bypass_delay_next_im [0:5];  // sfix17 [6]
  wire signed [16:0] Delay3_reg_next_re [0:5];  // sfix17 [6]
  wire signed [16:0] Delay3_reg_next_im [0:5];  // sfix17 [6]
  wire signed [16:0] DATA_A_re_6 [0:5];  // sfix17 [6]
  wire signed [16:0] DATA_A_im_6 [0:5];  // sfix17 [6]
  wire signed [15:0] Data_Type_Conversion3_out1_re [0:5];  // int16 [6]
  wire signed [15:0] Data_Type_Conversion3_out1_im [0:5];  // int16 [6]
  wire signed [16:0] Sum1_1;  // sfix17
  wire signed [16:0] Sum1_2;  // sfix17
  wire signed [16:0] Sum1_3;  // sfix17
  wire signed [16:0] Sum1_4;  // sfix17
  wire signed [16:0] Sum1_5;  // sfix17
  wire signed [16:0] Sum1_6;  // sfix17
  wire signed [16:0] Sum1_7;  // sfix17
  wire signed [16:0] Sum1_8;  // sfix17
  wire signed [16:0] Sum1_9;  // sfix17
  wire signed [16:0] Sum1_10;  // sfix17
  wire signed [16:0] Sum1_11;  // sfix17
  wire signed [16:0] Sum1_12;  // sfix17
  wire signed [16:0] Sum1_13;  // sfix17
  wire signed [16:0] Sum1_14;  // sfix17
  wire signed [16:0] Sum1_15;  // sfix17
  wire signed [16:0] Sum1_16;  // sfix17
  wire signed [16:0] Sum1_17;  // sfix17
  wire signed [16:0] Sum1_18;  // sfix17
  wire signed [16:0] Sum1_19;  // sfix17
  wire signed [16:0] Sum1_20;  // sfix17
  wire signed [16:0] Sum1_21;  // sfix17
  wire signed [16:0] Sum1_22;  // sfix17
  wire signed [16:0] Sum1_23;  // sfix17
  wire signed [16:0] Sum1_24;  // sfix17
  wire signed [16:0] Sum1_out1_re [0:5];  // sfix17 [6]
  wire signed [16:0] Sum1_out1_im [0:5];  // sfix17 [6]
  reg signed [16:0] Delay1_bypass_delay_re [0:5];  // sfix17 [6]
  reg signed [16:0] Delay1_bypass_delay_im [0:5];  // sfix17 [6]
  reg signed [16:0] Delay1_reg_re [0:5];  // sfix17 [6]
  reg signed [16:0] Delay1_reg_im [0:5];  // sfix17 [6]
  wire signed [16:0] Delay1_bypass_delay_next_re [0:5];  // sfix17 [6]
  wire signed [16:0] Delay1_bypass_delay_next_im [0:5];  // sfix17 [6]
  wire signed [16:0] Delay1_reg_next_re [0:5];  // sfix17 [6]
  wire signed [16:0] Delay1_reg_next_im [0:5];  // sfix17 [6]
  wire signed [16:0] DATA_B_re_6 [0:5];  // sfix17 [6]
  wire signed [16:0] DATA_B_im_6 [0:5];  // sfix17 [6]
  wire signed [15:0] Data_Type_Conversion4_out1_re [0:5];  // int16 [6]
  wire signed [15:0] Data_Type_Conversion4_out1_im [0:5];  // int16 [6]
  wire [6:0] COUNT [0:5];  // ufix7 [6]
  wire [6:0] bitMask_for_Bitwise_Operator [0:5];  // ufix7 [6]
  wire [6:0] Bitwise_Operator_out1 [0:5];  // ufix7 [6]
  wire [7:0] Constant2_out1 [0:5];  // uint8 [6]
  wire [8:0] Sum3_1;  // ufix9
  wire [8:0] Sum3_2;  // ufix9
  wire [8:0] Sum3_3;  // ufix9
  wire [8:0] Sum3_4;  // ufix9
  wire [8:0] Sum3_5;  // ufix9
  wire [8:0] Sum3_6;  // ufix9
  wire [8:0] Sum3_7;  // ufix9
  wire [8:0] Sum3_8;  // ufix9
  wire [8:0] Sum3_9;  // ufix9
  wire [8:0] Sum3_10;  // ufix9
  wire [8:0] Sum3_11;  // ufix9
  wire [8:0] Sum3_12;  // ufix9
  wire [8:0] addr [0:5];  // ufix9 [6]
  wire signed [15:0] Constant6_out1_re [0:251];  // sfix16_En14 [252]
  wire signed [15:0] Constant6_out1_im [0:251];  // sfix16_En14 [252]
  wire signed [15:0] y_re_0;  // sfix16_En14
  wire signed [15:0] y_re_1;  // sfix16_En14
  wire signed [15:0] y_re_2;  // sfix16_En14
  wire signed [15:0] y_re_3;  // sfix16_En14
  wire signed [15:0] y_re_4;  // sfix16_En14
  wire signed [15:0] y_re_5;  // sfix16_En14
  wire signed [15:0] y_im_0;  // sfix16_En14
  wire signed [15:0] y_im_1;  // sfix16_En14
  wire signed [15:0] y_im_2;  // sfix16_En14
  wire signed [15:0] y_im_3;  // sfix16_En14
  wire signed [15:0] y_im_4;  // sfix16_En14
  wire signed [15:0] y_im_5;  // sfix16_En14
  wire signed [15:0] y_re [0:5];  // sfix16_En14 [6]
  wire signed [15:0] y_im [0:5];  // sfix16_En14 [6]
  reg signed [15:0] Delay4_bypass_delay_re [0:5];  // sfix16_En14 [6]
  reg signed [15:0] Delay4_bypass_delay_im [0:5];  // sfix16_En14 [6]
  reg signed [15:0] Delay4_reg_re [0:5];  // sfix16_En14 [6]
  reg signed [15:0] Delay4_reg_im [0:5];  // sfix16_En14 [6]
  wire signed [15:0] Delay4_bypass_delay_next_re [0:5];  // sfix16_En14 [6]
  wire signed [15:0] Delay4_bypass_delay_next_im [0:5];  // sfix16_En14 [6]
  wire signed [15:0] Delay4_reg_next_re [0:5];  // sfix16_En14 [6]
  wire signed [15:0] Delay4_reg_next_im [0:5];  // sfix16_En14 [6]
  wire signed [15:0] MUX_re [0:5];  // sfix16_En14 [6]
  wire signed [15:0] MUX_im [0:5];  // sfix16_En14 [6]
  wire signed [31:0] Product_mul_temp;  // sfix32_En14
  wire signed [32:0] Product_sub_cast;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_1;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_1;  // sfix33_En14
  wire signed [32:0] Product_sub_temp;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_2;  // sfix32_En14
  wire signed [32:0] Product_add_cast;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_3;  // sfix32_En14
  wire signed [32:0] Product_add_cast_1;  // sfix33_En14
  wire signed [32:0] Product_add_temp;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_4;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_2;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_5;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_3;  // sfix33_En14
  wire signed [32:0] Product_sub_temp_1;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_6;  // sfix32_En14
  wire signed [32:0] Product_add_cast_2;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_7;  // sfix32_En14
  wire signed [32:0] Product_add_cast_3;  // sfix33_En14
  wire signed [32:0] Product_add_temp_1;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_8;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_4;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_9;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_5;  // sfix33_En14
  wire signed [32:0] Product_sub_temp_2;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_10;  // sfix32_En14
  wire signed [32:0] Product_add_cast_4;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_11;  // sfix32_En14
  wire signed [32:0] Product_add_cast_5;  // sfix33_En14
  wire signed [32:0] Product_add_temp_2;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_12;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_6;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_13;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_7;  // sfix33_En14
  wire signed [32:0] Product_sub_temp_3;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_14;  // sfix32_En14
  wire signed [32:0] Product_add_cast_6;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_15;  // sfix32_En14
  wire signed [32:0] Product_add_cast_7;  // sfix33_En14
  wire signed [32:0] Product_add_temp_3;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_16;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_8;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_17;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_9;  // sfix33_En14
  wire signed [32:0] Product_sub_temp_4;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_18;  // sfix32_En14
  wire signed [32:0] Product_add_cast_8;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_19;  // sfix32_En14
  wire signed [32:0] Product_add_cast_9;  // sfix33_En14
  wire signed [32:0] Product_add_temp_4;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_20;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_10;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_21;  // sfix32_En14
  wire signed [32:0] Product_sub_cast_11;  // sfix33_En14
  wire signed [32:0] Product_sub_temp_5;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_22;  // sfix32_En14
  wire signed [32:0] Product_add_cast_10;  // sfix33_En14
  wire signed [31:0] Product_mul_temp_23;  // sfix32_En14
  wire signed [32:0] Product_add_cast_11;  // sfix33_En14
  wire signed [32:0] Product_add_temp_5;  // sfix33_En14
  wire signed [31:0] Product_out1_re [0:5];  // sfix32_En14 [6]
  wire signed [31:0] Product_out1_im [0:5];  // sfix32_En14 [6]
  wire signed [15:0] Data_Type_Conversion1_out1_re [0:5];  // int16 [6]
  wire signed [15:0] Data_Type_Conversion1_out1_im [0:5];  // int16 [6]


  assign DATA_A_re[0] = DATA_A_re_0;
  assign DATA_A_re[1] = DATA_A_re_1;
  assign DATA_A_re[2] = DATA_A_re_2;
  assign DATA_A_re[3] = DATA_A_re_3;
  assign DATA_A_re[4] = DATA_A_re_4;
  assign DATA_A_re[5] = DATA_A_re_5;

  assign DATA_A_im[0] = DATA_A_im_0;
  assign DATA_A_im[1] = DATA_A_im_1;
  assign DATA_A_im[2] = DATA_A_im_2;
  assign DATA_A_im[3] = DATA_A_im_3;
  assign DATA_A_im[4] = DATA_A_im_4;
  assign DATA_A_im[5] = DATA_A_im_5;

  assign DATA_B_re[0] = DATA_B_re_0;
  assign DATA_B_re[1] = DATA_B_re_1;
  assign DATA_B_re[2] = DATA_B_re_2;
  assign DATA_B_re[3] = DATA_B_re_3;
  assign DATA_B_re[4] = DATA_B_re_4;
  assign DATA_B_re[5] = DATA_B_re_5;

  assign DATA_B_im[0] = DATA_B_im_0;
  assign DATA_B_im[1] = DATA_B_im_1;
  assign DATA_B_im[2] = DATA_B_im_2;
  assign DATA_B_im[3] = DATA_B_im_3;
  assign DATA_B_im[4] = DATA_B_im_4;
  assign DATA_B_im[5] = DATA_B_im_5;

  assign Sum_13 = {DATA_A_re[0][15], DATA_A_re[0]};
  assign Sum_14 = {DATA_B_re[0][15], DATA_B_re[0]};
  assign Sum_out1_re[0] = Sum_13 + Sum_14;
  assign Sum_1 = {DATA_A_im[0][15], DATA_A_im[0]};
  assign Sum_2 = {DATA_B_im[0][15], DATA_B_im[0]};
  assign Sum_out1_im[0] = Sum_1 + Sum_2;
  assign Sum_15 = {DATA_A_re[1][15], DATA_A_re[1]};
  assign Sum_16 = {DATA_B_re[1][15], DATA_B_re[1]};
  assign Sum_out1_re[1] = Sum_15 + Sum_16;
  assign Sum_3 = {DATA_A_im[1][15], DATA_A_im[1]};
  assign Sum_4 = {DATA_B_im[1][15], DATA_B_im[1]};
  assign Sum_out1_im[1] = Sum_3 + Sum_4;
  assign Sum_17 = {DATA_A_re[2][15], DATA_A_re[2]};
  assign Sum_18 = {DATA_B_re[2][15], DATA_B_re[2]};
  assign Sum_out1_re[2] = Sum_17 + Sum_18;
  assign Sum_5 = {DATA_A_im[2][15], DATA_A_im[2]};
  assign Sum_6 = {DATA_B_im[2][15], DATA_B_im[2]};
  assign Sum_out1_im[2] = Sum_5 + Sum_6;
  assign Sum_19 = {DATA_A_re[3][15], DATA_A_re[3]};
  assign Sum_20 = {DATA_B_re[3][15], DATA_B_re[3]};
  assign Sum_out1_re[3] = Sum_19 + Sum_20;
  assign Sum_7 = {DATA_A_im[3][15], DATA_A_im[3]};
  assign Sum_8 = {DATA_B_im[3][15], DATA_B_im[3]};
  assign Sum_out1_im[3] = Sum_7 + Sum_8;
  assign Sum_21 = {DATA_A_re[4][15], DATA_A_re[4]};
  assign Sum_22 = {DATA_B_re[4][15], DATA_B_re[4]};
  assign Sum_out1_re[4] = Sum_21 + Sum_22;
  assign Sum_9 = {DATA_A_im[4][15], DATA_A_im[4]};
  assign Sum_10 = {DATA_B_im[4][15], DATA_B_im[4]};
  assign Sum_out1_im[4] = Sum_9 + Sum_10;
  assign Sum_23 = {DATA_A_re[5][15], DATA_A_re[5]};
  assign Sum_24 = {DATA_B_re[5][15], DATA_B_re[5]};
  assign Sum_out1_re[5] = Sum_23 + Sum_24;
  assign Sum_11 = {DATA_A_im[5][15], DATA_A_im[5]};
  assign Sum_12 = {DATA_B_im[5][15], DATA_B_im[5]};
  assign Sum_out1_im[5] = Sum_11 + Sum_12;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_bypass_delay_re[0] <= 17'sb00000000000000000;
        Delay3_bypass_delay_im[0] <= 17'sb00000000000000000;
        Delay3_bypass_delay_re[1] <= 17'sb00000000000000000;
        Delay3_bypass_delay_im[1] <= 17'sb00000000000000000;
        Delay3_bypass_delay_re[2] <= 17'sb00000000000000000;
        Delay3_bypass_delay_im[2] <= 17'sb00000000000000000;
        Delay3_bypass_delay_re[3] <= 17'sb00000000000000000;
        Delay3_bypass_delay_im[3] <= 17'sb00000000000000000;
        Delay3_bypass_delay_re[4] <= 17'sb00000000000000000;
        Delay3_bypass_delay_im[4] <= 17'sb00000000000000000;
        Delay3_bypass_delay_re[5] <= 17'sb00000000000000000;
        Delay3_bypass_delay_im[5] <= 17'sb00000000000000000;
        Delay3_reg_re[0] <= 17'sb00000000000000000;
        Delay3_reg_im[0] <= 17'sb00000000000000000;
        Delay3_reg_re[1] <= 17'sb00000000000000000;
        Delay3_reg_im[1] <= 17'sb00000000000000000;
        Delay3_reg_re[2] <= 17'sb00000000000000000;
        Delay3_reg_im[2] <= 17'sb00000000000000000;
        Delay3_reg_re[3] <= 17'sb00000000000000000;
        Delay3_reg_im[3] <= 17'sb00000000000000000;
        Delay3_reg_re[4] <= 17'sb00000000000000000;
        Delay3_reg_im[4] <= 17'sb00000000000000000;
        Delay3_reg_re[5] <= 17'sb00000000000000000;
        Delay3_reg_im[5] <= 17'sb00000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay3_bypass_delay_re[0] <= Delay3_bypass_delay_next_re[0];
          Delay3_bypass_delay_im[0] <= Delay3_bypass_delay_next_im[0];
          Delay3_bypass_delay_re[1] <= Delay3_bypass_delay_next_re[1];
          Delay3_bypass_delay_im[1] <= Delay3_bypass_delay_next_im[1];
          Delay3_bypass_delay_re[2] <= Delay3_bypass_delay_next_re[2];
          Delay3_bypass_delay_im[2] <= Delay3_bypass_delay_next_im[2];
          Delay3_bypass_delay_re[3] <= Delay3_bypass_delay_next_re[3];
          Delay3_bypass_delay_im[3] <= Delay3_bypass_delay_next_im[3];
          Delay3_bypass_delay_re[4] <= Delay3_bypass_delay_next_re[4];
          Delay3_bypass_delay_im[4] <= Delay3_bypass_delay_next_im[4];
          Delay3_bypass_delay_re[5] <= Delay3_bypass_delay_next_re[5];
          Delay3_bypass_delay_im[5] <= Delay3_bypass_delay_next_im[5];
          Delay3_reg_re[0] <= Delay3_reg_next_re[0];
          Delay3_reg_im[0] <= Delay3_reg_next_im[0];
          Delay3_reg_re[1] <= Delay3_reg_next_re[1];
          Delay3_reg_im[1] <= Delay3_reg_next_im[1];
          Delay3_reg_re[2] <= Delay3_reg_next_re[2];
          Delay3_reg_im[2] <= Delay3_reg_next_im[2];
          Delay3_reg_re[3] <= Delay3_reg_next_re[3];
          Delay3_reg_im[3] <= Delay3_reg_next_im[3];
          Delay3_reg_re[4] <= Delay3_reg_next_re[4];
          Delay3_reg_im[4] <= Delay3_reg_next_im[4];
          Delay3_reg_re[5] <= Delay3_reg_next_re[5];
          Delay3_reg_im[5] <= Delay3_reg_next_im[5];
        end
      end
    end

  assign DATA_A_re_6[0] = (ENA == 1'b1 ? Delay3_reg_re[0] :
              Delay3_bypass_delay_re[0]);
  assign DATA_A_re_6[1] = (ENA == 1'b1 ? Delay3_reg_re[1] :
              Delay3_bypass_delay_re[1]);
  assign DATA_A_re_6[2] = (ENA == 1'b1 ? Delay3_reg_re[2] :
              Delay3_bypass_delay_re[2]);
  assign DATA_A_re_6[3] = (ENA == 1'b1 ? Delay3_reg_re[3] :
              Delay3_bypass_delay_re[3]);
  assign DATA_A_re_6[4] = (ENA == 1'b1 ? Delay3_reg_re[4] :
              Delay3_bypass_delay_re[4]);
  assign DATA_A_re_6[5] = (ENA == 1'b1 ? Delay3_reg_re[5] :
              Delay3_bypass_delay_re[5]);
  assign DATA_A_im_6[0] = (ENA == 1'b1 ? Delay3_reg_im[0] :
              Delay3_bypass_delay_im[0]);
  assign DATA_A_im_6[1] = (ENA == 1'b1 ? Delay3_reg_im[1] :
              Delay3_bypass_delay_im[1]);
  assign DATA_A_im_6[2] = (ENA == 1'b1 ? Delay3_reg_im[2] :
              Delay3_bypass_delay_im[2]);
  assign DATA_A_im_6[3] = (ENA == 1'b1 ? Delay3_reg_im[3] :
              Delay3_bypass_delay_im[3]);
  assign DATA_A_im_6[4] = (ENA == 1'b1 ? Delay3_reg_im[4] :
              Delay3_bypass_delay_im[4]);
  assign DATA_A_im_6[5] = (ENA == 1'b1 ? Delay3_reg_im[5] :
              Delay3_bypass_delay_im[5]);
  assign Delay3_bypass_delay_next_re[0] = Delay3_reg_re[0];
  assign Delay3_bypass_delay_next_im[0] = Delay3_reg_im[0];
  assign Delay3_bypass_delay_next_re[1] = Delay3_reg_re[1];
  assign Delay3_bypass_delay_next_im[1] = Delay3_reg_im[1];
  assign Delay3_bypass_delay_next_re[2] = Delay3_reg_re[2];
  assign Delay3_bypass_delay_next_im[2] = Delay3_reg_im[2];
  assign Delay3_bypass_delay_next_re[3] = Delay3_reg_re[3];
  assign Delay3_bypass_delay_next_im[3] = Delay3_reg_im[3];
  assign Delay3_bypass_delay_next_re[4] = Delay3_reg_re[4];
  assign Delay3_bypass_delay_next_im[4] = Delay3_reg_im[4];
  assign Delay3_bypass_delay_next_re[5] = Delay3_reg_re[5];
  assign Delay3_bypass_delay_next_im[5] = Delay3_reg_im[5];
  assign Delay3_reg_next_re[0] = Sum_out1_re[0];
  assign Delay3_reg_next_im[0] = Sum_out1_im[0];
  assign Delay3_reg_next_re[1] = Sum_out1_re[1];
  assign Delay3_reg_next_im[1] = Sum_out1_im[1];
  assign Delay3_reg_next_re[2] = Sum_out1_re[2];
  assign Delay3_reg_next_im[2] = Sum_out1_im[2];
  assign Delay3_reg_next_re[3] = Sum_out1_re[3];
  assign Delay3_reg_next_im[3] = Sum_out1_im[3];
  assign Delay3_reg_next_re[4] = Sum_out1_re[4];
  assign Delay3_reg_next_im[4] = Sum_out1_im[4];
  assign Delay3_reg_next_re[5] = Sum_out1_re[5];
  assign Delay3_reg_next_im[5] = Sum_out1_im[5];



  assign Data_Type_Conversion3_out1_re[0] = ((DATA_A_re_6[0][16] == 1'b0) && (DATA_A_re_6[0][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_re_6[0][16] == 1'b1) && (DATA_A_re_6[0][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_re_6[0][15:0])));
  assign Data_Type_Conversion3_out1_im[0] = ((DATA_A_im_6[0][16] == 1'b0) && (DATA_A_im_6[0][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_im_6[0][16] == 1'b1) && (DATA_A_im_6[0][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_im_6[0][15:0])));
  assign Data_Type_Conversion3_out1_re[1] = ((DATA_A_re_6[1][16] == 1'b0) && (DATA_A_re_6[1][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_re_6[1][16] == 1'b1) && (DATA_A_re_6[1][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_re_6[1][15:0])));
  assign Data_Type_Conversion3_out1_im[1] = ((DATA_A_im_6[1][16] == 1'b0) && (DATA_A_im_6[1][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_im_6[1][16] == 1'b1) && (DATA_A_im_6[1][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_im_6[1][15:0])));
  assign Data_Type_Conversion3_out1_re[2] = ((DATA_A_re_6[2][16] == 1'b0) && (DATA_A_re_6[2][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_re_6[2][16] == 1'b1) && (DATA_A_re_6[2][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_re_6[2][15:0])));
  assign Data_Type_Conversion3_out1_im[2] = ((DATA_A_im_6[2][16] == 1'b0) && (DATA_A_im_6[2][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_im_6[2][16] == 1'b1) && (DATA_A_im_6[2][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_im_6[2][15:0])));
  assign Data_Type_Conversion3_out1_re[3] = ((DATA_A_re_6[3][16] == 1'b0) && (DATA_A_re_6[3][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_re_6[3][16] == 1'b1) && (DATA_A_re_6[3][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_re_6[3][15:0])));
  assign Data_Type_Conversion3_out1_im[3] = ((DATA_A_im_6[3][16] == 1'b0) && (DATA_A_im_6[3][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_im_6[3][16] == 1'b1) && (DATA_A_im_6[3][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_im_6[3][15:0])));
  assign Data_Type_Conversion3_out1_re[4] = ((DATA_A_re_6[4][16] == 1'b0) && (DATA_A_re_6[4][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_re_6[4][16] == 1'b1) && (DATA_A_re_6[4][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_re_6[4][15:0])));
  assign Data_Type_Conversion3_out1_im[4] = ((DATA_A_im_6[4][16] == 1'b0) && (DATA_A_im_6[4][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_im_6[4][16] == 1'b1) && (DATA_A_im_6[4][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_im_6[4][15:0])));
  assign Data_Type_Conversion3_out1_re[5] = ((DATA_A_re_6[5][16] == 1'b0) && (DATA_A_re_6[5][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_re_6[5][16] == 1'b1) && (DATA_A_re_6[5][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_re_6[5][15:0])));
  assign Data_Type_Conversion3_out1_im[5] = ((DATA_A_im_6[5][16] == 1'b0) && (DATA_A_im_6[5][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_A_im_6[5][16] == 1'b1) && (DATA_A_im_6[5][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_A_im_6[5][15:0])));



  assign OUT_A_re_0 = Data_Type_Conversion3_out1_re[0];

  assign OUT_A_re_1 = Data_Type_Conversion3_out1_re[1];

  assign OUT_A_re_2 = Data_Type_Conversion3_out1_re[2];

  assign OUT_A_re_3 = Data_Type_Conversion3_out1_re[3];

  assign OUT_A_re_4 = Data_Type_Conversion3_out1_re[4];

  assign OUT_A_re_5 = Data_Type_Conversion3_out1_re[5];

  assign OUT_A_im_0 = Data_Type_Conversion3_out1_im[0];

  assign OUT_A_im_1 = Data_Type_Conversion3_out1_im[1];

  assign OUT_A_im_2 = Data_Type_Conversion3_out1_im[2];

  assign OUT_A_im_3 = Data_Type_Conversion3_out1_im[3];

  assign OUT_A_im_4 = Data_Type_Conversion3_out1_im[4];

  assign OUT_A_im_5 = Data_Type_Conversion3_out1_im[5];

  assign Sum1_13 = {DATA_A_re[0][15], DATA_A_re[0]};
  assign Sum1_14 = {DATA_B_re[0][15], DATA_B_re[0]};
  assign Sum1_out1_re[0] = Sum1_13 - Sum1_14;
  assign Sum1_1 = {DATA_A_im[0][15], DATA_A_im[0]};
  assign Sum1_2 = {DATA_B_im[0][15], DATA_B_im[0]};
  assign Sum1_out1_im[0] = Sum1_1 - Sum1_2;
  assign Sum1_15 = {DATA_A_re[1][15], DATA_A_re[1]};
  assign Sum1_16 = {DATA_B_re[1][15], DATA_B_re[1]};
  assign Sum1_out1_re[1] = Sum1_15 - Sum1_16;
  assign Sum1_3 = {DATA_A_im[1][15], DATA_A_im[1]};
  assign Sum1_4 = {DATA_B_im[1][15], DATA_B_im[1]};
  assign Sum1_out1_im[1] = Sum1_3 - Sum1_4;
  assign Sum1_17 = {DATA_A_re[2][15], DATA_A_re[2]};
  assign Sum1_18 = {DATA_B_re[2][15], DATA_B_re[2]};
  assign Sum1_out1_re[2] = Sum1_17 - Sum1_18;
  assign Sum1_5 = {DATA_A_im[2][15], DATA_A_im[2]};
  assign Sum1_6 = {DATA_B_im[2][15], DATA_B_im[2]};
  assign Sum1_out1_im[2] = Sum1_5 - Sum1_6;
  assign Sum1_19 = {DATA_A_re[3][15], DATA_A_re[3]};
  assign Sum1_20 = {DATA_B_re[3][15], DATA_B_re[3]};
  assign Sum1_out1_re[3] = Sum1_19 - Sum1_20;
  assign Sum1_7 = {DATA_A_im[3][15], DATA_A_im[3]};
  assign Sum1_8 = {DATA_B_im[3][15], DATA_B_im[3]};
  assign Sum1_out1_im[3] = Sum1_7 - Sum1_8;
  assign Sum1_21 = {DATA_A_re[4][15], DATA_A_re[4]};
  assign Sum1_22 = {DATA_B_re[4][15], DATA_B_re[4]};
  assign Sum1_out1_re[4] = Sum1_21 - Sum1_22;
  assign Sum1_9 = {DATA_A_im[4][15], DATA_A_im[4]};
  assign Sum1_10 = {DATA_B_im[4][15], DATA_B_im[4]};
  assign Sum1_out1_im[4] = Sum1_9 - Sum1_10;
  assign Sum1_23 = {DATA_A_re[5][15], DATA_A_re[5]};
  assign Sum1_24 = {DATA_B_re[5][15], DATA_B_re[5]};
  assign Sum1_out1_re[5] = Sum1_23 - Sum1_24;
  assign Sum1_11 = {DATA_A_im[5][15], DATA_A_im[5]};
  assign Sum1_12 = {DATA_B_im[5][15], DATA_B_im[5]};
  assign Sum1_out1_im[5] = Sum1_11 - Sum1_12;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_bypass_delay_re[0] <= 17'sb00000000000000000;
        Delay1_bypass_delay_im[0] <= 17'sb00000000000000000;
        Delay1_bypass_delay_re[1] <= 17'sb00000000000000000;
        Delay1_bypass_delay_im[1] <= 17'sb00000000000000000;
        Delay1_bypass_delay_re[2] <= 17'sb00000000000000000;
        Delay1_bypass_delay_im[2] <= 17'sb00000000000000000;
        Delay1_bypass_delay_re[3] <= 17'sb00000000000000000;
        Delay1_bypass_delay_im[3] <= 17'sb00000000000000000;
        Delay1_bypass_delay_re[4] <= 17'sb00000000000000000;
        Delay1_bypass_delay_im[4] <= 17'sb00000000000000000;
        Delay1_bypass_delay_re[5] <= 17'sb00000000000000000;
        Delay1_bypass_delay_im[5] <= 17'sb00000000000000000;
        Delay1_reg_re[0] <= 17'sb00000000000000000;
        Delay1_reg_im[0] <= 17'sb00000000000000000;
        Delay1_reg_re[1] <= 17'sb00000000000000000;
        Delay1_reg_im[1] <= 17'sb00000000000000000;
        Delay1_reg_re[2] <= 17'sb00000000000000000;
        Delay1_reg_im[2] <= 17'sb00000000000000000;
        Delay1_reg_re[3] <= 17'sb00000000000000000;
        Delay1_reg_im[3] <= 17'sb00000000000000000;
        Delay1_reg_re[4] <= 17'sb00000000000000000;
        Delay1_reg_im[4] <= 17'sb00000000000000000;
        Delay1_reg_re[5] <= 17'sb00000000000000000;
        Delay1_reg_im[5] <= 17'sb00000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay1_bypass_delay_re[0] <= Delay1_bypass_delay_next_re[0];
          Delay1_bypass_delay_im[0] <= Delay1_bypass_delay_next_im[0];
          Delay1_bypass_delay_re[1] <= Delay1_bypass_delay_next_re[1];
          Delay1_bypass_delay_im[1] <= Delay1_bypass_delay_next_im[1];
          Delay1_bypass_delay_re[2] <= Delay1_bypass_delay_next_re[2];
          Delay1_bypass_delay_im[2] <= Delay1_bypass_delay_next_im[2];
          Delay1_bypass_delay_re[3] <= Delay1_bypass_delay_next_re[3];
          Delay1_bypass_delay_im[3] <= Delay1_bypass_delay_next_im[3];
          Delay1_bypass_delay_re[4] <= Delay1_bypass_delay_next_re[4];
          Delay1_bypass_delay_im[4] <= Delay1_bypass_delay_next_im[4];
          Delay1_bypass_delay_re[5] <= Delay1_bypass_delay_next_re[5];
          Delay1_bypass_delay_im[5] <= Delay1_bypass_delay_next_im[5];
          Delay1_reg_re[0] <= Delay1_reg_next_re[0];
          Delay1_reg_im[0] <= Delay1_reg_next_im[0];
          Delay1_reg_re[1] <= Delay1_reg_next_re[1];
          Delay1_reg_im[1] <= Delay1_reg_next_im[1];
          Delay1_reg_re[2] <= Delay1_reg_next_re[2];
          Delay1_reg_im[2] <= Delay1_reg_next_im[2];
          Delay1_reg_re[3] <= Delay1_reg_next_re[3];
          Delay1_reg_im[3] <= Delay1_reg_next_im[3];
          Delay1_reg_re[4] <= Delay1_reg_next_re[4];
          Delay1_reg_im[4] <= Delay1_reg_next_im[4];
          Delay1_reg_re[5] <= Delay1_reg_next_re[5];
          Delay1_reg_im[5] <= Delay1_reg_next_im[5];
        end
      end
    end

  assign DATA_B_re_6[0] = (ENA == 1'b1 ? Delay1_reg_re[0] :
              Delay1_bypass_delay_re[0]);
  assign DATA_B_re_6[1] = (ENA == 1'b1 ? Delay1_reg_re[1] :
              Delay1_bypass_delay_re[1]);
  assign DATA_B_re_6[2] = (ENA == 1'b1 ? Delay1_reg_re[2] :
              Delay1_bypass_delay_re[2]);
  assign DATA_B_re_6[3] = (ENA == 1'b1 ? Delay1_reg_re[3] :
              Delay1_bypass_delay_re[3]);
  assign DATA_B_re_6[4] = (ENA == 1'b1 ? Delay1_reg_re[4] :
              Delay1_bypass_delay_re[4]);
  assign DATA_B_re_6[5] = (ENA == 1'b1 ? Delay1_reg_re[5] :
              Delay1_bypass_delay_re[5]);
  assign DATA_B_im_6[0] = (ENA == 1'b1 ? Delay1_reg_im[0] :
              Delay1_bypass_delay_im[0]);
  assign DATA_B_im_6[1] = (ENA == 1'b1 ? Delay1_reg_im[1] :
              Delay1_bypass_delay_im[1]);
  assign DATA_B_im_6[2] = (ENA == 1'b1 ? Delay1_reg_im[2] :
              Delay1_bypass_delay_im[2]);
  assign DATA_B_im_6[3] = (ENA == 1'b1 ? Delay1_reg_im[3] :
              Delay1_bypass_delay_im[3]);
  assign DATA_B_im_6[4] = (ENA == 1'b1 ? Delay1_reg_im[4] :
              Delay1_bypass_delay_im[4]);
  assign DATA_B_im_6[5] = (ENA == 1'b1 ? Delay1_reg_im[5] :
              Delay1_bypass_delay_im[5]);
  assign Delay1_bypass_delay_next_re[0] = Delay1_reg_re[0];
  assign Delay1_bypass_delay_next_im[0] = Delay1_reg_im[0];
  assign Delay1_bypass_delay_next_re[1] = Delay1_reg_re[1];
  assign Delay1_bypass_delay_next_im[1] = Delay1_reg_im[1];
  assign Delay1_bypass_delay_next_re[2] = Delay1_reg_re[2];
  assign Delay1_bypass_delay_next_im[2] = Delay1_reg_im[2];
  assign Delay1_bypass_delay_next_re[3] = Delay1_reg_re[3];
  assign Delay1_bypass_delay_next_im[3] = Delay1_reg_im[3];
  assign Delay1_bypass_delay_next_re[4] = Delay1_reg_re[4];
  assign Delay1_bypass_delay_next_im[4] = Delay1_reg_im[4];
  assign Delay1_bypass_delay_next_re[5] = Delay1_reg_re[5];
  assign Delay1_bypass_delay_next_im[5] = Delay1_reg_im[5];
  assign Delay1_reg_next_re[0] = Sum1_out1_re[0];
  assign Delay1_reg_next_im[0] = Sum1_out1_im[0];
  assign Delay1_reg_next_re[1] = Sum1_out1_re[1];
  assign Delay1_reg_next_im[1] = Sum1_out1_im[1];
  assign Delay1_reg_next_re[2] = Sum1_out1_re[2];
  assign Delay1_reg_next_im[2] = Sum1_out1_im[2];
  assign Delay1_reg_next_re[3] = Sum1_out1_re[3];
  assign Delay1_reg_next_im[3] = Sum1_out1_im[3];
  assign Delay1_reg_next_re[4] = Sum1_out1_re[4];
  assign Delay1_reg_next_im[4] = Sum1_out1_im[4];
  assign Delay1_reg_next_re[5] = Sum1_out1_re[5];
  assign Delay1_reg_next_im[5] = Sum1_out1_im[5];



  assign Data_Type_Conversion4_out1_re[0] = ((DATA_B_re_6[0][16] == 1'b0) && (DATA_B_re_6[0][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_re_6[0][16] == 1'b1) && (DATA_B_re_6[0][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_re_6[0][15:0])));
  assign Data_Type_Conversion4_out1_im[0] = ((DATA_B_im_6[0][16] == 1'b0) && (DATA_B_im_6[0][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_im_6[0][16] == 1'b1) && (DATA_B_im_6[0][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_im_6[0][15:0])));
  assign Data_Type_Conversion4_out1_re[1] = ((DATA_B_re_6[1][16] == 1'b0) && (DATA_B_re_6[1][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_re_6[1][16] == 1'b1) && (DATA_B_re_6[1][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_re_6[1][15:0])));
  assign Data_Type_Conversion4_out1_im[1] = ((DATA_B_im_6[1][16] == 1'b0) && (DATA_B_im_6[1][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_im_6[1][16] == 1'b1) && (DATA_B_im_6[1][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_im_6[1][15:0])));
  assign Data_Type_Conversion4_out1_re[2] = ((DATA_B_re_6[2][16] == 1'b0) && (DATA_B_re_6[2][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_re_6[2][16] == 1'b1) && (DATA_B_re_6[2][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_re_6[2][15:0])));
  assign Data_Type_Conversion4_out1_im[2] = ((DATA_B_im_6[2][16] == 1'b0) && (DATA_B_im_6[2][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_im_6[2][16] == 1'b1) && (DATA_B_im_6[2][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_im_6[2][15:0])));
  assign Data_Type_Conversion4_out1_re[3] = ((DATA_B_re_6[3][16] == 1'b0) && (DATA_B_re_6[3][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_re_6[3][16] == 1'b1) && (DATA_B_re_6[3][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_re_6[3][15:0])));
  assign Data_Type_Conversion4_out1_im[3] = ((DATA_B_im_6[3][16] == 1'b0) && (DATA_B_im_6[3][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_im_6[3][16] == 1'b1) && (DATA_B_im_6[3][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_im_6[3][15:0])));
  assign Data_Type_Conversion4_out1_re[4] = ((DATA_B_re_6[4][16] == 1'b0) && (DATA_B_re_6[4][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_re_6[4][16] == 1'b1) && (DATA_B_re_6[4][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_re_6[4][15:0])));
  assign Data_Type_Conversion4_out1_im[4] = ((DATA_B_im_6[4][16] == 1'b0) && (DATA_B_im_6[4][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_im_6[4][16] == 1'b1) && (DATA_B_im_6[4][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_im_6[4][15:0])));
  assign Data_Type_Conversion4_out1_re[5] = ((DATA_B_re_6[5][16] == 1'b0) && (DATA_B_re_6[5][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_re_6[5][16] == 1'b1) && (DATA_B_re_6[5][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_re_6[5][15:0])));
  assign Data_Type_Conversion4_out1_im[5] = ((DATA_B_im_6[5][16] == 1'b0) && (DATA_B_im_6[5][15] != 1'b0) ? 16'sb0111111111111111 :
              ((DATA_B_im_6[5][16] == 1'b1) && (DATA_B_im_6[5][15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(DATA_B_im_6[5][15:0])));



  assign COUNT[0] = COUNT_0;
  assign COUNT[1] = COUNT_1;
  assign COUNT[2] = COUNT_2;
  assign COUNT[3] = COUNT_3;
  assign COUNT[4] = COUNT_4;
  assign COUNT[5] = COUNT_5;

  assign bitMask_for_Bitwise_Operator[0] = 7'b1111111;
  assign bitMask_for_Bitwise_Operator[1] = 7'b0111111;
  assign bitMask_for_Bitwise_Operator[2] = 7'b0011111;
  assign bitMask_for_Bitwise_Operator[3] = 7'b0001111;
  assign bitMask_for_Bitwise_Operator[4] = 7'b0000111;
  assign bitMask_for_Bitwise_Operator[5] = 7'b0000011;



  assign Bitwise_Operator_out1[0] = COUNT[0] & bitMask_for_Bitwise_Operator[0];
  assign Bitwise_Operator_out1[1] = COUNT[1] & bitMask_for_Bitwise_Operator[1];
  assign Bitwise_Operator_out1[2] = COUNT[2] & bitMask_for_Bitwise_Operator[2];
  assign Bitwise_Operator_out1[3] = COUNT[3] & bitMask_for_Bitwise_Operator[3];
  assign Bitwise_Operator_out1[4] = COUNT[4] & bitMask_for_Bitwise_Operator[4];
  assign Bitwise_Operator_out1[5] = COUNT[5] & bitMask_for_Bitwise_Operator[5];



  assign Constant2_out1[0] = 8'b00000000;
  assign Constant2_out1[1] = 8'b10000000;
  assign Constant2_out1[2] = 8'b11000000;
  assign Constant2_out1[3] = 8'b11100000;
  assign Constant2_out1[4] = 8'b11110000;
  assign Constant2_out1[5] = 8'b11111000;



  assign Sum3_1 = {2'b0, Bitwise_Operator_out1[0]};
  assign Sum3_2 = {1'b0, Constant2_out1[0]};
  assign addr[0] = Sum3_1 + Sum3_2;
  assign Sum3_3 = {2'b0, Bitwise_Operator_out1[1]};
  assign Sum3_4 = {1'b0, Constant2_out1[1]};
  assign addr[1] = Sum3_3 + Sum3_4;
  assign Sum3_5 = {2'b0, Bitwise_Operator_out1[2]};
  assign Sum3_6 = {1'b0, Constant2_out1[2]};
  assign addr[2] = Sum3_5 + Sum3_6;
  assign Sum3_7 = {2'b0, Bitwise_Operator_out1[3]};
  assign Sum3_8 = {1'b0, Constant2_out1[3]};
  assign addr[3] = Sum3_7 + Sum3_8;
  assign Sum3_9 = {2'b0, Bitwise_Operator_out1[4]};
  assign Sum3_10 = {1'b0, Constant2_out1[4]};
  assign addr[4] = Sum3_9 + Sum3_10;
  assign Sum3_11 = {2'b0, Bitwise_Operator_out1[5]};
  assign Sum3_12 = {1'b0, Constant2_out1[5]};
  assign addr[5] = Sum3_11 + Sum3_12;



  assign Constant6_out1_re[0] = 16'sb0100000000000000;
  assign Constant6_out1_im[0] = 16'sb0000000000000000;
  assign Constant6_out1_re[1] = 16'sb0011111111111011;
  assign Constant6_out1_im[1] = 16'sb1111111001101110;
  assign Constant6_out1_re[2] = 16'sb0011111111101100;
  assign Constant6_out1_im[2] = 16'sb1111110011011100;
  assign Constant6_out1_re[3] = 16'sb0011111111010100;
  assign Constant6_out1_im[3] = 16'sb1111101101001011;
  assign Constant6_out1_re[4] = 16'sb0011111110110001;
  assign Constant6_out1_im[4] = 16'sb1111100110111010;
  assign Constant6_out1_re[5] = 16'sb0011111110000101;
  assign Constant6_out1_im[5] = 16'sb1111100000101010;
  assign Constant6_out1_re[6] = 16'sb0011111101001111;
  assign Constant6_out1_im[6] = 16'sb1111011010011100;
  assign Constant6_out1_re[7] = 16'sb0011111100001111;
  assign Constant6_out1_im[7] = 16'sb1111010100001111;
  assign Constant6_out1_re[8] = 16'sb0011111011000101;
  assign Constant6_out1_im[8] = 16'sb1111001110000100;
  assign Constant6_out1_re[9] = 16'sb0011111001110010;
  assign Constant6_out1_im[9] = 16'sb1111000111111010;
  assign Constant6_out1_re[10] = 16'sb0011111000010101;
  assign Constant6_out1_im[10] = 16'sb1111000001110011;
  assign Constant6_out1_re[11] = 16'sb0011110110101111;
  assign Constant6_out1_im[11] = 16'sb1110111011101110;
  assign Constant6_out1_re[12] = 16'sb0011110100111111;
  assign Constant6_out1_im[12] = 16'sb1110110101101100;
  assign Constant6_out1_re[13] = 16'sb0011110011000101;
  assign Constant6_out1_im[13] = 16'sb1110101111101101;
  assign Constant6_out1_re[14] = 16'sb0011110001000010;
  assign Constant6_out1_im[14] = 16'sb1110101001110000;
  assign Constant6_out1_re[15] = 16'sb0011101110110110;
  assign Constant6_out1_im[15] = 16'sb1110100011110111;
  assign Constant6_out1_re[16] = 16'sb0011101100100001;
  assign Constant6_out1_im[16] = 16'sb1110011110000010;
  assign Constant6_out1_re[17] = 16'sb0011101010000010;
  assign Constant6_out1_im[17] = 16'sb1110011000010001;
  assign Constant6_out1_re[18] = 16'sb0011100111011011;
  assign Constant6_out1_im[18] = 16'sb1110010010100011;
  assign Constant6_out1_re[19] = 16'sb0011100100101011;
  assign Constant6_out1_im[19] = 16'sb1110001100111010;
  assign Constant6_out1_re[20] = 16'sb0011100001110001;
  assign Constant6_out1_im[20] = 16'sb1110000111010101;
  assign Constant6_out1_re[21] = 16'sb0011011110110000;
  assign Constant6_out1_im[21] = 16'sb1110000001110100;
  assign Constant6_out1_re[22] = 16'sb0011011011100101;
  assign Constant6_out1_im[22] = 16'sb1101111100011001;
  assign Constant6_out1_re[23] = 16'sb0011011000010010;
  assign Constant6_out1_im[23] = 16'sb1101110111000011;
  assign Constant6_out1_re[24] = 16'sb0011010100110111;
  assign Constant6_out1_im[24] = 16'sb1101110001110010;
  assign Constant6_out1_re[25] = 16'sb0011010001010011;
  assign Constant6_out1_im[25] = 16'sb1101101100100110;
  assign Constant6_out1_re[26] = 16'sb0011001101101000;
  assign Constant6_out1_im[26] = 16'sb1101100111100000;
  assign Constant6_out1_re[27] = 16'sb0011001001110100;
  assign Constant6_out1_im[27] = 16'sb1101100010100000;
  assign Constant6_out1_re[28] = 16'sb0011000101111001;
  assign Constant6_out1_im[28] = 16'sb1101011101100110;
  assign Constant6_out1_re[29] = 16'sb0011000001110110;
  assign Constant6_out1_im[29] = 16'sb1101011000110010;
  assign Constant6_out1_re[30] = 16'sb0010111101101100;
  assign Constant6_out1_im[30] = 16'sb1101010100000101;
  assign Constant6_out1_re[31] = 16'sb0010111001011010;
  assign Constant6_out1_im[31] = 16'sb1101001111011111;
  assign Constant6_out1_re[32] = 16'sb0010110101000001;
  assign Constant6_out1_im[32] = 16'sb1101001010111111;
  assign Constant6_out1_re[33] = 16'sb0010110000100001;
  assign Constant6_out1_im[33] = 16'sb1101000110100110;
  assign Constant6_out1_re[34] = 16'sb0010101011111011;
  assign Constant6_out1_im[34] = 16'sb1101000010010100;
  assign Constant6_out1_re[35] = 16'sb0010100111001110;
  assign Constant6_out1_im[35] = 16'sb1100111110001010;
  assign Constant6_out1_re[36] = 16'sb0010100010011010;
  assign Constant6_out1_im[36] = 16'sb1100111010000111;
  assign Constant6_out1_re[37] = 16'sb0010011101100000;
  assign Constant6_out1_im[37] = 16'sb1100110110001100;
  assign Constant6_out1_re[38] = 16'sb0010011000100000;
  assign Constant6_out1_im[38] = 16'sb1100110010011000;
  assign Constant6_out1_re[39] = 16'sb0010010011011010;
  assign Constant6_out1_im[39] = 16'sb1100101110101101;
  assign Constant6_out1_re[40] = 16'sb0010001110001110;
  assign Constant6_out1_im[40] = 16'sb1100101011001001;
  assign Constant6_out1_re[41] = 16'sb0010001000111101;
  assign Constant6_out1_im[41] = 16'sb1100100111101110;
  assign Constant6_out1_re[42] = 16'sb0010000011100111;
  assign Constant6_out1_im[42] = 16'sb1100100100011011;
  assign Constant6_out1_re[43] = 16'sb0001111110001100;
  assign Constant6_out1_im[43] = 16'sb1100100001010000;
  assign Constant6_out1_re[44] = 16'sb0001111000101011;
  assign Constant6_out1_im[44] = 16'sb1100011110001111;
  assign Constant6_out1_re[45] = 16'sb0001110011000110;
  assign Constant6_out1_im[45] = 16'sb1100011011010101;
  assign Constant6_out1_re[46] = 16'sb0001101101011101;
  assign Constant6_out1_im[46] = 16'sb1100011000100101;
  assign Constant6_out1_re[47] = 16'sb0001100111101111;
  assign Constant6_out1_im[47] = 16'sb1100010101111110;
  assign Constant6_out1_re[48] = 16'sb0001100001111110;
  assign Constant6_out1_im[48] = 16'sb1100010011011111;
  assign Constant6_out1_re[49] = 16'sb0001011100001001;
  assign Constant6_out1_im[49] = 16'sb1100010001001010;
  assign Constant6_out1_re[50] = 16'sb0001010110010000;
  assign Constant6_out1_im[50] = 16'sb1100001110111110;
  assign Constant6_out1_re[51] = 16'sb0001010000010011;
  assign Constant6_out1_im[51] = 16'sb1100001100111011;
  assign Constant6_out1_re[52] = 16'sb0001001010010100;
  assign Constant6_out1_im[52] = 16'sb1100001011000001;
  assign Constant6_out1_re[53] = 16'sb0001000100010010;
  assign Constant6_out1_im[53] = 16'sb1100001001010001;
  assign Constant6_out1_re[54] = 16'sb0000111110001101;
  assign Constant6_out1_im[54] = 16'sb1100000111101011;
  assign Constant6_out1_re[55] = 16'sb0000111000000110;
  assign Constant6_out1_im[55] = 16'sb1100000110001110;
  assign Constant6_out1_re[56] = 16'sb0000110001111100;
  assign Constant6_out1_im[56] = 16'sb1100000100111011;
  assign Constant6_out1_re[57] = 16'sb0000101011110001;
  assign Constant6_out1_im[57] = 16'sb1100000011110001;
  assign Constant6_out1_re[58] = 16'sb0000100101100100;
  assign Constant6_out1_im[58] = 16'sb1100000010110001;
  assign Constant6_out1_re[59] = 16'sb0000011111010110;
  assign Constant6_out1_im[59] = 16'sb1100000001111011;
  assign Constant6_out1_re[60] = 16'sb0000011001000110;
  assign Constant6_out1_im[60] = 16'sb1100000001001111;
  assign Constant6_out1_re[61] = 16'sb0000010010110101;
  assign Constant6_out1_im[61] = 16'sb1100000000101100;
  assign Constant6_out1_re[62] = 16'sb0000001100100100;
  assign Constant6_out1_im[62] = 16'sb1100000000010100;
  assign Constant6_out1_re[63] = 16'sb0000000110010010;
  assign Constant6_out1_im[63] = 16'sb1100000000000101;
  assign Constant6_out1_re[64] = 16'sb0000000000000000;
  assign Constant6_out1_im[64] = 16'sb1100000000000000;
  assign Constant6_out1_re[65] = 16'sb1111111001101110;
  assign Constant6_out1_im[65] = 16'sb1100000000000101;
  assign Constant6_out1_re[66] = 16'sb1111110011011100;
  assign Constant6_out1_im[66] = 16'sb1100000000010100;
  assign Constant6_out1_re[67] = 16'sb1111101101001011;
  assign Constant6_out1_im[67] = 16'sb1100000000101100;
  assign Constant6_out1_re[68] = 16'sb1111100110111010;
  assign Constant6_out1_im[68] = 16'sb1100000001001111;
  assign Constant6_out1_re[69] = 16'sb1111100000101010;
  assign Constant6_out1_im[69] = 16'sb1100000001111011;
  assign Constant6_out1_re[70] = 16'sb1111011010011100;
  assign Constant6_out1_im[70] = 16'sb1100000010110001;
  assign Constant6_out1_re[71] = 16'sb1111010100001111;
  assign Constant6_out1_im[71] = 16'sb1100000011110001;
  assign Constant6_out1_re[72] = 16'sb1111001110000100;
  assign Constant6_out1_im[72] = 16'sb1100000100111011;
  assign Constant6_out1_re[73] = 16'sb1111000111111010;
  assign Constant6_out1_im[73] = 16'sb1100000110001110;
  assign Constant6_out1_re[74] = 16'sb1111000001110011;
  assign Constant6_out1_im[74] = 16'sb1100000111101011;
  assign Constant6_out1_re[75] = 16'sb1110111011101110;
  assign Constant6_out1_im[75] = 16'sb1100001001010001;
  assign Constant6_out1_re[76] = 16'sb1110110101101100;
  assign Constant6_out1_im[76] = 16'sb1100001011000001;
  assign Constant6_out1_re[77] = 16'sb1110101111101101;
  assign Constant6_out1_im[77] = 16'sb1100001100111011;
  assign Constant6_out1_re[78] = 16'sb1110101001110000;
  assign Constant6_out1_im[78] = 16'sb1100001110111110;
  assign Constant6_out1_re[79] = 16'sb1110100011110111;
  assign Constant6_out1_im[79] = 16'sb1100010001001010;
  assign Constant6_out1_re[80] = 16'sb1110011110000010;
  assign Constant6_out1_im[80] = 16'sb1100010011011111;
  assign Constant6_out1_re[81] = 16'sb1110011000010001;
  assign Constant6_out1_im[81] = 16'sb1100010101111110;
  assign Constant6_out1_re[82] = 16'sb1110010010100011;
  assign Constant6_out1_im[82] = 16'sb1100011000100101;
  assign Constant6_out1_re[83] = 16'sb1110001100111010;
  assign Constant6_out1_im[83] = 16'sb1100011011010101;
  assign Constant6_out1_re[84] = 16'sb1110000111010101;
  assign Constant6_out1_im[84] = 16'sb1100011110001111;
  assign Constant6_out1_re[85] = 16'sb1110000001110100;
  assign Constant6_out1_im[85] = 16'sb1100100001010000;
  assign Constant6_out1_re[86] = 16'sb1101111100011001;
  assign Constant6_out1_im[86] = 16'sb1100100100011011;
  assign Constant6_out1_re[87] = 16'sb1101110111000011;
  assign Constant6_out1_im[87] = 16'sb1100100111101110;
  assign Constant6_out1_re[88] = 16'sb1101110001110010;
  assign Constant6_out1_im[88] = 16'sb1100101011001001;
  assign Constant6_out1_re[89] = 16'sb1101101100100110;
  assign Constant6_out1_im[89] = 16'sb1100101110101101;
  assign Constant6_out1_re[90] = 16'sb1101100111100000;
  assign Constant6_out1_im[90] = 16'sb1100110010011000;
  assign Constant6_out1_re[91] = 16'sb1101100010100000;
  assign Constant6_out1_im[91] = 16'sb1100110110001100;
  assign Constant6_out1_re[92] = 16'sb1101011101100110;
  assign Constant6_out1_im[92] = 16'sb1100111010000111;
  assign Constant6_out1_re[93] = 16'sb1101011000110010;
  assign Constant6_out1_im[93] = 16'sb1100111110001010;
  assign Constant6_out1_re[94] = 16'sb1101010100000101;
  assign Constant6_out1_im[94] = 16'sb1101000010010100;
  assign Constant6_out1_re[95] = 16'sb1101001111011111;
  assign Constant6_out1_im[95] = 16'sb1101000110100110;
  assign Constant6_out1_re[96] = 16'sb1101001010111111;
  assign Constant6_out1_im[96] = 16'sb1101001010111111;
  assign Constant6_out1_re[97] = 16'sb1101000110100110;
  assign Constant6_out1_im[97] = 16'sb1101001111011111;
  assign Constant6_out1_re[98] = 16'sb1101000010010100;
  assign Constant6_out1_im[98] = 16'sb1101010100000101;
  assign Constant6_out1_re[99] = 16'sb1100111110001010;
  assign Constant6_out1_im[99] = 16'sb1101011000110010;
  assign Constant6_out1_re[100] = 16'sb1100111010000111;
  assign Constant6_out1_im[100] = 16'sb1101011101100110;
  assign Constant6_out1_re[101] = 16'sb1100110110001100;
  assign Constant6_out1_im[101] = 16'sb1101100010100000;
  assign Constant6_out1_re[102] = 16'sb1100110010011000;
  assign Constant6_out1_im[102] = 16'sb1101100111100000;
  assign Constant6_out1_re[103] = 16'sb1100101110101101;
  assign Constant6_out1_im[103] = 16'sb1101101100100110;
  assign Constant6_out1_re[104] = 16'sb1100101011001001;
  assign Constant6_out1_im[104] = 16'sb1101110001110010;
  assign Constant6_out1_re[105] = 16'sb1100100111101110;
  assign Constant6_out1_im[105] = 16'sb1101110111000011;
  assign Constant6_out1_re[106] = 16'sb1100100100011011;
  assign Constant6_out1_im[106] = 16'sb1101111100011001;
  assign Constant6_out1_re[107] = 16'sb1100100001010000;
  assign Constant6_out1_im[107] = 16'sb1110000001110100;
  assign Constant6_out1_re[108] = 16'sb1100011110001111;
  assign Constant6_out1_im[108] = 16'sb1110000111010101;
  assign Constant6_out1_re[109] = 16'sb1100011011010101;
  assign Constant6_out1_im[109] = 16'sb1110001100111010;
  assign Constant6_out1_re[110] = 16'sb1100011000100101;
  assign Constant6_out1_im[110] = 16'sb1110010010100011;
  assign Constant6_out1_re[111] = 16'sb1100010101111110;
  assign Constant6_out1_im[111] = 16'sb1110011000010001;
  assign Constant6_out1_re[112] = 16'sb1100010011011111;
  assign Constant6_out1_im[112] = 16'sb1110011110000010;
  assign Constant6_out1_re[113] = 16'sb1100010001001010;
  assign Constant6_out1_im[113] = 16'sb1110100011110111;
  assign Constant6_out1_re[114] = 16'sb1100001110111110;
  assign Constant6_out1_im[114] = 16'sb1110101001110000;
  assign Constant6_out1_re[115] = 16'sb1100001100111011;
  assign Constant6_out1_im[115] = 16'sb1110101111101101;
  assign Constant6_out1_re[116] = 16'sb1100001011000001;
  assign Constant6_out1_im[116] = 16'sb1110110101101100;
  assign Constant6_out1_re[117] = 16'sb1100001001010001;
  assign Constant6_out1_im[117] = 16'sb1110111011101110;
  assign Constant6_out1_re[118] = 16'sb1100000111101011;
  assign Constant6_out1_im[118] = 16'sb1111000001110011;
  assign Constant6_out1_re[119] = 16'sb1100000110001110;
  assign Constant6_out1_im[119] = 16'sb1111000111111010;
  assign Constant6_out1_re[120] = 16'sb1100000100111011;
  assign Constant6_out1_im[120] = 16'sb1111001110000100;
  assign Constant6_out1_re[121] = 16'sb1100000011110001;
  assign Constant6_out1_im[121] = 16'sb1111010100001111;
  assign Constant6_out1_re[122] = 16'sb1100000010110001;
  assign Constant6_out1_im[122] = 16'sb1111011010011100;
  assign Constant6_out1_re[123] = 16'sb1100000001111011;
  assign Constant6_out1_im[123] = 16'sb1111100000101010;
  assign Constant6_out1_re[124] = 16'sb1100000001001111;
  assign Constant6_out1_im[124] = 16'sb1111100110111010;
  assign Constant6_out1_re[125] = 16'sb1100000000101100;
  assign Constant6_out1_im[125] = 16'sb1111101101001011;
  assign Constant6_out1_re[126] = 16'sb1100000000010100;
  assign Constant6_out1_im[126] = 16'sb1111110011011100;
  assign Constant6_out1_re[127] = 16'sb1100000000000101;
  assign Constant6_out1_im[127] = 16'sb1111111001101110;
  assign Constant6_out1_re[128] = 16'sb0100000000000000;
  assign Constant6_out1_im[128] = 16'sb0000000000000000;
  assign Constant6_out1_re[129] = 16'sb0011111111101100;
  assign Constant6_out1_im[129] = 16'sb1111110011011100;
  assign Constant6_out1_re[130] = 16'sb0011111110110001;
  assign Constant6_out1_im[130] = 16'sb1111100110111010;
  assign Constant6_out1_re[131] = 16'sb0011111101001111;
  assign Constant6_out1_im[131] = 16'sb1111011010011100;
  assign Constant6_out1_re[132] = 16'sb0011111011000101;
  assign Constant6_out1_im[132] = 16'sb1111001110000100;
  assign Constant6_out1_re[133] = 16'sb0011111000010101;
  assign Constant6_out1_im[133] = 16'sb1111000001110011;
  assign Constant6_out1_re[134] = 16'sb0011110100111111;
  assign Constant6_out1_im[134] = 16'sb1110110101101100;
  assign Constant6_out1_re[135] = 16'sb0011110001000010;
  assign Constant6_out1_im[135] = 16'sb1110101001110000;
  assign Constant6_out1_re[136] = 16'sb0011101100100001;
  assign Constant6_out1_im[136] = 16'sb1110011110000010;
  assign Constant6_out1_re[137] = 16'sb0011100111011011;
  assign Constant6_out1_im[137] = 16'sb1110010010100011;
  assign Constant6_out1_re[138] = 16'sb0011100001110001;
  assign Constant6_out1_im[138] = 16'sb1110000111010101;
  assign Constant6_out1_re[139] = 16'sb0011011011100101;
  assign Constant6_out1_im[139] = 16'sb1101111100011001;
  assign Constant6_out1_re[140] = 16'sb0011010100110111;
  assign Constant6_out1_im[140] = 16'sb1101110001110010;
  assign Constant6_out1_re[141] = 16'sb0011001101101000;
  assign Constant6_out1_im[141] = 16'sb1101100111100000;
  assign Constant6_out1_re[142] = 16'sb0011000101111001;
  assign Constant6_out1_im[142] = 16'sb1101011101100110;
  assign Constant6_out1_re[143] = 16'sb0010111101101100;
  assign Constant6_out1_im[143] = 16'sb1101010100000101;
  assign Constant6_out1_re[144] = 16'sb0010110101000001;
  assign Constant6_out1_im[144] = 16'sb1101001010111111;
  assign Constant6_out1_re[145] = 16'sb0010101011111011;
  assign Constant6_out1_im[145] = 16'sb1101000010010100;
  assign Constant6_out1_re[146] = 16'sb0010100010011010;
  assign Constant6_out1_im[146] = 16'sb1100111010000111;
  assign Constant6_out1_re[147] = 16'sb0010011000100000;
  assign Constant6_out1_im[147] = 16'sb1100110010011000;
  assign Constant6_out1_re[148] = 16'sb0010001110001110;
  assign Constant6_out1_im[148] = 16'sb1100101011001001;
  assign Constant6_out1_re[149] = 16'sb0010000011100111;
  assign Constant6_out1_im[149] = 16'sb1100100100011011;
  assign Constant6_out1_re[150] = 16'sb0001111000101011;
  assign Constant6_out1_im[150] = 16'sb1100011110001111;
  assign Constant6_out1_re[151] = 16'sb0001101101011101;
  assign Constant6_out1_im[151] = 16'sb1100011000100101;
  assign Constant6_out1_re[152] = 16'sb0001100001111110;
  assign Constant6_out1_im[152] = 16'sb1100010011011111;
  assign Constant6_out1_re[153] = 16'sb0001010110010000;
  assign Constant6_out1_im[153] = 16'sb1100001110111110;
  assign Constant6_out1_re[154] = 16'sb0001001010010100;
  assign Constant6_out1_im[154] = 16'sb1100001011000001;
  assign Constant6_out1_re[155] = 16'sb0000111110001101;
  assign Constant6_out1_im[155] = 16'sb1100000111101011;
  assign Constant6_out1_re[156] = 16'sb0000110001111100;
  assign Constant6_out1_im[156] = 16'sb1100000100111011;
  assign Constant6_out1_re[157] = 16'sb0000100101100100;
  assign Constant6_out1_im[157] = 16'sb1100000010110001;
  assign Constant6_out1_re[158] = 16'sb0000011001000110;
  assign Constant6_out1_im[158] = 16'sb1100000001001111;
  assign Constant6_out1_re[159] = 16'sb0000001100100100;
  assign Constant6_out1_im[159] = 16'sb1100000000010100;
  assign Constant6_out1_re[160] = 16'sb0000000000000000;
  assign Constant6_out1_im[160] = 16'sb1100000000000000;
  assign Constant6_out1_re[161] = 16'sb1111110011011100;
  assign Constant6_out1_im[161] = 16'sb1100000000010100;
  assign Constant6_out1_re[162] = 16'sb1111100110111010;
  assign Constant6_out1_im[162] = 16'sb1100000001001111;
  assign Constant6_out1_re[163] = 16'sb1111011010011100;
  assign Constant6_out1_im[163] = 16'sb1100000010110001;
  assign Constant6_out1_re[164] = 16'sb1111001110000100;
  assign Constant6_out1_im[164] = 16'sb1100000100111011;
  assign Constant6_out1_re[165] = 16'sb1111000001110011;
  assign Constant6_out1_im[165] = 16'sb1100000111101011;
  assign Constant6_out1_re[166] = 16'sb1110110101101100;
  assign Constant6_out1_im[166] = 16'sb1100001011000001;
  assign Constant6_out1_re[167] = 16'sb1110101001110000;
  assign Constant6_out1_im[167] = 16'sb1100001110111110;
  assign Constant6_out1_re[168] = 16'sb1110011110000010;
  assign Constant6_out1_im[168] = 16'sb1100010011011111;
  assign Constant6_out1_re[169] = 16'sb1110010010100011;
  assign Constant6_out1_im[169] = 16'sb1100011000100101;
  assign Constant6_out1_re[170] = 16'sb1110000111010101;
  assign Constant6_out1_im[170] = 16'sb1100011110001111;
  assign Constant6_out1_re[171] = 16'sb1101111100011001;
  assign Constant6_out1_im[171] = 16'sb1100100100011011;
  assign Constant6_out1_re[172] = 16'sb1101110001110010;
  assign Constant6_out1_im[172] = 16'sb1100101011001001;
  assign Constant6_out1_re[173] = 16'sb1101100111100000;
  assign Constant6_out1_im[173] = 16'sb1100110010011000;
  assign Constant6_out1_re[174] = 16'sb1101011101100110;
  assign Constant6_out1_im[174] = 16'sb1100111010000111;
  assign Constant6_out1_re[175] = 16'sb1101010100000101;
  assign Constant6_out1_im[175] = 16'sb1101000010010100;
  assign Constant6_out1_re[176] = 16'sb1101001010111111;
  assign Constant6_out1_im[176] = 16'sb1101001010111111;
  assign Constant6_out1_re[177] = 16'sb1101000010010100;
  assign Constant6_out1_im[177] = 16'sb1101010100000101;
  assign Constant6_out1_re[178] = 16'sb1100111010000111;
  assign Constant6_out1_im[178] = 16'sb1101011101100110;
  assign Constant6_out1_re[179] = 16'sb1100110010011000;
  assign Constant6_out1_im[179] = 16'sb1101100111100000;
  assign Constant6_out1_re[180] = 16'sb1100101011001001;
  assign Constant6_out1_im[180] = 16'sb1101110001110010;
  assign Constant6_out1_re[181] = 16'sb1100100100011011;
  assign Constant6_out1_im[181] = 16'sb1101111100011001;
  assign Constant6_out1_re[182] = 16'sb1100011110001111;
  assign Constant6_out1_im[182] = 16'sb1110000111010101;
  assign Constant6_out1_re[183] = 16'sb1100011000100101;
  assign Constant6_out1_im[183] = 16'sb1110010010100011;
  assign Constant6_out1_re[184] = 16'sb1100010011011111;
  assign Constant6_out1_im[184] = 16'sb1110011110000010;
  assign Constant6_out1_re[185] = 16'sb1100001110111110;
  assign Constant6_out1_im[185] = 16'sb1110101001110000;
  assign Constant6_out1_re[186] = 16'sb1100001011000001;
  assign Constant6_out1_im[186] = 16'sb1110110101101100;
  assign Constant6_out1_re[187] = 16'sb1100000111101011;
  assign Constant6_out1_im[187] = 16'sb1111000001110011;
  assign Constant6_out1_re[188] = 16'sb1100000100111011;
  assign Constant6_out1_im[188] = 16'sb1111001110000100;
  assign Constant6_out1_re[189] = 16'sb1100000010110001;
  assign Constant6_out1_im[189] = 16'sb1111011010011100;
  assign Constant6_out1_re[190] = 16'sb1100000001001111;
  assign Constant6_out1_im[190] = 16'sb1111100110111010;
  assign Constant6_out1_re[191] = 16'sb1100000000010100;
  assign Constant6_out1_im[191] = 16'sb1111110011011100;
  assign Constant6_out1_re[192] = 16'sb0100000000000000;
  assign Constant6_out1_im[192] = 16'sb0000000000000000;
  assign Constant6_out1_re[193] = 16'sb0011111110110001;
  assign Constant6_out1_im[193] = 16'sb1111100110111010;
  assign Constant6_out1_re[194] = 16'sb0011111011000101;
  assign Constant6_out1_im[194] = 16'sb1111001110000100;
  assign Constant6_out1_re[195] = 16'sb0011110100111111;
  assign Constant6_out1_im[195] = 16'sb1110110101101100;
  assign Constant6_out1_re[196] = 16'sb0011101100100001;
  assign Constant6_out1_im[196] = 16'sb1110011110000010;
  assign Constant6_out1_re[197] = 16'sb0011100001110001;
  assign Constant6_out1_im[197] = 16'sb1110000111010101;
  assign Constant6_out1_re[198] = 16'sb0011010100110111;
  assign Constant6_out1_im[198] = 16'sb1101110001110010;
  assign Constant6_out1_re[199] = 16'sb0011000101111001;
  assign Constant6_out1_im[199] = 16'sb1101011101100110;
  assign Constant6_out1_re[200] = 16'sb0010110101000001;
  assign Constant6_out1_im[200] = 16'sb1101001010111111;
  assign Constant6_out1_re[201] = 16'sb0010100010011010;
  assign Constant6_out1_im[201] = 16'sb1100111010000111;
  assign Constant6_out1_re[202] = 16'sb0010001110001110;
  assign Constant6_out1_im[202] = 16'sb1100101011001001;
  assign Constant6_out1_re[203] = 16'sb0001111000101011;
  assign Constant6_out1_im[203] = 16'sb1100011110001111;
  assign Constant6_out1_re[204] = 16'sb0001100001111110;
  assign Constant6_out1_im[204] = 16'sb1100010011011111;
  assign Constant6_out1_re[205] = 16'sb0001001010010100;
  assign Constant6_out1_im[205] = 16'sb1100001011000001;
  assign Constant6_out1_re[206] = 16'sb0000110001111100;
  assign Constant6_out1_im[206] = 16'sb1100000100111011;
  assign Constant6_out1_re[207] = 16'sb0000011001000110;
  assign Constant6_out1_im[207] = 16'sb1100000001001111;
  assign Constant6_out1_re[208] = 16'sb0000000000000000;
  assign Constant6_out1_im[208] = 16'sb1100000000000000;
  assign Constant6_out1_re[209] = 16'sb1111100110111010;
  assign Constant6_out1_im[209] = 16'sb1100000001001111;
  assign Constant6_out1_re[210] = 16'sb1111001110000100;
  assign Constant6_out1_im[210] = 16'sb1100000100111011;
  assign Constant6_out1_re[211] = 16'sb1110110101101100;
  assign Constant6_out1_im[211] = 16'sb1100001011000001;
  assign Constant6_out1_re[212] = 16'sb1110011110000010;
  assign Constant6_out1_im[212] = 16'sb1100010011011111;
  assign Constant6_out1_re[213] = 16'sb1110000111010101;
  assign Constant6_out1_im[213] = 16'sb1100011110001111;
  assign Constant6_out1_re[214] = 16'sb1101110001110010;
  assign Constant6_out1_im[214] = 16'sb1100101011001001;
  assign Constant6_out1_re[215] = 16'sb1101011101100110;
  assign Constant6_out1_im[215] = 16'sb1100111010000111;
  assign Constant6_out1_re[216] = 16'sb1101001010111111;
  assign Constant6_out1_im[216] = 16'sb1101001010111111;
  assign Constant6_out1_re[217] = 16'sb1100111010000111;
  assign Constant6_out1_im[217] = 16'sb1101011101100110;
  assign Constant6_out1_re[218] = 16'sb1100101011001001;
  assign Constant6_out1_im[218] = 16'sb1101110001110010;
  assign Constant6_out1_re[219] = 16'sb1100011110001111;
  assign Constant6_out1_im[219] = 16'sb1110000111010101;
  assign Constant6_out1_re[220] = 16'sb1100010011011111;
  assign Constant6_out1_im[220] = 16'sb1110011110000010;
  assign Constant6_out1_re[221] = 16'sb1100001011000001;
  assign Constant6_out1_im[221] = 16'sb1110110101101100;
  assign Constant6_out1_re[222] = 16'sb1100000100111011;
  assign Constant6_out1_im[222] = 16'sb1111001110000100;
  assign Constant6_out1_re[223] = 16'sb1100000001001111;
  assign Constant6_out1_im[223] = 16'sb1111100110111010;
  assign Constant6_out1_re[224] = 16'sb0100000000000000;
  assign Constant6_out1_im[224] = 16'sb0000000000000000;
  assign Constant6_out1_re[225] = 16'sb0011111011000101;
  assign Constant6_out1_im[225] = 16'sb1111001110000100;
  assign Constant6_out1_re[226] = 16'sb0011101100100001;
  assign Constant6_out1_im[226] = 16'sb1110011110000010;
  assign Constant6_out1_re[227] = 16'sb0011010100110111;
  assign Constant6_out1_im[227] = 16'sb1101110001110010;
  assign Constant6_out1_re[228] = 16'sb0010110101000001;
  assign Constant6_out1_im[228] = 16'sb1101001010111111;
  assign Constant6_out1_re[229] = 16'sb0010001110001110;
  assign Constant6_out1_im[229] = 16'sb1100101011001001;
  assign Constant6_out1_re[230] = 16'sb0001100001111110;
  assign Constant6_out1_im[230] = 16'sb1100010011011111;
  assign Constant6_out1_re[231] = 16'sb0000110001111100;
  assign Constant6_out1_im[231] = 16'sb1100000100111011;
  assign Constant6_out1_re[232] = 16'sb0000000000000000;
  assign Constant6_out1_im[232] = 16'sb1100000000000000;
  assign Constant6_out1_re[233] = 16'sb1111001110000100;
  assign Constant6_out1_im[233] = 16'sb1100000100111011;
  assign Constant6_out1_re[234] = 16'sb1110011110000010;
  assign Constant6_out1_im[234] = 16'sb1100010011011111;
  assign Constant6_out1_re[235] = 16'sb1101110001110010;
  assign Constant6_out1_im[235] = 16'sb1100101011001001;
  assign Constant6_out1_re[236] = 16'sb1101001010111111;
  assign Constant6_out1_im[236] = 16'sb1101001010111111;
  assign Constant6_out1_re[237] = 16'sb1100101011001001;
  assign Constant6_out1_im[237] = 16'sb1101110001110010;
  assign Constant6_out1_re[238] = 16'sb1100010011011111;
  assign Constant6_out1_im[238] = 16'sb1110011110000010;
  assign Constant6_out1_re[239] = 16'sb1100000100111011;
  assign Constant6_out1_im[239] = 16'sb1111001110000100;
  assign Constant6_out1_re[240] = 16'sb0100000000000000;
  assign Constant6_out1_im[240] = 16'sb0000000000000000;
  assign Constant6_out1_re[241] = 16'sb0011101100100001;
  assign Constant6_out1_im[241] = 16'sb1110011110000010;
  assign Constant6_out1_re[242] = 16'sb0010110101000001;
  assign Constant6_out1_im[242] = 16'sb1101001010111111;
  assign Constant6_out1_re[243] = 16'sb0001100001111110;
  assign Constant6_out1_im[243] = 16'sb1100010011011111;
  assign Constant6_out1_re[244] = 16'sb0000000000000000;
  assign Constant6_out1_im[244] = 16'sb1100000000000000;
  assign Constant6_out1_re[245] = 16'sb1110011110000010;
  assign Constant6_out1_im[245] = 16'sb1100010011011111;
  assign Constant6_out1_re[246] = 16'sb1101001010111111;
  assign Constant6_out1_im[246] = 16'sb1101001010111111;
  assign Constant6_out1_re[247] = 16'sb1100010011011111;
  assign Constant6_out1_im[247] = 16'sb1110011110000010;
  assign Constant6_out1_re[248] = 16'sb0100000000000000;
  assign Constant6_out1_im[248] = 16'sb0000000000000000;
  assign Constant6_out1_re[249] = 16'sb0010110101000001;
  assign Constant6_out1_im[249] = 16'sb1101001010111111;
  assign Constant6_out1_re[250] = 16'sb0000000000000000;
  assign Constant6_out1_im[250] = 16'sb1100000000000000;
  assign Constant6_out1_re[251] = 16'sb1101001010111111;
  assign Constant6_out1_im[251] = 16'sb1101001010111111;



  MATLAB_LOOT u_MATLAB_LOOT (.u_0(addr[0]),  // ufix9
                             .u_1(addr[1]),  // ufix9
                             .u_2(addr[2]),  // ufix9
                             .u_3(addr[3]),  // ufix9
                             .u_4(addr[4]),  // ufix9
                             .u_5(addr[5]),  // ufix9
                             .WFFT_fix_re_0(Constant6_out1_re[0]),  // sfix16_En14
                             .WFFT_fix_re_1(Constant6_out1_re[1]),  // sfix16_En14
                             .WFFT_fix_re_2(Constant6_out1_re[2]),  // sfix16_En14
                             .WFFT_fix_re_3(Constant6_out1_re[3]),  // sfix16_En14
                             .WFFT_fix_re_4(Constant6_out1_re[4]),  // sfix16_En14
                             .WFFT_fix_re_5(Constant6_out1_re[5]),  // sfix16_En14
                             .WFFT_fix_re_6(Constant6_out1_re[6]),  // sfix16_En14
                             .WFFT_fix_re_7(Constant6_out1_re[7]),  // sfix16_En14
                             .WFFT_fix_re_8(Constant6_out1_re[8]),  // sfix16_En14
                             .WFFT_fix_re_9(Constant6_out1_re[9]),  // sfix16_En14
                             .WFFT_fix_re_10(Constant6_out1_re[10]),  // sfix16_En14
                             .WFFT_fix_re_11(Constant6_out1_re[11]),  // sfix16_En14
                             .WFFT_fix_re_12(Constant6_out1_re[12]),  // sfix16_En14
                             .WFFT_fix_re_13(Constant6_out1_re[13]),  // sfix16_En14
                             .WFFT_fix_re_14(Constant6_out1_re[14]),  // sfix16_En14
                             .WFFT_fix_re_15(Constant6_out1_re[15]),  // sfix16_En14
                             .WFFT_fix_re_16(Constant6_out1_re[16]),  // sfix16_En14
                             .WFFT_fix_re_17(Constant6_out1_re[17]),  // sfix16_En14
                             .WFFT_fix_re_18(Constant6_out1_re[18]),  // sfix16_En14
                             .WFFT_fix_re_19(Constant6_out1_re[19]),  // sfix16_En14
                             .WFFT_fix_re_20(Constant6_out1_re[20]),  // sfix16_En14
                             .WFFT_fix_re_21(Constant6_out1_re[21]),  // sfix16_En14
                             .WFFT_fix_re_22(Constant6_out1_re[22]),  // sfix16_En14
                             .WFFT_fix_re_23(Constant6_out1_re[23]),  // sfix16_En14
                             .WFFT_fix_re_24(Constant6_out1_re[24]),  // sfix16_En14
                             .WFFT_fix_re_25(Constant6_out1_re[25]),  // sfix16_En14
                             .WFFT_fix_re_26(Constant6_out1_re[26]),  // sfix16_En14
                             .WFFT_fix_re_27(Constant6_out1_re[27]),  // sfix16_En14
                             .WFFT_fix_re_28(Constant6_out1_re[28]),  // sfix16_En14
                             .WFFT_fix_re_29(Constant6_out1_re[29]),  // sfix16_En14
                             .WFFT_fix_re_30(Constant6_out1_re[30]),  // sfix16_En14
                             .WFFT_fix_re_31(Constant6_out1_re[31]),  // sfix16_En14
                             .WFFT_fix_re_32(Constant6_out1_re[32]),  // sfix16_En14
                             .WFFT_fix_re_33(Constant6_out1_re[33]),  // sfix16_En14
                             .WFFT_fix_re_34(Constant6_out1_re[34]),  // sfix16_En14
                             .WFFT_fix_re_35(Constant6_out1_re[35]),  // sfix16_En14
                             .WFFT_fix_re_36(Constant6_out1_re[36]),  // sfix16_En14
                             .WFFT_fix_re_37(Constant6_out1_re[37]),  // sfix16_En14
                             .WFFT_fix_re_38(Constant6_out1_re[38]),  // sfix16_En14
                             .WFFT_fix_re_39(Constant6_out1_re[39]),  // sfix16_En14
                             .WFFT_fix_re_40(Constant6_out1_re[40]),  // sfix16_En14
                             .WFFT_fix_re_41(Constant6_out1_re[41]),  // sfix16_En14
                             .WFFT_fix_re_42(Constant6_out1_re[42]),  // sfix16_En14
                             .WFFT_fix_re_43(Constant6_out1_re[43]),  // sfix16_En14
                             .WFFT_fix_re_44(Constant6_out1_re[44]),  // sfix16_En14
                             .WFFT_fix_re_45(Constant6_out1_re[45]),  // sfix16_En14
                             .WFFT_fix_re_46(Constant6_out1_re[46]),  // sfix16_En14
                             .WFFT_fix_re_47(Constant6_out1_re[47]),  // sfix16_En14
                             .WFFT_fix_re_48(Constant6_out1_re[48]),  // sfix16_En14
                             .WFFT_fix_re_49(Constant6_out1_re[49]),  // sfix16_En14
                             .WFFT_fix_re_50(Constant6_out1_re[50]),  // sfix16_En14
                             .WFFT_fix_re_51(Constant6_out1_re[51]),  // sfix16_En14
                             .WFFT_fix_re_52(Constant6_out1_re[52]),  // sfix16_En14
                             .WFFT_fix_re_53(Constant6_out1_re[53]),  // sfix16_En14
                             .WFFT_fix_re_54(Constant6_out1_re[54]),  // sfix16_En14
                             .WFFT_fix_re_55(Constant6_out1_re[55]),  // sfix16_En14
                             .WFFT_fix_re_56(Constant6_out1_re[56]),  // sfix16_En14
                             .WFFT_fix_re_57(Constant6_out1_re[57]),  // sfix16_En14
                             .WFFT_fix_re_58(Constant6_out1_re[58]),  // sfix16_En14
                             .WFFT_fix_re_59(Constant6_out1_re[59]),  // sfix16_En14
                             .WFFT_fix_re_60(Constant6_out1_re[60]),  // sfix16_En14
                             .WFFT_fix_re_61(Constant6_out1_re[61]),  // sfix16_En14
                             .WFFT_fix_re_62(Constant6_out1_re[62]),  // sfix16_En14
                             .WFFT_fix_re_63(Constant6_out1_re[63]),  // sfix16_En14
                             .WFFT_fix_re_64(Constant6_out1_re[64]),  // sfix16_En14
                             .WFFT_fix_re_65(Constant6_out1_re[65]),  // sfix16_En14
                             .WFFT_fix_re_66(Constant6_out1_re[66]),  // sfix16_En14
                             .WFFT_fix_re_67(Constant6_out1_re[67]),  // sfix16_En14
                             .WFFT_fix_re_68(Constant6_out1_re[68]),  // sfix16_En14
                             .WFFT_fix_re_69(Constant6_out1_re[69]),  // sfix16_En14
                             .WFFT_fix_re_70(Constant6_out1_re[70]),  // sfix16_En14
                             .WFFT_fix_re_71(Constant6_out1_re[71]),  // sfix16_En14
                             .WFFT_fix_re_72(Constant6_out1_re[72]),  // sfix16_En14
                             .WFFT_fix_re_73(Constant6_out1_re[73]),  // sfix16_En14
                             .WFFT_fix_re_74(Constant6_out1_re[74]),  // sfix16_En14
                             .WFFT_fix_re_75(Constant6_out1_re[75]),  // sfix16_En14
                             .WFFT_fix_re_76(Constant6_out1_re[76]),  // sfix16_En14
                             .WFFT_fix_re_77(Constant6_out1_re[77]),  // sfix16_En14
                             .WFFT_fix_re_78(Constant6_out1_re[78]),  // sfix16_En14
                             .WFFT_fix_re_79(Constant6_out1_re[79]),  // sfix16_En14
                             .WFFT_fix_re_80(Constant6_out1_re[80]),  // sfix16_En14
                             .WFFT_fix_re_81(Constant6_out1_re[81]),  // sfix16_En14
                             .WFFT_fix_re_82(Constant6_out1_re[82]),  // sfix16_En14
                             .WFFT_fix_re_83(Constant6_out1_re[83]),  // sfix16_En14
                             .WFFT_fix_re_84(Constant6_out1_re[84]),  // sfix16_En14
                             .WFFT_fix_re_85(Constant6_out1_re[85]),  // sfix16_En14
                             .WFFT_fix_re_86(Constant6_out1_re[86]),  // sfix16_En14
                             .WFFT_fix_re_87(Constant6_out1_re[87]),  // sfix16_En14
                             .WFFT_fix_re_88(Constant6_out1_re[88]),  // sfix16_En14
                             .WFFT_fix_re_89(Constant6_out1_re[89]),  // sfix16_En14
                             .WFFT_fix_re_90(Constant6_out1_re[90]),  // sfix16_En14
                             .WFFT_fix_re_91(Constant6_out1_re[91]),  // sfix16_En14
                             .WFFT_fix_re_92(Constant6_out1_re[92]),  // sfix16_En14
                             .WFFT_fix_re_93(Constant6_out1_re[93]),  // sfix16_En14
                             .WFFT_fix_re_94(Constant6_out1_re[94]),  // sfix16_En14
                             .WFFT_fix_re_95(Constant6_out1_re[95]),  // sfix16_En14
                             .WFFT_fix_re_96(Constant6_out1_re[96]),  // sfix16_En14
                             .WFFT_fix_re_97(Constant6_out1_re[97]),  // sfix16_En14
                             .WFFT_fix_re_98(Constant6_out1_re[98]),  // sfix16_En14
                             .WFFT_fix_re_99(Constant6_out1_re[99]),  // sfix16_En14
                             .WFFT_fix_re_100(Constant6_out1_re[100]),  // sfix16_En14
                             .WFFT_fix_re_101(Constant6_out1_re[101]),  // sfix16_En14
                             .WFFT_fix_re_102(Constant6_out1_re[102]),  // sfix16_En14
                             .WFFT_fix_re_103(Constant6_out1_re[103]),  // sfix16_En14
                             .WFFT_fix_re_104(Constant6_out1_re[104]),  // sfix16_En14
                             .WFFT_fix_re_105(Constant6_out1_re[105]),  // sfix16_En14
                             .WFFT_fix_re_106(Constant6_out1_re[106]),  // sfix16_En14
                             .WFFT_fix_re_107(Constant6_out1_re[107]),  // sfix16_En14
                             .WFFT_fix_re_108(Constant6_out1_re[108]),  // sfix16_En14
                             .WFFT_fix_re_109(Constant6_out1_re[109]),  // sfix16_En14
                             .WFFT_fix_re_110(Constant6_out1_re[110]),  // sfix16_En14
                             .WFFT_fix_re_111(Constant6_out1_re[111]),  // sfix16_En14
                             .WFFT_fix_re_112(Constant6_out1_re[112]),  // sfix16_En14
                             .WFFT_fix_re_113(Constant6_out1_re[113]),  // sfix16_En14
                             .WFFT_fix_re_114(Constant6_out1_re[114]),  // sfix16_En14
                             .WFFT_fix_re_115(Constant6_out1_re[115]),  // sfix16_En14
                             .WFFT_fix_re_116(Constant6_out1_re[116]),  // sfix16_En14
                             .WFFT_fix_re_117(Constant6_out1_re[117]),  // sfix16_En14
                             .WFFT_fix_re_118(Constant6_out1_re[118]),  // sfix16_En14
                             .WFFT_fix_re_119(Constant6_out1_re[119]),  // sfix16_En14
                             .WFFT_fix_re_120(Constant6_out1_re[120]),  // sfix16_En14
                             .WFFT_fix_re_121(Constant6_out1_re[121]),  // sfix16_En14
                             .WFFT_fix_re_122(Constant6_out1_re[122]),  // sfix16_En14
                             .WFFT_fix_re_123(Constant6_out1_re[123]),  // sfix16_En14
                             .WFFT_fix_re_124(Constant6_out1_re[124]),  // sfix16_En14
                             .WFFT_fix_re_125(Constant6_out1_re[125]),  // sfix16_En14
                             .WFFT_fix_re_126(Constant6_out1_re[126]),  // sfix16_En14
                             .WFFT_fix_re_127(Constant6_out1_re[127]),  // sfix16_En14
                             .WFFT_fix_re_128(Constant6_out1_re[128]),  // sfix16_En14
                             .WFFT_fix_re_129(Constant6_out1_re[129]),  // sfix16_En14
                             .WFFT_fix_re_130(Constant6_out1_re[130]),  // sfix16_En14
                             .WFFT_fix_re_131(Constant6_out1_re[131]),  // sfix16_En14
                             .WFFT_fix_re_132(Constant6_out1_re[132]),  // sfix16_En14
                             .WFFT_fix_re_133(Constant6_out1_re[133]),  // sfix16_En14
                             .WFFT_fix_re_134(Constant6_out1_re[134]),  // sfix16_En14
                             .WFFT_fix_re_135(Constant6_out1_re[135]),  // sfix16_En14
                             .WFFT_fix_re_136(Constant6_out1_re[136]),  // sfix16_En14
                             .WFFT_fix_re_137(Constant6_out1_re[137]),  // sfix16_En14
                             .WFFT_fix_re_138(Constant6_out1_re[138]),  // sfix16_En14
                             .WFFT_fix_re_139(Constant6_out1_re[139]),  // sfix16_En14
                             .WFFT_fix_re_140(Constant6_out1_re[140]),  // sfix16_En14
                             .WFFT_fix_re_141(Constant6_out1_re[141]),  // sfix16_En14
                             .WFFT_fix_re_142(Constant6_out1_re[142]),  // sfix16_En14
                             .WFFT_fix_re_143(Constant6_out1_re[143]),  // sfix16_En14
                             .WFFT_fix_re_144(Constant6_out1_re[144]),  // sfix16_En14
                             .WFFT_fix_re_145(Constant6_out1_re[145]),  // sfix16_En14
                             .WFFT_fix_re_146(Constant6_out1_re[146]),  // sfix16_En14
                             .WFFT_fix_re_147(Constant6_out1_re[147]),  // sfix16_En14
                             .WFFT_fix_re_148(Constant6_out1_re[148]),  // sfix16_En14
                             .WFFT_fix_re_149(Constant6_out1_re[149]),  // sfix16_En14
                             .WFFT_fix_re_150(Constant6_out1_re[150]),  // sfix16_En14
                             .WFFT_fix_re_151(Constant6_out1_re[151]),  // sfix16_En14
                             .WFFT_fix_re_152(Constant6_out1_re[152]),  // sfix16_En14
                             .WFFT_fix_re_153(Constant6_out1_re[153]),  // sfix16_En14
                             .WFFT_fix_re_154(Constant6_out1_re[154]),  // sfix16_En14
                             .WFFT_fix_re_155(Constant6_out1_re[155]),  // sfix16_En14
                             .WFFT_fix_re_156(Constant6_out1_re[156]),  // sfix16_En14
                             .WFFT_fix_re_157(Constant6_out1_re[157]),  // sfix16_En14
                             .WFFT_fix_re_158(Constant6_out1_re[158]),  // sfix16_En14
                             .WFFT_fix_re_159(Constant6_out1_re[159]),  // sfix16_En14
                             .WFFT_fix_re_160(Constant6_out1_re[160]),  // sfix16_En14
                             .WFFT_fix_re_161(Constant6_out1_re[161]),  // sfix16_En14
                             .WFFT_fix_re_162(Constant6_out1_re[162]),  // sfix16_En14
                             .WFFT_fix_re_163(Constant6_out1_re[163]),  // sfix16_En14
                             .WFFT_fix_re_164(Constant6_out1_re[164]),  // sfix16_En14
                             .WFFT_fix_re_165(Constant6_out1_re[165]),  // sfix16_En14
                             .WFFT_fix_re_166(Constant6_out1_re[166]),  // sfix16_En14
                             .WFFT_fix_re_167(Constant6_out1_re[167]),  // sfix16_En14
                             .WFFT_fix_re_168(Constant6_out1_re[168]),  // sfix16_En14
                             .WFFT_fix_re_169(Constant6_out1_re[169]),  // sfix16_En14
                             .WFFT_fix_re_170(Constant6_out1_re[170]),  // sfix16_En14
                             .WFFT_fix_re_171(Constant6_out1_re[171]),  // sfix16_En14
                             .WFFT_fix_re_172(Constant6_out1_re[172]),  // sfix16_En14
                             .WFFT_fix_re_173(Constant6_out1_re[173]),  // sfix16_En14
                             .WFFT_fix_re_174(Constant6_out1_re[174]),  // sfix16_En14
                             .WFFT_fix_re_175(Constant6_out1_re[175]),  // sfix16_En14
                             .WFFT_fix_re_176(Constant6_out1_re[176]),  // sfix16_En14
                             .WFFT_fix_re_177(Constant6_out1_re[177]),  // sfix16_En14
                             .WFFT_fix_re_178(Constant6_out1_re[178]),  // sfix16_En14
                             .WFFT_fix_re_179(Constant6_out1_re[179]),  // sfix16_En14
                             .WFFT_fix_re_180(Constant6_out1_re[180]),  // sfix16_En14
                             .WFFT_fix_re_181(Constant6_out1_re[181]),  // sfix16_En14
                             .WFFT_fix_re_182(Constant6_out1_re[182]),  // sfix16_En14
                             .WFFT_fix_re_183(Constant6_out1_re[183]),  // sfix16_En14
                             .WFFT_fix_re_184(Constant6_out1_re[184]),  // sfix16_En14
                             .WFFT_fix_re_185(Constant6_out1_re[185]),  // sfix16_En14
                             .WFFT_fix_re_186(Constant6_out1_re[186]),  // sfix16_En14
                             .WFFT_fix_re_187(Constant6_out1_re[187]),  // sfix16_En14
                             .WFFT_fix_re_188(Constant6_out1_re[188]),  // sfix16_En14
                             .WFFT_fix_re_189(Constant6_out1_re[189]),  // sfix16_En14
                             .WFFT_fix_re_190(Constant6_out1_re[190]),  // sfix16_En14
                             .WFFT_fix_re_191(Constant6_out1_re[191]),  // sfix16_En14
                             .WFFT_fix_re_192(Constant6_out1_re[192]),  // sfix16_En14
                             .WFFT_fix_re_193(Constant6_out1_re[193]),  // sfix16_En14
                             .WFFT_fix_re_194(Constant6_out1_re[194]),  // sfix16_En14
                             .WFFT_fix_re_195(Constant6_out1_re[195]),  // sfix16_En14
                             .WFFT_fix_re_196(Constant6_out1_re[196]),  // sfix16_En14
                             .WFFT_fix_re_197(Constant6_out1_re[197]),  // sfix16_En14
                             .WFFT_fix_re_198(Constant6_out1_re[198]),  // sfix16_En14
                             .WFFT_fix_re_199(Constant6_out1_re[199]),  // sfix16_En14
                             .WFFT_fix_re_200(Constant6_out1_re[200]),  // sfix16_En14
                             .WFFT_fix_re_201(Constant6_out1_re[201]),  // sfix16_En14
                             .WFFT_fix_re_202(Constant6_out1_re[202]),  // sfix16_En14
                             .WFFT_fix_re_203(Constant6_out1_re[203]),  // sfix16_En14
                             .WFFT_fix_re_204(Constant6_out1_re[204]),  // sfix16_En14
                             .WFFT_fix_re_205(Constant6_out1_re[205]),  // sfix16_En14
                             .WFFT_fix_re_206(Constant6_out1_re[206]),  // sfix16_En14
                             .WFFT_fix_re_207(Constant6_out1_re[207]),  // sfix16_En14
                             .WFFT_fix_re_208(Constant6_out1_re[208]),  // sfix16_En14
                             .WFFT_fix_re_209(Constant6_out1_re[209]),  // sfix16_En14
                             .WFFT_fix_re_210(Constant6_out1_re[210]),  // sfix16_En14
                             .WFFT_fix_re_211(Constant6_out1_re[211]),  // sfix16_En14
                             .WFFT_fix_re_212(Constant6_out1_re[212]),  // sfix16_En14
                             .WFFT_fix_re_213(Constant6_out1_re[213]),  // sfix16_En14
                             .WFFT_fix_re_214(Constant6_out1_re[214]),  // sfix16_En14
                             .WFFT_fix_re_215(Constant6_out1_re[215]),  // sfix16_En14
                             .WFFT_fix_re_216(Constant6_out1_re[216]),  // sfix16_En14
                             .WFFT_fix_re_217(Constant6_out1_re[217]),  // sfix16_En14
                             .WFFT_fix_re_218(Constant6_out1_re[218]),  // sfix16_En14
                             .WFFT_fix_re_219(Constant6_out1_re[219]),  // sfix16_En14
                             .WFFT_fix_re_220(Constant6_out1_re[220]),  // sfix16_En14
                             .WFFT_fix_re_221(Constant6_out1_re[221]),  // sfix16_En14
                             .WFFT_fix_re_222(Constant6_out1_re[222]),  // sfix16_En14
                             .WFFT_fix_re_223(Constant6_out1_re[223]),  // sfix16_En14
                             .WFFT_fix_re_224(Constant6_out1_re[224]),  // sfix16_En14
                             .WFFT_fix_re_225(Constant6_out1_re[225]),  // sfix16_En14
                             .WFFT_fix_re_226(Constant6_out1_re[226]),  // sfix16_En14
                             .WFFT_fix_re_227(Constant6_out1_re[227]),  // sfix16_En14
                             .WFFT_fix_re_228(Constant6_out1_re[228]),  // sfix16_En14
                             .WFFT_fix_re_229(Constant6_out1_re[229]),  // sfix16_En14
                             .WFFT_fix_re_230(Constant6_out1_re[230]),  // sfix16_En14
                             .WFFT_fix_re_231(Constant6_out1_re[231]),  // sfix16_En14
                             .WFFT_fix_re_232(Constant6_out1_re[232]),  // sfix16_En14
                             .WFFT_fix_re_233(Constant6_out1_re[233]),  // sfix16_En14
                             .WFFT_fix_re_234(Constant6_out1_re[234]),  // sfix16_En14
                             .WFFT_fix_re_235(Constant6_out1_re[235]),  // sfix16_En14
                             .WFFT_fix_re_236(Constant6_out1_re[236]),  // sfix16_En14
                             .WFFT_fix_re_237(Constant6_out1_re[237]),  // sfix16_En14
                             .WFFT_fix_re_238(Constant6_out1_re[238]),  // sfix16_En14
                             .WFFT_fix_re_239(Constant6_out1_re[239]),  // sfix16_En14
                             .WFFT_fix_re_240(Constant6_out1_re[240]),  // sfix16_En14
                             .WFFT_fix_re_241(Constant6_out1_re[241]),  // sfix16_En14
                             .WFFT_fix_re_242(Constant6_out1_re[242]),  // sfix16_En14
                             .WFFT_fix_re_243(Constant6_out1_re[243]),  // sfix16_En14
                             .WFFT_fix_re_244(Constant6_out1_re[244]),  // sfix16_En14
                             .WFFT_fix_re_245(Constant6_out1_re[245]),  // sfix16_En14
                             .WFFT_fix_re_246(Constant6_out1_re[246]),  // sfix16_En14
                             .WFFT_fix_re_247(Constant6_out1_re[247]),  // sfix16_En14
                             .WFFT_fix_re_248(Constant6_out1_re[248]),  // sfix16_En14
                             .WFFT_fix_re_249(Constant6_out1_re[249]),  // sfix16_En14
                             .WFFT_fix_re_250(Constant6_out1_re[250]),  // sfix16_En14
                             .WFFT_fix_re_251(Constant6_out1_re[251]),  // sfix16_En14
                             .WFFT_fix_im_0(Constant6_out1_im[0]),  // sfix16_En14
                             .WFFT_fix_im_1(Constant6_out1_im[1]),  // sfix16_En14
                             .WFFT_fix_im_2(Constant6_out1_im[2]),  // sfix16_En14
                             .WFFT_fix_im_3(Constant6_out1_im[3]),  // sfix16_En14
                             .WFFT_fix_im_4(Constant6_out1_im[4]),  // sfix16_En14
                             .WFFT_fix_im_5(Constant6_out1_im[5]),  // sfix16_En14
                             .WFFT_fix_im_6(Constant6_out1_im[6]),  // sfix16_En14
                             .WFFT_fix_im_7(Constant6_out1_im[7]),  // sfix16_En14
                             .WFFT_fix_im_8(Constant6_out1_im[8]),  // sfix16_En14
                             .WFFT_fix_im_9(Constant6_out1_im[9]),  // sfix16_En14
                             .WFFT_fix_im_10(Constant6_out1_im[10]),  // sfix16_En14
                             .WFFT_fix_im_11(Constant6_out1_im[11]),  // sfix16_En14
                             .WFFT_fix_im_12(Constant6_out1_im[12]),  // sfix16_En14
                             .WFFT_fix_im_13(Constant6_out1_im[13]),  // sfix16_En14
                             .WFFT_fix_im_14(Constant6_out1_im[14]),  // sfix16_En14
                             .WFFT_fix_im_15(Constant6_out1_im[15]),  // sfix16_En14
                             .WFFT_fix_im_16(Constant6_out1_im[16]),  // sfix16_En14
                             .WFFT_fix_im_17(Constant6_out1_im[17]),  // sfix16_En14
                             .WFFT_fix_im_18(Constant6_out1_im[18]),  // sfix16_En14
                             .WFFT_fix_im_19(Constant6_out1_im[19]),  // sfix16_En14
                             .WFFT_fix_im_20(Constant6_out1_im[20]),  // sfix16_En14
                             .WFFT_fix_im_21(Constant6_out1_im[21]),  // sfix16_En14
                             .WFFT_fix_im_22(Constant6_out1_im[22]),  // sfix16_En14
                             .WFFT_fix_im_23(Constant6_out1_im[23]),  // sfix16_En14
                             .WFFT_fix_im_24(Constant6_out1_im[24]),  // sfix16_En14
                             .WFFT_fix_im_25(Constant6_out1_im[25]),  // sfix16_En14
                             .WFFT_fix_im_26(Constant6_out1_im[26]),  // sfix16_En14
                             .WFFT_fix_im_27(Constant6_out1_im[27]),  // sfix16_En14
                             .WFFT_fix_im_28(Constant6_out1_im[28]),  // sfix16_En14
                             .WFFT_fix_im_29(Constant6_out1_im[29]),  // sfix16_En14
                             .WFFT_fix_im_30(Constant6_out1_im[30]),  // sfix16_En14
                             .WFFT_fix_im_31(Constant6_out1_im[31]),  // sfix16_En14
                             .WFFT_fix_im_32(Constant6_out1_im[32]),  // sfix16_En14
                             .WFFT_fix_im_33(Constant6_out1_im[33]),  // sfix16_En14
                             .WFFT_fix_im_34(Constant6_out1_im[34]),  // sfix16_En14
                             .WFFT_fix_im_35(Constant6_out1_im[35]),  // sfix16_En14
                             .WFFT_fix_im_36(Constant6_out1_im[36]),  // sfix16_En14
                             .WFFT_fix_im_37(Constant6_out1_im[37]),  // sfix16_En14
                             .WFFT_fix_im_38(Constant6_out1_im[38]),  // sfix16_En14
                             .WFFT_fix_im_39(Constant6_out1_im[39]),  // sfix16_En14
                             .WFFT_fix_im_40(Constant6_out1_im[40]),  // sfix16_En14
                             .WFFT_fix_im_41(Constant6_out1_im[41]),  // sfix16_En14
                             .WFFT_fix_im_42(Constant6_out1_im[42]),  // sfix16_En14
                             .WFFT_fix_im_43(Constant6_out1_im[43]),  // sfix16_En14
                             .WFFT_fix_im_44(Constant6_out1_im[44]),  // sfix16_En14
                             .WFFT_fix_im_45(Constant6_out1_im[45]),  // sfix16_En14
                             .WFFT_fix_im_46(Constant6_out1_im[46]),  // sfix16_En14
                             .WFFT_fix_im_47(Constant6_out1_im[47]),  // sfix16_En14
                             .WFFT_fix_im_48(Constant6_out1_im[48]),  // sfix16_En14
                             .WFFT_fix_im_49(Constant6_out1_im[49]),  // sfix16_En14
                             .WFFT_fix_im_50(Constant6_out1_im[50]),  // sfix16_En14
                             .WFFT_fix_im_51(Constant6_out1_im[51]),  // sfix16_En14
                             .WFFT_fix_im_52(Constant6_out1_im[52]),  // sfix16_En14
                             .WFFT_fix_im_53(Constant6_out1_im[53]),  // sfix16_En14
                             .WFFT_fix_im_54(Constant6_out1_im[54]),  // sfix16_En14
                             .WFFT_fix_im_55(Constant6_out1_im[55]),  // sfix16_En14
                             .WFFT_fix_im_56(Constant6_out1_im[56]),  // sfix16_En14
                             .WFFT_fix_im_57(Constant6_out1_im[57]),  // sfix16_En14
                             .WFFT_fix_im_58(Constant6_out1_im[58]),  // sfix16_En14
                             .WFFT_fix_im_59(Constant6_out1_im[59]),  // sfix16_En14
                             .WFFT_fix_im_60(Constant6_out1_im[60]),  // sfix16_En14
                             .WFFT_fix_im_61(Constant6_out1_im[61]),  // sfix16_En14
                             .WFFT_fix_im_62(Constant6_out1_im[62]),  // sfix16_En14
                             .WFFT_fix_im_63(Constant6_out1_im[63]),  // sfix16_En14
                             .WFFT_fix_im_64(Constant6_out1_im[64]),  // sfix16_En14
                             .WFFT_fix_im_65(Constant6_out1_im[65]),  // sfix16_En14
                             .WFFT_fix_im_66(Constant6_out1_im[66]),  // sfix16_En14
                             .WFFT_fix_im_67(Constant6_out1_im[67]),  // sfix16_En14
                             .WFFT_fix_im_68(Constant6_out1_im[68]),  // sfix16_En14
                             .WFFT_fix_im_69(Constant6_out1_im[69]),  // sfix16_En14
                             .WFFT_fix_im_70(Constant6_out1_im[70]),  // sfix16_En14
                             .WFFT_fix_im_71(Constant6_out1_im[71]),  // sfix16_En14
                             .WFFT_fix_im_72(Constant6_out1_im[72]),  // sfix16_En14
                             .WFFT_fix_im_73(Constant6_out1_im[73]),  // sfix16_En14
                             .WFFT_fix_im_74(Constant6_out1_im[74]),  // sfix16_En14
                             .WFFT_fix_im_75(Constant6_out1_im[75]),  // sfix16_En14
                             .WFFT_fix_im_76(Constant6_out1_im[76]),  // sfix16_En14
                             .WFFT_fix_im_77(Constant6_out1_im[77]),  // sfix16_En14
                             .WFFT_fix_im_78(Constant6_out1_im[78]),  // sfix16_En14
                             .WFFT_fix_im_79(Constant6_out1_im[79]),  // sfix16_En14
                             .WFFT_fix_im_80(Constant6_out1_im[80]),  // sfix16_En14
                             .WFFT_fix_im_81(Constant6_out1_im[81]),  // sfix16_En14
                             .WFFT_fix_im_82(Constant6_out1_im[82]),  // sfix16_En14
                             .WFFT_fix_im_83(Constant6_out1_im[83]),  // sfix16_En14
                             .WFFT_fix_im_84(Constant6_out1_im[84]),  // sfix16_En14
                             .WFFT_fix_im_85(Constant6_out1_im[85]),  // sfix16_En14
                             .WFFT_fix_im_86(Constant6_out1_im[86]),  // sfix16_En14
                             .WFFT_fix_im_87(Constant6_out1_im[87]),  // sfix16_En14
                             .WFFT_fix_im_88(Constant6_out1_im[88]),  // sfix16_En14
                             .WFFT_fix_im_89(Constant6_out1_im[89]),  // sfix16_En14
                             .WFFT_fix_im_90(Constant6_out1_im[90]),  // sfix16_En14
                             .WFFT_fix_im_91(Constant6_out1_im[91]),  // sfix16_En14
                             .WFFT_fix_im_92(Constant6_out1_im[92]),  // sfix16_En14
                             .WFFT_fix_im_93(Constant6_out1_im[93]),  // sfix16_En14
                             .WFFT_fix_im_94(Constant6_out1_im[94]),  // sfix16_En14
                             .WFFT_fix_im_95(Constant6_out1_im[95]),  // sfix16_En14
                             .WFFT_fix_im_96(Constant6_out1_im[96]),  // sfix16_En14
                             .WFFT_fix_im_97(Constant6_out1_im[97]),  // sfix16_En14
                             .WFFT_fix_im_98(Constant6_out1_im[98]),  // sfix16_En14
                             .WFFT_fix_im_99(Constant6_out1_im[99]),  // sfix16_En14
                             .WFFT_fix_im_100(Constant6_out1_im[100]),  // sfix16_En14
                             .WFFT_fix_im_101(Constant6_out1_im[101]),  // sfix16_En14
                             .WFFT_fix_im_102(Constant6_out1_im[102]),  // sfix16_En14
                             .WFFT_fix_im_103(Constant6_out1_im[103]),  // sfix16_En14
                             .WFFT_fix_im_104(Constant6_out1_im[104]),  // sfix16_En14
                             .WFFT_fix_im_105(Constant6_out1_im[105]),  // sfix16_En14
                             .WFFT_fix_im_106(Constant6_out1_im[106]),  // sfix16_En14
                             .WFFT_fix_im_107(Constant6_out1_im[107]),  // sfix16_En14
                             .WFFT_fix_im_108(Constant6_out1_im[108]),  // sfix16_En14
                             .WFFT_fix_im_109(Constant6_out1_im[109]),  // sfix16_En14
                             .WFFT_fix_im_110(Constant6_out1_im[110]),  // sfix16_En14
                             .WFFT_fix_im_111(Constant6_out1_im[111]),  // sfix16_En14
                             .WFFT_fix_im_112(Constant6_out1_im[112]),  // sfix16_En14
                             .WFFT_fix_im_113(Constant6_out1_im[113]),  // sfix16_En14
                             .WFFT_fix_im_114(Constant6_out1_im[114]),  // sfix16_En14
                             .WFFT_fix_im_115(Constant6_out1_im[115]),  // sfix16_En14
                             .WFFT_fix_im_116(Constant6_out1_im[116]),  // sfix16_En14
                             .WFFT_fix_im_117(Constant6_out1_im[117]),  // sfix16_En14
                             .WFFT_fix_im_118(Constant6_out1_im[118]),  // sfix16_En14
                             .WFFT_fix_im_119(Constant6_out1_im[119]),  // sfix16_En14
                             .WFFT_fix_im_120(Constant6_out1_im[120]),  // sfix16_En14
                             .WFFT_fix_im_121(Constant6_out1_im[121]),  // sfix16_En14
                             .WFFT_fix_im_122(Constant6_out1_im[122]),  // sfix16_En14
                             .WFFT_fix_im_123(Constant6_out1_im[123]),  // sfix16_En14
                             .WFFT_fix_im_124(Constant6_out1_im[124]),  // sfix16_En14
                             .WFFT_fix_im_125(Constant6_out1_im[125]),  // sfix16_En14
                             .WFFT_fix_im_126(Constant6_out1_im[126]),  // sfix16_En14
                             .WFFT_fix_im_127(Constant6_out1_im[127]),  // sfix16_En14
                             .WFFT_fix_im_128(Constant6_out1_im[128]),  // sfix16_En14
                             .WFFT_fix_im_129(Constant6_out1_im[129]),  // sfix16_En14
                             .WFFT_fix_im_130(Constant6_out1_im[130]),  // sfix16_En14
                             .WFFT_fix_im_131(Constant6_out1_im[131]),  // sfix16_En14
                             .WFFT_fix_im_132(Constant6_out1_im[132]),  // sfix16_En14
                             .WFFT_fix_im_133(Constant6_out1_im[133]),  // sfix16_En14
                             .WFFT_fix_im_134(Constant6_out1_im[134]),  // sfix16_En14
                             .WFFT_fix_im_135(Constant6_out1_im[135]),  // sfix16_En14
                             .WFFT_fix_im_136(Constant6_out1_im[136]),  // sfix16_En14
                             .WFFT_fix_im_137(Constant6_out1_im[137]),  // sfix16_En14
                             .WFFT_fix_im_138(Constant6_out1_im[138]),  // sfix16_En14
                             .WFFT_fix_im_139(Constant6_out1_im[139]),  // sfix16_En14
                             .WFFT_fix_im_140(Constant6_out1_im[140]),  // sfix16_En14
                             .WFFT_fix_im_141(Constant6_out1_im[141]),  // sfix16_En14
                             .WFFT_fix_im_142(Constant6_out1_im[142]),  // sfix16_En14
                             .WFFT_fix_im_143(Constant6_out1_im[143]),  // sfix16_En14
                             .WFFT_fix_im_144(Constant6_out1_im[144]),  // sfix16_En14
                             .WFFT_fix_im_145(Constant6_out1_im[145]),  // sfix16_En14
                             .WFFT_fix_im_146(Constant6_out1_im[146]),  // sfix16_En14
                             .WFFT_fix_im_147(Constant6_out1_im[147]),  // sfix16_En14
                             .WFFT_fix_im_148(Constant6_out1_im[148]),  // sfix16_En14
                             .WFFT_fix_im_149(Constant6_out1_im[149]),  // sfix16_En14
                             .WFFT_fix_im_150(Constant6_out1_im[150]),  // sfix16_En14
                             .WFFT_fix_im_151(Constant6_out1_im[151]),  // sfix16_En14
                             .WFFT_fix_im_152(Constant6_out1_im[152]),  // sfix16_En14
                             .WFFT_fix_im_153(Constant6_out1_im[153]),  // sfix16_En14
                             .WFFT_fix_im_154(Constant6_out1_im[154]),  // sfix16_En14
                             .WFFT_fix_im_155(Constant6_out1_im[155]),  // sfix16_En14
                             .WFFT_fix_im_156(Constant6_out1_im[156]),  // sfix16_En14
                             .WFFT_fix_im_157(Constant6_out1_im[157]),  // sfix16_En14
                             .WFFT_fix_im_158(Constant6_out1_im[158]),  // sfix16_En14
                             .WFFT_fix_im_159(Constant6_out1_im[159]),  // sfix16_En14
                             .WFFT_fix_im_160(Constant6_out1_im[160]),  // sfix16_En14
                             .WFFT_fix_im_161(Constant6_out1_im[161]),  // sfix16_En14
                             .WFFT_fix_im_162(Constant6_out1_im[162]),  // sfix16_En14
                             .WFFT_fix_im_163(Constant6_out1_im[163]),  // sfix16_En14
                             .WFFT_fix_im_164(Constant6_out1_im[164]),  // sfix16_En14
                             .WFFT_fix_im_165(Constant6_out1_im[165]),  // sfix16_En14
                             .WFFT_fix_im_166(Constant6_out1_im[166]),  // sfix16_En14
                             .WFFT_fix_im_167(Constant6_out1_im[167]),  // sfix16_En14
                             .WFFT_fix_im_168(Constant6_out1_im[168]),  // sfix16_En14
                             .WFFT_fix_im_169(Constant6_out1_im[169]),  // sfix16_En14
                             .WFFT_fix_im_170(Constant6_out1_im[170]),  // sfix16_En14
                             .WFFT_fix_im_171(Constant6_out1_im[171]),  // sfix16_En14
                             .WFFT_fix_im_172(Constant6_out1_im[172]),  // sfix16_En14
                             .WFFT_fix_im_173(Constant6_out1_im[173]),  // sfix16_En14
                             .WFFT_fix_im_174(Constant6_out1_im[174]),  // sfix16_En14
                             .WFFT_fix_im_175(Constant6_out1_im[175]),  // sfix16_En14
                             .WFFT_fix_im_176(Constant6_out1_im[176]),  // sfix16_En14
                             .WFFT_fix_im_177(Constant6_out1_im[177]),  // sfix16_En14
                             .WFFT_fix_im_178(Constant6_out1_im[178]),  // sfix16_En14
                             .WFFT_fix_im_179(Constant6_out1_im[179]),  // sfix16_En14
                             .WFFT_fix_im_180(Constant6_out1_im[180]),  // sfix16_En14
                             .WFFT_fix_im_181(Constant6_out1_im[181]),  // sfix16_En14
                             .WFFT_fix_im_182(Constant6_out1_im[182]),  // sfix16_En14
                             .WFFT_fix_im_183(Constant6_out1_im[183]),  // sfix16_En14
                             .WFFT_fix_im_184(Constant6_out1_im[184]),  // sfix16_En14
                             .WFFT_fix_im_185(Constant6_out1_im[185]),  // sfix16_En14
                             .WFFT_fix_im_186(Constant6_out1_im[186]),  // sfix16_En14
                             .WFFT_fix_im_187(Constant6_out1_im[187]),  // sfix16_En14
                             .WFFT_fix_im_188(Constant6_out1_im[188]),  // sfix16_En14
                             .WFFT_fix_im_189(Constant6_out1_im[189]),  // sfix16_En14
                             .WFFT_fix_im_190(Constant6_out1_im[190]),  // sfix16_En14
                             .WFFT_fix_im_191(Constant6_out1_im[191]),  // sfix16_En14
                             .WFFT_fix_im_192(Constant6_out1_im[192]),  // sfix16_En14
                             .WFFT_fix_im_193(Constant6_out1_im[193]),  // sfix16_En14
                             .WFFT_fix_im_194(Constant6_out1_im[194]),  // sfix16_En14
                             .WFFT_fix_im_195(Constant6_out1_im[195]),  // sfix16_En14
                             .WFFT_fix_im_196(Constant6_out1_im[196]),  // sfix16_En14
                             .WFFT_fix_im_197(Constant6_out1_im[197]),  // sfix16_En14
                             .WFFT_fix_im_198(Constant6_out1_im[198]),  // sfix16_En14
                             .WFFT_fix_im_199(Constant6_out1_im[199]),  // sfix16_En14
                             .WFFT_fix_im_200(Constant6_out1_im[200]),  // sfix16_En14
                             .WFFT_fix_im_201(Constant6_out1_im[201]),  // sfix16_En14
                             .WFFT_fix_im_202(Constant6_out1_im[202]),  // sfix16_En14
                             .WFFT_fix_im_203(Constant6_out1_im[203]),  // sfix16_En14
                             .WFFT_fix_im_204(Constant6_out1_im[204]),  // sfix16_En14
                             .WFFT_fix_im_205(Constant6_out1_im[205]),  // sfix16_En14
                             .WFFT_fix_im_206(Constant6_out1_im[206]),  // sfix16_En14
                             .WFFT_fix_im_207(Constant6_out1_im[207]),  // sfix16_En14
                             .WFFT_fix_im_208(Constant6_out1_im[208]),  // sfix16_En14
                             .WFFT_fix_im_209(Constant6_out1_im[209]),  // sfix16_En14
                             .WFFT_fix_im_210(Constant6_out1_im[210]),  // sfix16_En14
                             .WFFT_fix_im_211(Constant6_out1_im[211]),  // sfix16_En14
                             .WFFT_fix_im_212(Constant6_out1_im[212]),  // sfix16_En14
                             .WFFT_fix_im_213(Constant6_out1_im[213]),  // sfix16_En14
                             .WFFT_fix_im_214(Constant6_out1_im[214]),  // sfix16_En14
                             .WFFT_fix_im_215(Constant6_out1_im[215]),  // sfix16_En14
                             .WFFT_fix_im_216(Constant6_out1_im[216]),  // sfix16_En14
                             .WFFT_fix_im_217(Constant6_out1_im[217]),  // sfix16_En14
                             .WFFT_fix_im_218(Constant6_out1_im[218]),  // sfix16_En14
                             .WFFT_fix_im_219(Constant6_out1_im[219]),  // sfix16_En14
                             .WFFT_fix_im_220(Constant6_out1_im[220]),  // sfix16_En14
                             .WFFT_fix_im_221(Constant6_out1_im[221]),  // sfix16_En14
                             .WFFT_fix_im_222(Constant6_out1_im[222]),  // sfix16_En14
                             .WFFT_fix_im_223(Constant6_out1_im[223]),  // sfix16_En14
                             .WFFT_fix_im_224(Constant6_out1_im[224]),  // sfix16_En14
                             .WFFT_fix_im_225(Constant6_out1_im[225]),  // sfix16_En14
                             .WFFT_fix_im_226(Constant6_out1_im[226]),  // sfix16_En14
                             .WFFT_fix_im_227(Constant6_out1_im[227]),  // sfix16_En14
                             .WFFT_fix_im_228(Constant6_out1_im[228]),  // sfix16_En14
                             .WFFT_fix_im_229(Constant6_out1_im[229]),  // sfix16_En14
                             .WFFT_fix_im_230(Constant6_out1_im[230]),  // sfix16_En14
                             .WFFT_fix_im_231(Constant6_out1_im[231]),  // sfix16_En14
                             .WFFT_fix_im_232(Constant6_out1_im[232]),  // sfix16_En14
                             .WFFT_fix_im_233(Constant6_out1_im[233]),  // sfix16_En14
                             .WFFT_fix_im_234(Constant6_out1_im[234]),  // sfix16_En14
                             .WFFT_fix_im_235(Constant6_out1_im[235]),  // sfix16_En14
                             .WFFT_fix_im_236(Constant6_out1_im[236]),  // sfix16_En14
                             .WFFT_fix_im_237(Constant6_out1_im[237]),  // sfix16_En14
                             .WFFT_fix_im_238(Constant6_out1_im[238]),  // sfix16_En14
                             .WFFT_fix_im_239(Constant6_out1_im[239]),  // sfix16_En14
                             .WFFT_fix_im_240(Constant6_out1_im[240]),  // sfix16_En14
                             .WFFT_fix_im_241(Constant6_out1_im[241]),  // sfix16_En14
                             .WFFT_fix_im_242(Constant6_out1_im[242]),  // sfix16_En14
                             .WFFT_fix_im_243(Constant6_out1_im[243]),  // sfix16_En14
                             .WFFT_fix_im_244(Constant6_out1_im[244]),  // sfix16_En14
                             .WFFT_fix_im_245(Constant6_out1_im[245]),  // sfix16_En14
                             .WFFT_fix_im_246(Constant6_out1_im[246]),  // sfix16_En14
                             .WFFT_fix_im_247(Constant6_out1_im[247]),  // sfix16_En14
                             .WFFT_fix_im_248(Constant6_out1_im[248]),  // sfix16_En14
                             .WFFT_fix_im_249(Constant6_out1_im[249]),  // sfix16_En14
                             .WFFT_fix_im_250(Constant6_out1_im[250]),  // sfix16_En14
                             .WFFT_fix_im_251(Constant6_out1_im[251]),  // sfix16_En14
                             .y_re_0(y_re_0),  // sfix16_En14
                             .y_re_1(y_re_1),  // sfix16_En14
                             .y_re_2(y_re_2),  // sfix16_En14
                             .y_re_3(y_re_3),  // sfix16_En14
                             .y_re_4(y_re_4),  // sfix16_En14
                             .y_re_5(y_re_5),  // sfix16_En14
                             .y_im_0(y_im_0),  // sfix16_En14
                             .y_im_1(y_im_1),  // sfix16_En14
                             .y_im_2(y_im_2),  // sfix16_En14
                             .y_im_3(y_im_3),  // sfix16_En14
                             .y_im_4(y_im_4),  // sfix16_En14
                             .y_im_5(y_im_5)  // sfix16_En14
                             );

  assign y_re[0] = y_re_0;
  assign y_re[1] = y_re_1;
  assign y_re[2] = y_re_2;
  assign y_re[3] = y_re_3;
  assign y_re[4] = y_re_4;
  assign y_re[5] = y_re_5;

  assign y_im[0] = y_im_0;
  assign y_im[1] = y_im_1;
  assign y_im[2] = y_im_2;
  assign y_im[3] = y_im_3;
  assign y_im[4] = y_im_4;
  assign y_im[5] = y_im_5;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_bypass_delay_re[0] <= 16'sb0000000000000000;
        Delay4_bypass_delay_im[0] <= 16'sb0000000000000000;
        Delay4_bypass_delay_re[1] <= 16'sb0000000000000000;
        Delay4_bypass_delay_im[1] <= 16'sb0000000000000000;
        Delay4_bypass_delay_re[2] <= 16'sb0000000000000000;
        Delay4_bypass_delay_im[2] <= 16'sb0000000000000000;
        Delay4_bypass_delay_re[3] <= 16'sb0000000000000000;
        Delay4_bypass_delay_im[3] <= 16'sb0000000000000000;
        Delay4_bypass_delay_re[4] <= 16'sb0000000000000000;
        Delay4_bypass_delay_im[4] <= 16'sb0000000000000000;
        Delay4_bypass_delay_re[5] <= 16'sb0000000000000000;
        Delay4_bypass_delay_im[5] <= 16'sb0000000000000000;
        Delay4_reg_re[0] <= 16'sb0000000000000000;
        Delay4_reg_im[0] <= 16'sb0000000000000000;
        Delay4_reg_re[1] <= 16'sb0000000000000000;
        Delay4_reg_im[1] <= 16'sb0000000000000000;
        Delay4_reg_re[2] <= 16'sb0000000000000000;
        Delay4_reg_im[2] <= 16'sb0000000000000000;
        Delay4_reg_re[3] <= 16'sb0000000000000000;
        Delay4_reg_im[3] <= 16'sb0000000000000000;
        Delay4_reg_re[4] <= 16'sb0000000000000000;
        Delay4_reg_im[4] <= 16'sb0000000000000000;
        Delay4_reg_re[5] <= 16'sb0000000000000000;
        Delay4_reg_im[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay4_bypass_delay_re[0] <= Delay4_bypass_delay_next_re[0];
          Delay4_bypass_delay_im[0] <= Delay4_bypass_delay_next_im[0];
          Delay4_bypass_delay_re[1] <= Delay4_bypass_delay_next_re[1];
          Delay4_bypass_delay_im[1] <= Delay4_bypass_delay_next_im[1];
          Delay4_bypass_delay_re[2] <= Delay4_bypass_delay_next_re[2];
          Delay4_bypass_delay_im[2] <= Delay4_bypass_delay_next_im[2];
          Delay4_bypass_delay_re[3] <= Delay4_bypass_delay_next_re[3];
          Delay4_bypass_delay_im[3] <= Delay4_bypass_delay_next_im[3];
          Delay4_bypass_delay_re[4] <= Delay4_bypass_delay_next_re[4];
          Delay4_bypass_delay_im[4] <= Delay4_bypass_delay_next_im[4];
          Delay4_bypass_delay_re[5] <= Delay4_bypass_delay_next_re[5];
          Delay4_bypass_delay_im[5] <= Delay4_bypass_delay_next_im[5];
          Delay4_reg_re[0] <= Delay4_reg_next_re[0];
          Delay4_reg_im[0] <= Delay4_reg_next_im[0];
          Delay4_reg_re[1] <= Delay4_reg_next_re[1];
          Delay4_reg_im[1] <= Delay4_reg_next_im[1];
          Delay4_reg_re[2] <= Delay4_reg_next_re[2];
          Delay4_reg_im[2] <= Delay4_reg_next_im[2];
          Delay4_reg_re[3] <= Delay4_reg_next_re[3];
          Delay4_reg_im[3] <= Delay4_reg_next_im[3];
          Delay4_reg_re[4] <= Delay4_reg_next_re[4];
          Delay4_reg_im[4] <= Delay4_reg_next_im[4];
          Delay4_reg_re[5] <= Delay4_reg_next_re[5];
          Delay4_reg_im[5] <= Delay4_reg_next_im[5];
        end
      end
    end

  assign MUX_re[0] = (ENA == 1'b1 ? Delay4_reg_re[0] :
              Delay4_bypass_delay_re[0]);
  assign MUX_re[1] = (ENA == 1'b1 ? Delay4_reg_re[1] :
              Delay4_bypass_delay_re[1]);
  assign MUX_re[2] = (ENA == 1'b1 ? Delay4_reg_re[2] :
              Delay4_bypass_delay_re[2]);
  assign MUX_re[3] = (ENA == 1'b1 ? Delay4_reg_re[3] :
              Delay4_bypass_delay_re[3]);
  assign MUX_re[4] = (ENA == 1'b1 ? Delay4_reg_re[4] :
              Delay4_bypass_delay_re[4]);
  assign MUX_re[5] = (ENA == 1'b1 ? Delay4_reg_re[5] :
              Delay4_bypass_delay_re[5]);
  assign MUX_im[0] = (ENA == 1'b1 ? Delay4_reg_im[0] :
              Delay4_bypass_delay_im[0]);
  assign MUX_im[1] = (ENA == 1'b1 ? Delay4_reg_im[1] :
              Delay4_bypass_delay_im[1]);
  assign MUX_im[2] = (ENA == 1'b1 ? Delay4_reg_im[2] :
              Delay4_bypass_delay_im[2]);
  assign MUX_im[3] = (ENA == 1'b1 ? Delay4_reg_im[3] :
              Delay4_bypass_delay_im[3]);
  assign MUX_im[4] = (ENA == 1'b1 ? Delay4_reg_im[4] :
              Delay4_bypass_delay_im[4]);
  assign MUX_im[5] = (ENA == 1'b1 ? Delay4_reg_im[5] :
              Delay4_bypass_delay_im[5]);
  assign Delay4_bypass_delay_next_re[0] = Delay4_reg_re[0];
  assign Delay4_bypass_delay_next_im[0] = Delay4_reg_im[0];
  assign Delay4_bypass_delay_next_re[1] = Delay4_reg_re[1];
  assign Delay4_bypass_delay_next_im[1] = Delay4_reg_im[1];
  assign Delay4_bypass_delay_next_re[2] = Delay4_reg_re[2];
  assign Delay4_bypass_delay_next_im[2] = Delay4_reg_im[2];
  assign Delay4_bypass_delay_next_re[3] = Delay4_reg_re[3];
  assign Delay4_bypass_delay_next_im[3] = Delay4_reg_im[3];
  assign Delay4_bypass_delay_next_re[4] = Delay4_reg_re[4];
  assign Delay4_bypass_delay_next_im[4] = Delay4_reg_im[4];
  assign Delay4_bypass_delay_next_re[5] = Delay4_reg_re[5];
  assign Delay4_bypass_delay_next_im[5] = Delay4_reg_im[5];
  assign Delay4_reg_next_re[0] = y_re[0];
  assign Delay4_reg_next_im[0] = y_im[0];
  assign Delay4_reg_next_re[1] = y_re[1];
  assign Delay4_reg_next_im[1] = y_im[1];
  assign Delay4_reg_next_re[2] = y_re[2];
  assign Delay4_reg_next_im[2] = y_im[2];
  assign Delay4_reg_next_re[3] = y_re[3];
  assign Delay4_reg_next_im[3] = y_im[3];
  assign Delay4_reg_next_re[4] = y_re[4];
  assign Delay4_reg_next_im[4] = y_im[4];
  assign Delay4_reg_next_re[5] = y_re[5];
  assign Delay4_reg_next_im[5] = y_im[5];



  assign Product_mul_temp = Data_Type_Conversion4_out1_re[0] * MUX_re[0];
  assign Product_sub_cast = {Product_mul_temp[31], Product_mul_temp};
  assign Product_mul_temp_1 = Data_Type_Conversion4_out1_im[0] * MUX_im[0];
  assign Product_sub_cast_1 = {Product_mul_temp_1[31], Product_mul_temp_1};
  assign Product_sub_temp = Product_sub_cast - Product_sub_cast_1;
  assign Product_out1_re[0] = ((Product_sub_temp[32] == 1'b0) && (Product_sub_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_sub_temp[32] == 1'b1) && (Product_sub_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_sub_temp[31:0])));
  assign Product_mul_temp_2 = Data_Type_Conversion4_out1_im[0] * MUX_re[0];
  assign Product_add_cast = {Product_mul_temp_2[31], Product_mul_temp_2};
  assign Product_mul_temp_3 = Data_Type_Conversion4_out1_re[0] * MUX_im[0];
  assign Product_add_cast_1 = {Product_mul_temp_3[31], Product_mul_temp_3};
  assign Product_add_temp = Product_add_cast + Product_add_cast_1;
  assign Product_out1_im[0] = ((Product_add_temp[32] == 1'b0) && (Product_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_add_temp[32] == 1'b1) && (Product_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_add_temp[31:0])));
  assign Product_mul_temp_4 = Data_Type_Conversion4_out1_re[1] * MUX_re[1];
  assign Product_sub_cast_2 = {Product_mul_temp_4[31], Product_mul_temp_4};
  assign Product_mul_temp_5 = Data_Type_Conversion4_out1_im[1] * MUX_im[1];
  assign Product_sub_cast_3 = {Product_mul_temp_5[31], Product_mul_temp_5};
  assign Product_sub_temp_1 = Product_sub_cast_2 - Product_sub_cast_3;
  assign Product_out1_re[1] = ((Product_sub_temp_1[32] == 1'b0) && (Product_sub_temp_1[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_sub_temp_1[32] == 1'b1) && (Product_sub_temp_1[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_sub_temp_1[31:0])));
  assign Product_mul_temp_6 = Data_Type_Conversion4_out1_im[1] * MUX_re[1];
  assign Product_add_cast_2 = {Product_mul_temp_6[31], Product_mul_temp_6};
  assign Product_mul_temp_7 = Data_Type_Conversion4_out1_re[1] * MUX_im[1];
  assign Product_add_cast_3 = {Product_mul_temp_7[31], Product_mul_temp_7};
  assign Product_add_temp_1 = Product_add_cast_2 + Product_add_cast_3;
  assign Product_out1_im[1] = ((Product_add_temp_1[32] == 1'b0) && (Product_add_temp_1[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_add_temp_1[32] == 1'b1) && (Product_add_temp_1[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_add_temp_1[31:0])));
  assign Product_mul_temp_8 = Data_Type_Conversion4_out1_re[2] * MUX_re[2];
  assign Product_sub_cast_4 = {Product_mul_temp_8[31], Product_mul_temp_8};
  assign Product_mul_temp_9 = Data_Type_Conversion4_out1_im[2] * MUX_im[2];
  assign Product_sub_cast_5 = {Product_mul_temp_9[31], Product_mul_temp_9};
  assign Product_sub_temp_2 = Product_sub_cast_4 - Product_sub_cast_5;
  assign Product_out1_re[2] = ((Product_sub_temp_2[32] == 1'b0) && (Product_sub_temp_2[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_sub_temp_2[32] == 1'b1) && (Product_sub_temp_2[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_sub_temp_2[31:0])));
  assign Product_mul_temp_10 = Data_Type_Conversion4_out1_im[2] * MUX_re[2];
  assign Product_add_cast_4 = {Product_mul_temp_10[31], Product_mul_temp_10};
  assign Product_mul_temp_11 = Data_Type_Conversion4_out1_re[2] * MUX_im[2];
  assign Product_add_cast_5 = {Product_mul_temp_11[31], Product_mul_temp_11};
  assign Product_add_temp_2 = Product_add_cast_4 + Product_add_cast_5;
  assign Product_out1_im[2] = ((Product_add_temp_2[32] == 1'b0) && (Product_add_temp_2[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_add_temp_2[32] == 1'b1) && (Product_add_temp_2[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_add_temp_2[31:0])));
  assign Product_mul_temp_12 = Data_Type_Conversion4_out1_re[3] * MUX_re[3];
  assign Product_sub_cast_6 = {Product_mul_temp_12[31], Product_mul_temp_12};
  assign Product_mul_temp_13 = Data_Type_Conversion4_out1_im[3] * MUX_im[3];
  assign Product_sub_cast_7 = {Product_mul_temp_13[31], Product_mul_temp_13};
  assign Product_sub_temp_3 = Product_sub_cast_6 - Product_sub_cast_7;
  assign Product_out1_re[3] = ((Product_sub_temp_3[32] == 1'b0) && (Product_sub_temp_3[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_sub_temp_3[32] == 1'b1) && (Product_sub_temp_3[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_sub_temp_3[31:0])));
  assign Product_mul_temp_14 = Data_Type_Conversion4_out1_im[3] * MUX_re[3];
  assign Product_add_cast_6 = {Product_mul_temp_14[31], Product_mul_temp_14};
  assign Product_mul_temp_15 = Data_Type_Conversion4_out1_re[3] * MUX_im[3];
  assign Product_add_cast_7 = {Product_mul_temp_15[31], Product_mul_temp_15};
  assign Product_add_temp_3 = Product_add_cast_6 + Product_add_cast_7;
  assign Product_out1_im[3] = ((Product_add_temp_3[32] == 1'b0) && (Product_add_temp_3[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_add_temp_3[32] == 1'b1) && (Product_add_temp_3[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_add_temp_3[31:0])));
  assign Product_mul_temp_16 = Data_Type_Conversion4_out1_re[4] * MUX_re[4];
  assign Product_sub_cast_8 = {Product_mul_temp_16[31], Product_mul_temp_16};
  assign Product_mul_temp_17 = Data_Type_Conversion4_out1_im[4] * MUX_im[4];
  assign Product_sub_cast_9 = {Product_mul_temp_17[31], Product_mul_temp_17};
  assign Product_sub_temp_4 = Product_sub_cast_8 - Product_sub_cast_9;
  assign Product_out1_re[4] = ((Product_sub_temp_4[32] == 1'b0) && (Product_sub_temp_4[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_sub_temp_4[32] == 1'b1) && (Product_sub_temp_4[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_sub_temp_4[31:0])));
  assign Product_mul_temp_18 = Data_Type_Conversion4_out1_im[4] * MUX_re[4];
  assign Product_add_cast_8 = {Product_mul_temp_18[31], Product_mul_temp_18};
  assign Product_mul_temp_19 = Data_Type_Conversion4_out1_re[4] * MUX_im[4];
  assign Product_add_cast_9 = {Product_mul_temp_19[31], Product_mul_temp_19};
  assign Product_add_temp_4 = Product_add_cast_8 + Product_add_cast_9;
  assign Product_out1_im[4] = ((Product_add_temp_4[32] == 1'b0) && (Product_add_temp_4[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_add_temp_4[32] == 1'b1) && (Product_add_temp_4[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_add_temp_4[31:0])));
  assign Product_mul_temp_20 = Data_Type_Conversion4_out1_re[5] * MUX_re[5];
  assign Product_sub_cast_10 = {Product_mul_temp_20[31], Product_mul_temp_20};
  assign Product_mul_temp_21 = Data_Type_Conversion4_out1_im[5] * MUX_im[5];
  assign Product_sub_cast_11 = {Product_mul_temp_21[31], Product_mul_temp_21};
  assign Product_sub_temp_5 = Product_sub_cast_10 - Product_sub_cast_11;
  assign Product_out1_re[5] = ((Product_sub_temp_5[32] == 1'b0) && (Product_sub_temp_5[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_sub_temp_5[32] == 1'b1) && (Product_sub_temp_5[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_sub_temp_5[31:0])));
  assign Product_mul_temp_22 = Data_Type_Conversion4_out1_im[5] * MUX_re[5];
  assign Product_add_cast_10 = {Product_mul_temp_22[31], Product_mul_temp_22};
  assign Product_mul_temp_23 = Data_Type_Conversion4_out1_re[5] * MUX_im[5];
  assign Product_add_cast_11 = {Product_mul_temp_23[31], Product_mul_temp_23};
  assign Product_add_temp_5 = Product_add_cast_10 + Product_add_cast_11;
  assign Product_out1_im[5] = ((Product_add_temp_5[32] == 1'b0) && (Product_add_temp_5[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Product_add_temp_5[32] == 1'b1) && (Product_add_temp_5[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Product_add_temp_5[31:0])));



  assign Data_Type_Conversion1_out1_re[0] = (((Product_out1_re[0][31] == 1'b0) && (Product_out1_re[0][30:29] != 2'b00)) || ((Product_out1_re[0][31] == 1'b0) && (Product_out1_re[0][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[0][31] == 1'b1) && (Product_out1_re[0][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[0][29:14] + $signed({1'b0, Product_out1_re[0][13] & (( ~ Product_out1_re[0][31]) | (|Product_out1_re[0][12:0]))})));
  assign Data_Type_Conversion1_out1_im[0] = (((Product_out1_im[0][31] == 1'b0) && (Product_out1_im[0][30:29] != 2'b00)) || ((Product_out1_im[0][31] == 1'b0) && (Product_out1_im[0][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[0][31] == 1'b1) && (Product_out1_im[0][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[0][29:14] + $signed({1'b0, Product_out1_im[0][13] & (( ~ Product_out1_im[0][31]) | (|Product_out1_im[0][12:0]))})));
  assign Data_Type_Conversion1_out1_re[1] = (((Product_out1_re[1][31] == 1'b0) && (Product_out1_re[1][30:29] != 2'b00)) || ((Product_out1_re[1][31] == 1'b0) && (Product_out1_re[1][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[1][31] == 1'b1) && (Product_out1_re[1][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[1][29:14] + $signed({1'b0, Product_out1_re[1][13] & (( ~ Product_out1_re[1][31]) | (|Product_out1_re[1][12:0]))})));
  assign Data_Type_Conversion1_out1_im[1] = (((Product_out1_im[1][31] == 1'b0) && (Product_out1_im[1][30:29] != 2'b00)) || ((Product_out1_im[1][31] == 1'b0) && (Product_out1_im[1][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[1][31] == 1'b1) && (Product_out1_im[1][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[1][29:14] + $signed({1'b0, Product_out1_im[1][13] & (( ~ Product_out1_im[1][31]) | (|Product_out1_im[1][12:0]))})));
  assign Data_Type_Conversion1_out1_re[2] = (((Product_out1_re[2][31] == 1'b0) && (Product_out1_re[2][30:29] != 2'b00)) || ((Product_out1_re[2][31] == 1'b0) && (Product_out1_re[2][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[2][31] == 1'b1) && (Product_out1_re[2][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[2][29:14] + $signed({1'b0, Product_out1_re[2][13] & (( ~ Product_out1_re[2][31]) | (|Product_out1_re[2][12:0]))})));
  assign Data_Type_Conversion1_out1_im[2] = (((Product_out1_im[2][31] == 1'b0) && (Product_out1_im[2][30:29] != 2'b00)) || ((Product_out1_im[2][31] == 1'b0) && (Product_out1_im[2][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[2][31] == 1'b1) && (Product_out1_im[2][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[2][29:14] + $signed({1'b0, Product_out1_im[2][13] & (( ~ Product_out1_im[2][31]) | (|Product_out1_im[2][12:0]))})));
  assign Data_Type_Conversion1_out1_re[3] = (((Product_out1_re[3][31] == 1'b0) && (Product_out1_re[3][30:29] != 2'b00)) || ((Product_out1_re[3][31] == 1'b0) && (Product_out1_re[3][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[3][31] == 1'b1) && (Product_out1_re[3][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[3][29:14] + $signed({1'b0, Product_out1_re[3][13] & (( ~ Product_out1_re[3][31]) | (|Product_out1_re[3][12:0]))})));
  assign Data_Type_Conversion1_out1_im[3] = (((Product_out1_im[3][31] == 1'b0) && (Product_out1_im[3][30:29] != 2'b00)) || ((Product_out1_im[3][31] == 1'b0) && (Product_out1_im[3][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[3][31] == 1'b1) && (Product_out1_im[3][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[3][29:14] + $signed({1'b0, Product_out1_im[3][13] & (( ~ Product_out1_im[3][31]) | (|Product_out1_im[3][12:0]))})));
  assign Data_Type_Conversion1_out1_re[4] = (((Product_out1_re[4][31] == 1'b0) && (Product_out1_re[4][30:29] != 2'b00)) || ((Product_out1_re[4][31] == 1'b0) && (Product_out1_re[4][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[4][31] == 1'b1) && (Product_out1_re[4][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[4][29:14] + $signed({1'b0, Product_out1_re[4][13] & (( ~ Product_out1_re[4][31]) | (|Product_out1_re[4][12:0]))})));
  assign Data_Type_Conversion1_out1_im[4] = (((Product_out1_im[4][31] == 1'b0) && (Product_out1_im[4][30:29] != 2'b00)) || ((Product_out1_im[4][31] == 1'b0) && (Product_out1_im[4][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[4][31] == 1'b1) && (Product_out1_im[4][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[4][29:14] + $signed({1'b0, Product_out1_im[4][13] & (( ~ Product_out1_im[4][31]) | (|Product_out1_im[4][12:0]))})));
  assign Data_Type_Conversion1_out1_re[5] = (((Product_out1_re[5][31] == 1'b0) && (Product_out1_re[5][30:29] != 2'b00)) || ((Product_out1_re[5][31] == 1'b0) && (Product_out1_re[5][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[5][31] == 1'b1) && (Product_out1_re[5][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[5][29:14] + $signed({1'b0, Product_out1_re[5][13] & (( ~ Product_out1_re[5][31]) | (|Product_out1_re[5][12:0]))})));
  assign Data_Type_Conversion1_out1_im[5] = (((Product_out1_im[5][31] == 1'b0) && (Product_out1_im[5][30:29] != 2'b00)) || ((Product_out1_im[5][31] == 1'b0) && (Product_out1_im[5][29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[5][31] == 1'b1) && (Product_out1_im[5][30:29] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[5][29:14] + $signed({1'b0, Product_out1_im[5][13] & (( ~ Product_out1_im[5][31]) | (|Product_out1_im[5][12:0]))})));



  assign OUT_B_re_0 = Data_Type_Conversion1_out1_re[0];

  assign OUT_B_re_1 = Data_Type_Conversion1_out1_re[1];

  assign OUT_B_re_2 = Data_Type_Conversion1_out1_re[2];

  assign OUT_B_re_3 = Data_Type_Conversion1_out1_re[3];

  assign OUT_B_re_4 = Data_Type_Conversion1_out1_re[4];

  assign OUT_B_re_5 = Data_Type_Conversion1_out1_re[5];

  assign OUT_B_im_0 = Data_Type_Conversion1_out1_im[0];

  assign OUT_B_im_1 = Data_Type_Conversion1_out1_im[1];

  assign OUT_B_im_2 = Data_Type_Conversion1_out1_im[2];

  assign OUT_B_im_3 = Data_Type_Conversion1_out1_im[3];

  assign OUT_B_im_4 = Data_Type_Conversion1_out1_im[4];

  assign OUT_B_im_5 = Data_Type_Conversion1_out1_im[5];

endmodule  // Subsystem

