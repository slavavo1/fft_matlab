// -------------------------------------------------------------
// 
// File Name: hdlsrc\fft_new\Subsystem1.v
// Created: 2025-06-03 11:25:57
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem1
// Source Path: fft_new/fft_sub1/Subsystem1
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem1
          (clk,
           reset,
           enb,
           DATA_A_re,
           DATA_A_im,
           DATA_B_re,
           DATA_B_im,
           COUNT,
           ENA,
           Out1_re,
           Out1_im,
           Out2_re,
           Out2_im);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] DATA_A_re;  // sfix16_En7
  input   signed [15:0] DATA_A_im;  // sfix16_En7
  input   signed [15:0] DATA_B_re;  // sfix16_En7
  input   signed [15:0] DATA_B_im;  // sfix16_En7
  input   [8:0] COUNT;  // ufix9
  input   ENA;
  output  signed [15:0] Out1_re;  // sfix16_En7
  output  signed [15:0] Out1_im;  // sfix16_En7
  output  signed [15:0] Out2_re;  // sfix16_En7
  output  signed [15:0] Out2_im;  // sfix16_En7


  reg [8:0] Delay3_bypass_delay;  // ufix9
  reg [8:0] Delay3_reg [0:1];  // ufix9 [2]
  wire [8:0] Delay3_bypass_delay_next;  // ufix9
  wire [8:0] Delay3_reg_next [0:1];  // ufix9 [2]
  wire [8:0] Delay3_out1;  // ufix9
  wire Bit_Slice_out1;  // ufix1
  wire switch_compare_1;
  wire signed [16:0] Sum_add_cast;  // sfix17_En7
  wire signed [16:0] Sum_add_cast_1;  // sfix17_En7
  wire signed [16:0] Sum_add_cast_2;  // sfix17_En7
  wire signed [16:0] Sum_add_cast_3;  // sfix17_En7
  wire signed [16:0] Sum_out1_re;  // sfix17_En7
  wire signed [16:0] Sum_out1_im;  // sfix17_En7
  wire signed [15:0] Data_Type_Conversion1_out1_re;  // sfix16_En7
  wire signed [15:0] Data_Type_Conversion1_out1_im;  // sfix16_En7
  wire signed [16:0] Sum1_sub_cast;  // sfix17_En7
  wire signed [16:0] Sum1_sub_cast_1;  // sfix17_En7
  wire signed [16:0] Sum1_sub_cast_2;  // sfix17_En7
  wire signed [16:0] Sum1_sub_cast_3;  // sfix17_En7
  wire signed [16:0] Sum1_out1_re;  // sfix17_En7
  wire signed [16:0] Sum1_out1_im;  // sfix17_En7
  wire signed [15:0] Data_Type_Conversion2_out1_re;  // sfix16_En7
  wire signed [15:0] Data_Type_Conversion2_out1_im;  // sfix16_En7
  wire Bit_Slice1_out1;  // ufix1
  wire switch_compare_1_1;
  wire signed [24:0] mux_3_re;  // sfix25_En23
  wire signed [24:0] mux_3_im;  // sfix25_En23
  wire signed [24:0] mux_3_re_1;  // sfix25_En23
  wire signed [24:0] mux_3_im_1;  // sfix25_En23
  wire signed [24:0] mux_2_re;  // sfix25_En23
  wire signed [24:0] mux_2_im;  // sfix25_En23
  wire signed [40:0] Product_mul_temp;  // sfix41_En30
  wire signed [41:0] Product_sub_cast;  // sfix42_En30
  wire signed [40:0] Product_mul_temp_1;  // sfix41_En30
  wire signed [41:0] Product_sub_cast_1;  // sfix42_En30
  wire signed [41:0] Product_sub_temp;  // sfix42_En30
  wire signed [40:0] Product_mul_temp_2;  // sfix41_En30
  wire signed [41:0] Product_add_cast;  // sfix42_En30
  wire signed [40:0] Product_mul_temp_3;  // sfix41_En30
  wire signed [41:0] Product_add_cast_1;  // sfix42_En30
  wire signed [41:0] Product_add_temp;  // sfix42_En30
  wire signed [40:0] Product_out1_re;  // sfix41_En30
  wire signed [40:0] Product_out1_im;  // sfix41_En30
  wire signed [15:0] Data_Type_Conversion3_out1_re;  // sfix16_En7
  wire signed [15:0] Data_Type_Conversion3_out1_im;  // sfix16_En7
  reg signed [15:0] Delay1_bypass_delay_re;  // sfix16_En7
  reg signed [15:0] Delay1_bypass_delay_im;  // sfix16_En7
  reg signed [15:0] Delay1_reg_re;  // sfix16_En7
  reg signed [15:0] Delay1_reg_im;  // sfix16_En7
  wire signed [15:0] Delay1_out1_re;  // sfix16_En7
  wire signed [15:0] Delay1_out1_im;  // sfix16_En7
  wire signed [15:0] Switch1_out1_re;  // sfix16_En7
  wire signed [15:0] Switch1_out1_im;  // sfix16_En7
  reg signed [15:0] Delay2_bypass_delay_re;  // sfix16_En7
  reg signed [15:0] Delay2_bypass_delay_im;  // sfix16_En7
  reg signed [15:0] Delay2_reg_re;  // sfix16_En7
  reg signed [15:0] Delay2_reg_im;  // sfix16_En7
  wire signed [15:0] outa_re;  // sfix16_En7
  wire signed [15:0] outa_im;  // sfix16_En7
  wire switch_compare_1_2;
  wire signed [15:0] outb_re;  // sfix16_En7
  wire signed [15:0] outb_im;  // sfix16_En7
  wire signed [16:0] Sum2_add_cast;  // sfix17_En7
  wire signed [16:0] Sum2_add_cast_1;  // sfix17_En7
  wire signed [16:0] Sum2_add_cast_2;  // sfix17_En7
  wire signed [16:0] Sum2_add_cast_3;  // sfix17_En7
  wire signed [16:0] Sum2_out1_re;  // sfix17_En7
  wire signed [16:0] Sum2_out1_im;  // sfix17_En7
  wire signed [15:0] Data_Type_Conversion5_out1_re;  // sfix16_En7
  wire signed [15:0] Data_Type_Conversion5_out1_im;  // sfix16_En7
  wire signed [16:0] Sum3_sub_cast;  // sfix17_En7
  wire signed [16:0] Sum3_sub_cast_1;  // sfix17_En7
  wire signed [16:0] Sum3_sub_cast_2;  // sfix17_En7
  wire signed [16:0] Sum3_sub_cast_3;  // sfix17_En7
  wire signed [16:0] Sum3_out1_re;  // sfix17_En7
  wire signed [16:0] Sum3_out1_im;  // sfix17_En7
  wire signed [15:0] Data_Type_Conversion4_out1_re;  // sfix16_En7
  wire signed [15:0] Data_Type_Conversion4_out1_im;  // sfix16_En7
  wire signed [24:0] mux_3_re_2;  // sfix25_En23
  wire signed [24:0] mux_3_im_2;  // sfix25_En23
  wire signed [40:0] Product1_mul_temp;  // sfix41_En30
  wire signed [41:0] Product1_sub_cast;  // sfix42_En30
  wire signed [40:0] Product1_mul_temp_1;  // sfix41_En30
  wire signed [41:0] Product1_sub_cast_1;  // sfix42_En30
  wire signed [41:0] Product1_sub_temp;  // sfix42_En30
  wire signed [40:0] Product1_mul_temp_2;  // sfix41_En30
  wire signed [41:0] Product1_add_cast;  // sfix42_En30
  wire signed [40:0] Product1_mul_temp_3;  // sfix41_En30
  wire signed [41:0] Product1_add_cast_1;  // sfix42_En30
  wire signed [41:0] Product1_add_temp;  // sfix42_En30
  wire signed [40:0] Product1_out1_re;  // sfix41_En30
  wire signed [40:0] Product1_out1_im;  // sfix41_En30
  wire signed [15:0] Data_Type_Conversion6_out1_re;  // sfix16_En7
  wire signed [15:0] Data_Type_Conversion6_out1_im;  // sfix16_En7


  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_bypass_delay <= 9'b000000000;
        Delay3_reg[0] <= 9'b000000000;
        Delay3_reg[1] <= 9'b000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay3_bypass_delay <= Delay3_bypass_delay_next;
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
        end
      end
    end

  assign Delay3_out1 = (ENA == 1'b1 ? Delay3_reg[1] :
              Delay3_bypass_delay);
  assign Delay3_bypass_delay_next = Delay3_reg[1];
  assign Delay3_reg_next[0] = COUNT;
  assign Delay3_reg_next[1] = Delay3_reg[0];



  assign Bit_Slice_out1 = Delay3_out1[0];



  assign switch_compare_1 = Bit_Slice_out1 > 1'b0;



  assign Sum_add_cast = {DATA_A_re[15], DATA_A_re};
  assign Sum_add_cast_1 = {DATA_B_re[15], DATA_B_re};
  assign Sum_out1_re = Sum_add_cast + Sum_add_cast_1;
  assign Sum_add_cast_2 = {DATA_A_im[15], DATA_A_im};
  assign Sum_add_cast_3 = {DATA_B_im[15], DATA_B_im};
  assign Sum_out1_im = Sum_add_cast_2 + Sum_add_cast_3;



  assign Data_Type_Conversion1_out1_re = ((Sum_out1_re[16] == 1'b0) && (Sum_out1_re[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum_out1_re[16] == 1'b1) && (Sum_out1_re[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum_out1_re[15:0])));
  assign Data_Type_Conversion1_out1_im = ((Sum_out1_im[16] == 1'b0) && (Sum_out1_im[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum_out1_im[16] == 1'b1) && (Sum_out1_im[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum_out1_im[15:0])));



  assign Sum1_sub_cast = {DATA_A_re[15], DATA_A_re};
  assign Sum1_sub_cast_1 = {DATA_B_re[15], DATA_B_re};
  assign Sum1_out1_re = Sum1_sub_cast - Sum1_sub_cast_1;
  assign Sum1_sub_cast_2 = {DATA_A_im[15], DATA_A_im};
  assign Sum1_sub_cast_3 = {DATA_B_im[15], DATA_B_im};
  assign Sum1_out1_im = Sum1_sub_cast_2 - Sum1_sub_cast_3;



  assign Data_Type_Conversion2_out1_re = ((Sum1_out1_re[16] == 1'b0) && (Sum1_out1_re[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum1_out1_re[16] == 1'b1) && (Sum1_out1_re[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum1_out1_re[15:0])));
  assign Data_Type_Conversion2_out1_im = ((Sum1_out1_im[16] == 1'b0) && (Sum1_out1_im[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum1_out1_im[16] == 1'b1) && (Sum1_out1_im[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum1_out1_im[15:0])));



  assign Bit_Slice1_out1 = Delay3_out1[0];



  assign switch_compare_1_1 = Bit_Slice1_out1 > 1'b0;



  assign mux_3_re = 25'sb0100000000000000000000000;
  assign mux_3_im = 25'sb0000000000000000000000000;



  assign mux_3_re_1 = 25'sb0000000000000000000000000;
  assign mux_3_im_1 = 25'sb1100000000000000000000000;



  assign mux_2_re = (switch_compare_1_1 == 1'b0 ? mux_3_re :
              mux_3_re_1);
  assign mux_2_im = (switch_compare_1_1 == 1'b0 ? mux_3_im :
              mux_3_im_1);



  assign Product_mul_temp = Data_Type_Conversion2_out1_re * mux_2_re;
  assign Product_sub_cast = {Product_mul_temp[40], Product_mul_temp};
  assign Product_mul_temp_1 = Data_Type_Conversion2_out1_im * mux_2_im;
  assign Product_sub_cast_1 = {Product_mul_temp_1[40], Product_mul_temp_1};
  assign Product_sub_temp = Product_sub_cast - Product_sub_cast_1;
  assign Product_out1_re = ((Product_sub_temp[41] == 1'b0) && (Product_sub_temp[40] != 1'b0) ? 41'sh0FFFFFFFFFF :
              ((Product_sub_temp[41] == 1'b1) && (Product_sub_temp[40] != 1'b1) ? 41'sh10000000000 :
              $signed(Product_sub_temp[40:0])));
  assign Product_mul_temp_2 = Data_Type_Conversion2_out1_im * mux_2_re;
  assign Product_add_cast = {Product_mul_temp_2[40], Product_mul_temp_2};
  assign Product_mul_temp_3 = Data_Type_Conversion2_out1_re * mux_2_im;
  assign Product_add_cast_1 = {Product_mul_temp_3[40], Product_mul_temp_3};
  assign Product_add_temp = Product_add_cast + Product_add_cast_1;
  assign Product_out1_im = ((Product_add_temp[41] == 1'b0) && (Product_add_temp[40] != 1'b0) ? 41'sh0FFFFFFFFFF :
              ((Product_add_temp[41] == 1'b1) && (Product_add_temp[40] != 1'b1) ? 41'sh10000000000 :
              $signed(Product_add_temp[40:0])));



  assign Data_Type_Conversion3_out1_re = (((Product_out1_re[40] == 1'b0) && (Product_out1_re[39:38] != 2'b00)) || ((Product_out1_re[40] == 1'b0) && (Product_out1_re[38:23] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_re[40] == 1'b1) && (Product_out1_re[39:38] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_re[38:23] + $signed({1'b0, Product_out1_re[22] & (( ~ Product_out1_re[40]) | (|Product_out1_re[21:0]))})));
  assign Data_Type_Conversion3_out1_im = (((Product_out1_im[40] == 1'b0) && (Product_out1_im[39:38] != 2'b00)) || ((Product_out1_im[40] == 1'b0) && (Product_out1_im[38:23] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product_out1_im[40] == 1'b1) && (Product_out1_im[39:38] != 2'b11) ? 16'sb1000000000000000 :
              Product_out1_im[38:23] + $signed({1'b0, Product_out1_im[22] & (( ~ Product_out1_im[40]) | (|Product_out1_im[21:0]))})));



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_bypass_delay_re <= 16'sb0000000000000000;
        Delay1_bypass_delay_im <= 16'sb0000000000000000;
        Delay1_reg_re <= 16'sb0000000000000000;
        Delay1_reg_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay1_bypass_delay_im <= Delay1_reg_im;
          Delay1_reg_im <= Data_Type_Conversion3_out1_im;
          Delay1_bypass_delay_re <= Delay1_reg_re;
          Delay1_reg_re <= Data_Type_Conversion3_out1_re;
        end
      end
    end

  assign Delay1_out1_re = (ENA == 1'b1 ? Delay1_reg_re :
              Delay1_bypass_delay_re);
  assign Delay1_out1_im = (ENA == 1'b1 ? Delay1_reg_im :
              Delay1_bypass_delay_im);



  assign Switch1_out1_re = (switch_compare_1 == 1'b0 ? Data_Type_Conversion1_out1_re :
              Delay1_out1_re);
  assign Switch1_out1_im = (switch_compare_1 == 1'b0 ? Data_Type_Conversion1_out1_im :
              Delay1_out1_im);



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_bypass_delay_re <= 16'sb0000000000000000;
        Delay2_bypass_delay_im <= 16'sb0000000000000000;
        Delay2_reg_re <= 16'sb0000000000000000;
        Delay2_reg_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb && ENA) begin
          Delay2_bypass_delay_im <= Delay2_reg_im;
          Delay2_reg_im <= Switch1_out1_im;
          Delay2_bypass_delay_re <= Delay2_reg_re;
          Delay2_reg_re <= Switch1_out1_re;
        end
      end
    end

  assign outa_re = (ENA == 1'b1 ? Delay2_reg_re :
              Delay2_bypass_delay_re);
  assign outa_im = (ENA == 1'b1 ? Delay2_reg_im :
              Delay2_bypass_delay_im);



  assign switch_compare_1_2 = Bit_Slice_out1 > 1'b0;



  assign outb_re = (switch_compare_1_2 == 1'b0 ? Delay1_out1_re :
              Data_Type_Conversion1_out1_re);
  assign outb_im = (switch_compare_1_2 == 1'b0 ? Delay1_out1_im :
              Data_Type_Conversion1_out1_im);



  assign Sum2_add_cast = {outa_re[15], outa_re};
  assign Sum2_add_cast_1 = {outb_re[15], outb_re};
  assign Sum2_out1_re = Sum2_add_cast + Sum2_add_cast_1;
  assign Sum2_add_cast_2 = {outa_im[15], outa_im};
  assign Sum2_add_cast_3 = {outb_im[15], outb_im};
  assign Sum2_out1_im = Sum2_add_cast_2 + Sum2_add_cast_3;



  assign Data_Type_Conversion5_out1_re = ((Sum2_out1_re[16] == 1'b0) && (Sum2_out1_re[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum2_out1_re[16] == 1'b1) && (Sum2_out1_re[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum2_out1_re[15:0])));
  assign Data_Type_Conversion5_out1_im = ((Sum2_out1_im[16] == 1'b0) && (Sum2_out1_im[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum2_out1_im[16] == 1'b1) && (Sum2_out1_im[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum2_out1_im[15:0])));



  assign Out1_re = Data_Type_Conversion5_out1_re;

  assign Out1_im = Data_Type_Conversion5_out1_im;

  assign Sum3_sub_cast = {outa_re[15], outa_re};
  assign Sum3_sub_cast_1 = {outb_re[15], outb_re};
  assign Sum3_out1_re = Sum3_sub_cast - Sum3_sub_cast_1;
  assign Sum3_sub_cast_2 = {outa_im[15], outa_im};
  assign Sum3_sub_cast_3 = {outb_im[15], outb_im};
  assign Sum3_out1_im = Sum3_sub_cast_2 - Sum3_sub_cast_3;



  assign Data_Type_Conversion4_out1_re = ((Sum3_out1_re[16] == 1'b0) && (Sum3_out1_re[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum3_out1_re[16] == 1'b1) && (Sum3_out1_re[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum3_out1_re[15:0])));
  assign Data_Type_Conversion4_out1_im = ((Sum3_out1_im[16] == 1'b0) && (Sum3_out1_im[15] != 1'b0) ? 16'sb0111111111111111 :
              ((Sum3_out1_im[16] == 1'b1) && (Sum3_out1_im[15] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Sum3_out1_im[15:0])));



  assign mux_3_re_2 = 25'sb0100000000000000000000000;
  assign mux_3_im_2 = 25'sb0000000000000000000000000;



  assign Product1_mul_temp = Data_Type_Conversion4_out1_re * mux_3_re_2;
  assign Product1_sub_cast = {Product1_mul_temp[40], Product1_mul_temp};
  assign Product1_mul_temp_1 = Data_Type_Conversion4_out1_im * mux_3_im_2;
  assign Product1_sub_cast_1 = {Product1_mul_temp_1[40], Product1_mul_temp_1};
  assign Product1_sub_temp = Product1_sub_cast - Product1_sub_cast_1;
  assign Product1_out1_re = ((Product1_sub_temp[41] == 1'b0) && (Product1_sub_temp[40] != 1'b0) ? 41'sh0FFFFFFFFFF :
              ((Product1_sub_temp[41] == 1'b1) && (Product1_sub_temp[40] != 1'b1) ? 41'sh10000000000 :
              $signed(Product1_sub_temp[40:0])));
  assign Product1_mul_temp_2 = Data_Type_Conversion4_out1_im * mux_3_re_2;
  assign Product1_add_cast = {Product1_mul_temp_2[40], Product1_mul_temp_2};
  assign Product1_mul_temp_3 = Data_Type_Conversion4_out1_re * mux_3_im_2;
  assign Product1_add_cast_1 = {Product1_mul_temp_3[40], Product1_mul_temp_3};
  assign Product1_add_temp = Product1_add_cast + Product1_add_cast_1;
  assign Product1_out1_im = ((Product1_add_temp[41] == 1'b0) && (Product1_add_temp[40] != 1'b0) ? 41'sh0FFFFFFFFFF :
              ((Product1_add_temp[41] == 1'b1) && (Product1_add_temp[40] != 1'b1) ? 41'sh10000000000 :
              $signed(Product1_add_temp[40:0])));



  assign Data_Type_Conversion6_out1_re = (((Product1_out1_re[40] == 1'b0) && (Product1_out1_re[39:38] != 2'b00)) || ((Product1_out1_re[40] == 1'b0) && (Product1_out1_re[38:23] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product1_out1_re[40] == 1'b1) && (Product1_out1_re[39:38] != 2'b11) ? 16'sb1000000000000000 :
              Product1_out1_re[38:23] + $signed({1'b0, Product1_out1_re[22] & (( ~ Product1_out1_re[40]) | (|Product1_out1_re[21:0]))})));
  assign Data_Type_Conversion6_out1_im = (((Product1_out1_im[40] == 1'b0) && (Product1_out1_im[39:38] != 2'b00)) || ((Product1_out1_im[40] == 1'b0) && (Product1_out1_im[38:23] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((Product1_out1_im[40] == 1'b1) && (Product1_out1_im[39:38] != 2'b11) ? 16'sb1000000000000000 :
              Product1_out1_im[38:23] + $signed({1'b0, Product1_out1_im[22] & (( ~ Product1_out1_im[40]) | (|Product1_out1_im[21:0]))})));



  assign Out2_re = Data_Type_Conversion6_out1_re;

  assign Out2_im = Data_Type_Conversion6_out1_im;

endmodule  // Subsystem1

